import { Store } from "../@types";

class IndexedDBStorage implements Store {
  private databaseName: string = "identity-db";
  private storeName: string = "identity";
  public get(key: string): Promise<null | any> {
    const self = this;
    return new Promise((resolve, reject) => {
      self.openDatabase().then(function (db: any) {
        const transaction = db.transaction(self.storeName, "readwrite");
        const objectStore = transaction.objectStore(self.storeName);
        const getRequest = objectStore.get(key);

        getRequest.onsuccess = () => {
          resolve(getRequest.result);
        };

        getRequest.onerror = () => {
          reject(getRequest.error);
        };

        transaction.oncomplete = () => {
          db.close();
        };
      });
    });
  }
  public async remove(key: string): Promise<null> {
    const self = this;
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.databaseName);
      request.onupgradeneeded = function (event: any) {
        const db = event.target.result;
        db.createObjectStore(self.storeName);
      };
      request.onerror = () => {
        reject(request.error);
      };

      request.onsuccess = (event: any) => {
        const db = event.target.result;

        const transaction = db.transaction(this.storeName, "readwrite");
        const objectStore = transaction.objectStore(this.storeName);
        const deleteRequest = objectStore.delete(key);

        deleteRequest.onsuccess = () => {
          resolve(null);
        };

        deleteRequest.onerror = () => {
          reject(deleteRequest.error);
        };

        transaction.oncomplete = () => {
          db.close();
        };
      };
    });
  }
  public set(key: string, value: any): Promise<null> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.databaseName);

      request.onerror = () => {
        reject(request.error);
      };

      request.onupgradeneeded = (event: any) => {
        const db = event.target.result;
        db.createObjectStore(this.storeName);
      };

      request.onsuccess = (event: any) => {
        const db = event.target.result;
        const transaction = db.transaction(this.storeName, "readwrite");
        const objectStore = transaction.objectStore(this.storeName);
        const setRequest = objectStore.put(value, key);

        setRequest.onsuccess = () => {
          resolve(value);
        };

        setRequest.onerror = () => {
          reject(setRequest.error);
        };

        transaction.oncomplete = () => {
          db.close();
        };
      };
    });
  }
  private openDatabase() {
    const self = this;
    return new Promise(function (resolve, reject) {
      const request = indexedDB.open(self.databaseName, 2);
      request.onupgradeneeded = function (event: any) {
        const db = event.target.result;
        db.createObjectStore(self.storeName);
      };
      request.onsuccess = function (event: any) {
        resolve(event.target.result);
      };
      request.onerror = function (event: any) {
        reject(event.error);
      };
    });
  }
}
export default IndexedDBStorage;
