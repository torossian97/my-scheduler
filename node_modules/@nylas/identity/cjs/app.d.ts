import { Config, AuthConfig, IDToken, ProviderList } from "./@types";
import { FetchEventSourceInit } from "@microsoft/fetch-event-source";
export declare class NylasSessions {
    private clientId;
    private redirectUri;
    private accessType;
    private domain;
    private versioned;
    private Storage;
    private hosted;
    private multiAccount;
    private loginId;
    constructor(config: Config);
    validateAccessToken(grant_id?: string): Promise<boolean>;
    validateIDToken(grant_id?: string): Promise<boolean>;
    getDomain(): string;
    auth(config: AuthConfig): Promise<string | undefined>;
    private generateAuthURL;
    generateReauthURL(grant_id: string, scopes: string[]): Promise<string>;
    generateCodeChallenge(): Promise<void>;
    private hostedSetCodeChallenge;
    private getCodeChallege;
    isLoggedIn(): Promise<boolean>;
    isMultiAccount(): boolean;
    logout(): Promise<void>;
    getProfile(grant_id?: string): Promise<IDToken | null>;
    getProfiles(): Promise<IDToken[] | null>;
    removeProfile(id: string): Promise<null>;
    authIMAP(data: any): Promise<any>;
    authEWS(data: any): Promise<any>;
    detectEmail(email: string): Promise<any>;
    applicationInfo(): Promise<any>;
    getAvailableProviders(): Promise<ProviderList[] | null>;
    onLoginSuccess(callback: Function): void;
    onLogoutSuccess(callback: Function): void;
    onLoginFail(callback: any): void;
    onTokenRefreshSuccess(callback: Function): void;
    onTokenRefreshFail(callback: any): void;
    onSessionExpired(callback: any): void;
    codeExchange(search: string | null): Promise<boolean>;
    tokenExchange(grant_id?: string): Promise<boolean | undefined>;
    private handleCodeExchangeResponse;
    popUp(url: string): Promise<void>;
    getAccessToken(grant_id?: string): Promise<string | null>;
    sse(url: string, request: FetchEventSourceInit): Promise<any>;
    fetch(url: string, request: any, parseJSON?: boolean, domain?: string): Promise<any>;
    /**
     * This method will make a request to the Nylas API to exchange an authorization code for an access token.
     * @param path A path to the Nylas API, e.g. `/v3/grants/methreads`
     * @param method GET, POST, PUT, DELETE, etc.
     * @param body A JSON object to send as the body of the request
     * @param domain The domain to use for the request, e.g. `api.us.nylas.com`
     * @param parseJSON Whether to parse the response as JSON or return the readable stream/body response (default: true)
     * @param request A RequestInit object to pass to the fetch request
     * @returns
     */
    fetchRequest<T>(path: string, method?: "GET" | "POST" | "PUT" | "DELETE", body?: any, parseJSON?: boolean, domain?: string, request?: RequestInit): Promise<T>;
    fetchRequest<T>(path: string, method: "GET" | "POST" | "PUT" | "DELETE", body: any, parseJSON: false, domain?: string, request?: RequestInit): Promise<ReadableStream<Uint8Array> | null>;
    fetchRequest<T>(path: string, method: "GET" | "POST" | "PUT" | "DELETE", body: any, parseJSON: true, domain?: string, request?: RequestInit): Promise<T>;
    fetchRequest<T>(path: string, method: "GET" | "POST" | "PUT" | "DELETE", body: any, parseJSON: boolean, domain?: string, request?: RequestInit): Promise<T | ReadableStream<Uint8Array> | null>;
    private isAuthenticatedResponse;
    addAPIKey(grant_id: string, email: string, key: string): void;
}
