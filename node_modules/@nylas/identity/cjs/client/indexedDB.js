"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedDBStorage = /** @class */ (function () {
    function IndexedDBStorage() {
        this.databaseName = "identity-db";
        this.storeName = "identity";
    }
    IndexedDBStorage.prototype.get = function (key) {
        var self = this;
        return new Promise(function (resolve, reject) {
            self.openDatabase().then(function (db) {
                var transaction = db.transaction(self.storeName, "readwrite");
                var objectStore = transaction.objectStore(self.storeName);
                var getRequest = objectStore.get(key);
                getRequest.onsuccess = function () {
                    resolve(getRequest.result);
                };
                getRequest.onerror = function () {
                    reject(getRequest.error);
                };
                transaction.oncomplete = function () {
                    db.close();
                };
            });
        });
    };
    IndexedDBStorage.prototype.remove = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var self;
            var _this = this;
            return __generator(this, function (_a) {
                self = this;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var request = indexedDB.open(_this.databaseName);
                        request.onupgradeneeded = function (event) {
                            var db = event.target.result;
                            db.createObjectStore(self.storeName);
                        };
                        request.onerror = function () {
                            reject(request.error);
                        };
                        request.onsuccess = function (event) {
                            var db = event.target.result;
                            var transaction = db.transaction(_this.storeName, "readwrite");
                            var objectStore = transaction.objectStore(_this.storeName);
                            var deleteRequest = objectStore.delete(key);
                            deleteRequest.onsuccess = function () {
                                resolve(null);
                            };
                            deleteRequest.onerror = function () {
                                reject(deleteRequest.error);
                            };
                            transaction.oncomplete = function () {
                                db.close();
                            };
                        };
                    })];
            });
        });
    };
    IndexedDBStorage.prototype.set = function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var request = indexedDB.open(_this.databaseName);
            request.onerror = function () {
                reject(request.error);
            };
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                db.createObjectStore(_this.storeName);
            };
            request.onsuccess = function (event) {
                var db = event.target.result;
                var transaction = db.transaction(_this.storeName, "readwrite");
                var objectStore = transaction.objectStore(_this.storeName);
                var setRequest = objectStore.put(value, key);
                setRequest.onsuccess = function () {
                    resolve(value);
                };
                setRequest.onerror = function () {
                    reject(setRequest.error);
                };
                transaction.oncomplete = function () {
                    db.close();
                };
            };
        });
    };
    IndexedDBStorage.prototype.openDatabase = function () {
        var self = this;
        return new Promise(function (resolve, reject) {
            var request = indexedDB.open(self.databaseName, 2);
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                db.createObjectStore(self.storeName);
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onerror = function (event) {
                reject(event.error);
            };
        });
    };
    return IndexedDBStorage;
}());
exports.default = IndexedDBStorage;
