"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = void 0;
var buffer_1 = require("buffer");
var localStorage_1 = __importDefault(require("./localStorage"));
var PKCE_KEY = "pkce";
var GRANT_KEY = "grant";
var USER_KEY = "user";
var Storage = /** @class */ (function () {
    function Storage(store) {
        this.Storage = new localStorage_1.default();
        if (store) {
            this.Storage = store;
            return;
        }
    }
    Storage.prototype.setPKCE = function (value) {
        var encrypt = buffer_1.Buffer.from(value);
        this.Storage.set(PKCE_KEY, encrypt.toString("base64"));
    };
    Storage.prototype.getPKCE = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pkce, b, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.Storage.get(PKCE_KEY)];
                    case 1:
                        pkce = _a.sent();
                        if (pkce) {
                            b = buffer_1.Buffer.from(pkce, "base64");
                            return [2 /*return*/, b.toString("utf8")];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/, null];
                }
            });
        });
    };
    Storage.prototype.removePKCE = function () {
        this.Storage.remove(PKCE_KEY);
    };
    Storage.prototype.setGrant = function (resp, multiAccount) {
        if (multiAccount === void 0) { multiAccount = false; }
        var grant_id = resp.grant_id;
        this.Storage.set("".concat(GRANT_KEY).concat(multiAccount ? "-" + grant_id : ""), resp);
    };
    Storage.prototype.removeGrant = function (id, multiAccount) {
        if (multiAccount === void 0) { multiAccount = false; }
        this.Storage.remove("".concat(GRANT_KEY).concat(multiAccount ? "-" + id : ""));
    };
    Storage.prototype.getGrant = function (id, multiAccount) {
        if (multiAccount === void 0) { multiAccount = false; }
        return __awaiter(this, void 0, void 0, function () {
            var grant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.get("".concat(GRANT_KEY).concat(multiAccount ? "-" + id : ""))];
                    case 1:
                        grant = _a.sent();
                        if (grant) {
                            return [2 /*return*/, grant];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // setUserToken is used to store the IDToken in storage
    Storage.prototype.setUserToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var userTokens, userToken, newTokens, newUserTokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserTokens()];
                    case 1:
                        userTokens = _a.sent();
                        // If userTokens exist, check if the token is already in the array
                        if (userTokens) {
                            userToken = userTokens.find(function (t) { return t.sub === token.sub; });
                            // If the token is not in the array, add it
                            if (!userToken) {
                                newTokens = __spreadArray(__spreadArray([], userTokens, true), [token], false);
                                this.Storage.set(USER_KEY, newTokens);
                            }
                            else {
                                newUserTokens = userTokens.map(function (t) {
                                    if (t.sub === token.sub) {
                                        t = token;
                                    }
                                    return t;
                                });
                                this.Storage.set(USER_KEY, newUserTokens);
                            }
                        }
                        else {
                            // If userTokens do not exist, create a new array with the token
                            this.Storage.set(USER_KEY, [token]);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    // getUserToken is used to retrieve a specific IDToken from storage
    Storage.prototype.getUserToken = function (id) {
        if (id === void 0) { id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var tokens, userToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.get(USER_KEY)];
                    case 1:
                        tokens = _a.sent();
                        if (tokens) {
                            if (id === "") {
                                // If no id is passed, return the first token
                                return [2 /*return*/, tokens[0]];
                            }
                            userToken = tokens.find(function (token) { return token.sub === id; });
                            return [2 /*return*/, userToken];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // getUserTokens is used to retrieve all IDTokens from storage
    Storage.prototype.getUserTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.get(USER_KEY)];
                    case 1:
                        tokens = _a.sent();
                        if (tokens) {
                            return [2 /*return*/, tokens];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // removeUserTokens is used to remove all IDTokens from storage
    Storage.prototype.removeUserTokens = function () {
        this.Storage.remove(USER_KEY);
    };
    // removeUserToken is used to remove a specific IDToken from storage
    Storage.prototype.removeUserToken = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var userTokens, tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserTokens()];
                    case 1:
                        userTokens = _a.sent();
                        tokens = userTokens === null || userTokens === void 0 ? void 0 : userTokens.filter(function (token) { return token.sub !== id; });
                        // If there are tokens left, store them
                        this.Storage.set(USER_KEY, tokens);
                        return [2 /*return*/];
                }
            });
        });
    };
    Storage.prototype.clearSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokens;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserTokens()];
                    case 1:
                        tokens = _a.sent();
                        tokens === null || tokens === void 0 ? void 0 : tokens.forEach(function (token) {
                            _this.removeGrant(token.sub);
                        });
                        this.removePKCE();
                        this.removeUserTokens();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Storage;
}());
exports.Storage = Storage;
