"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NylasSessions = void 0;
var store_1 = require("./client/store");
var indexedDB_1 = __importDefault(require("./client/indexedDB"));
var js_sha256_1 = require("js-sha256");
var buffer_1 = require("buffer");
var uuid_1 = require("uuid");
var fetch_event_source_1 = require("@microsoft/fetch-event-source");
var helpers_1 = require("./helpers");
var jwt_decode_1 = __importDefault(require("jwt-decode"));
var NylasSessions = /** @class */ (function () {
    function NylasSessions(config) {
        this.accessType = "online";
        this.domain = "http://api.nylas.com";
        this.versioned = false;
        this.hosted = false;
        this.multiAccount = false;
        this.loginId = "";
        this.clientId = config.clientId;
        this.redirectUri = config.redirectUri;
        if (config.domain) {
            this.domain = config.domain;
            var versionedPart = this.domain.substring(this.domain.length - 3);
            if (versionedPart.includes("/v")) {
                this.versioned = true;
            }
        }
        if (config.multiAccount) {
            this.multiAccount = config.multiAccount;
        }
        if (config.sw) {
            var storage = new indexedDB_1.default();
            this.Storage = new store_1.Storage(storage);
        }
        else {
            this.Storage = new store_1.Storage();
        }
        if (config.accessType) {
            this.accessType = config.accessType;
        }
        if (config.loginId) {
            this.loginId = config.loginId;
        }
        if (config.hosted) {
            this.hosted = config.hosted;
        }
        this.codeExchange(null);
        // check();
        // registerServiceWorker();
    }
    // Validates access token
    NylasSessions.prototype.validateAccessToken = function (grant_id) {
        if (grant_id === void 0) { grant_id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var access_token, response, responseData, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.getGrant(grant_id, this.multiAccount)];
                    case 1:
                        access_token = (_a.sent()).access_token;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/tokeninfo?access_token=").concat(access_token), {
                                method: "GET",
                            })];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (!responseData.data) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                    case 5:
                        error_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    // Validates id token
    NylasSessions.prototype.validateIDToken = function (grant_id) {
        if (grant_id === void 0) { grant_id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var id_token, response, responseData, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.getGrant(grant_id, this.multiAccount)];
                    case 1:
                        id_token = (_a.sent()).id_token;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/tokeninfo?id_token=").concat(id_token), {
                                method: "GET",
                            })];
                    case 3:
                        response = _a.sent();
                        if (response.status !== 200) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (!responseData.data) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                    case 5:
                        error_2 = _a.sent();
                        return [2 /*return*/, false];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    // Gets domain of UAS
    NylasSessions.prototype.getDomain = function () {
        return this.domain;
    };
    // Gets auth link
    NylasSessions.prototype.auth = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.hosted &&
                            (this.domain === window.location.origin ||
                                (this.versioned && this.domain.includes(window.location.origin))))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.hostedSetCodeChallenge()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.generateAuthURL(config)];
                    case 3:
                        url = _a.sent();
                        if (config.popup) {
                            this.popUp(url);
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, url];
                }
            });
        });
    };
    // Generates auth URL
    NylasSessions.prototype.generateAuthURL = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var codeChallenge, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCodeChallege()];
                    case 1:
                        codeChallenge = _a.sent();
                        url = "".concat(this.domain, "/connect/auth?client_id=").concat(this.clientId, "&redirect_uri=").concat(this.redirectUri, "&access_type=").concat(this.accessType, "&response_type=code");
                        if (codeChallenge) {
                            url += "&code_challenge=".concat(codeChallenge, "&code_challenge_method=S256&options=rotate_refresh_token");
                        }
                        if (config.provider) {
                            url += "&provider=".concat(config.provider);
                        }
                        if (config.loginHint) {
                            url += "&login_hint=".concat(config.loginHint);
                            if (config.includeGrantScopes) {
                                url += "&include_grant_scopes=".concat(config.includeGrantScopes);
                            }
                        }
                        if (config.scope) {
                            url += "&scope=".concat(config.scope.join(" "));
                        }
                        if (config.prompt) {
                            url += "&prompt=".concat(config.prompt);
                        }
                        if (config.metadata) {
                            url += "&metadata=".concat(config.metadata);
                        }
                        if (config.state || this.loginId) {
                            url += "&state=".concat(this.loginId ? this.loginId : config.state);
                        }
                        return [2 /*return*/, url];
                }
            });
        });
    };
    // Generates auth URL
    NylasSessions.prototype.generateReauthURL = function (grant_id, scopes) {
        return __awaiter(this, void 0, void 0, function () {
            var userToken, codeChallenge, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!grant_id) {
                            throw new Error("Grant ID is required");
                        }
                        return [4 /*yield*/, this.Storage.getUserToken(grant_id)];
                    case 1:
                        userToken = _a.sent();
                        return [4 /*yield*/, this.getCodeChallege()];
                    case 2:
                        codeChallenge = _a.sent();
                        url = "".concat(this.domain, "/connect/auth?client_id=").concat(this.clientId, "&redirect_uri=").concat(this.redirectUri, "&access_type=").concat(this.accessType, "&response_type=code");
                        if (codeChallenge) {
                            url += "&code_challenge=".concat(codeChallenge, "&code_challenge_method=S256&options=rotate_refresh_token");
                        }
                        if (userToken === null || userToken === void 0 ? void 0 : userToken.provider) {
                            url += "&provider=".concat(userToken.provider);
                        }
                        if (userToken === null || userToken === void 0 ? void 0 : userToken.email) {
                            url += "&login_hint=".concat(userToken.email);
                        }
                        if (scopes) {
                            url += "&scope=".concat(scopes.join(" "));
                        }
                        return [2 /*return*/, url];
                }
            });
        });
    };
    // Generates UUID code challenge
    NylasSessions.prototype.generateCodeChallenge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var code_verifier, codeChallenge;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.getPKCE()];
                    case 1:
                        code_verifier = _a.sent();
                        if (code_verifier) {
                            return [2 /*return*/];
                        }
                        codeChallenge = (0, uuid_1.v4)();
                        this.Storage.setPKCE(codeChallenge);
                        return [2 /*return*/];
                }
            });
        });
    };
    // Gets code challenge from URL query params
    NylasSessions.prototype.hostedSetCodeChallenge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, codeChallenge, code_verifier;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hosted) {
                            throw console.error("Method only used with hosted flag enabled");
                        }
                        params = new URLSearchParams(window.location.search);
                        codeChallenge = params.get("code_challenge");
                        if (!!codeChallenge) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.Storage.getPKCE()];
                    case 1:
                        code_verifier = _a.sent();
                        if (code_verifier) {
                            return [2 /*return*/];
                        }
                        console.warn("Code challenge is recomended");
                        return [2 /*return*/];
                    case 2:
                        this.Storage.setPKCE(codeChallenge);
                        return [2 /*return*/];
                }
            });
        });
    };
    // Gets code challenge from store
    NylasSessions.prototype.getCodeChallege = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, codeChallenge, code_verifier, codeChallengeHashed, codeChallengeEncrypted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.hosted &&
                            (this.domain === window.location.origin ||
                                (this.versioned && this.domain.includes(window.location.origin)))) {
                            params = new URLSearchParams(window.location.search);
                            codeChallenge = params.get("code_challenge");
                            if (!codeChallenge) {
                                console.warn("Code challenge is recomended");
                                return [2 /*return*/, ""];
                            }
                            return [2 /*return*/, codeChallenge];
                        }
                        return [4 /*yield*/, this.Storage.getPKCE()];
                    case 1:
                        code_verifier = _a.sent();
                        if (code_verifier) {
                            codeChallengeHashed = (0, js_sha256_1.sha256)(code_verifier);
                            codeChallengeEncrypted = buffer_1.Buffer.from(codeChallengeHashed).toString("base64");
                            codeChallengeEncrypted = (0, helpers_1.Base64EncodeUrl)(codeChallengeEncrypted);
                            return [2 /*return*/, codeChallengeEncrypted];
                        }
                        return [2 /*return*/, ""];
                }
            });
        });
    };
    // checks if user is logged in
    NylasSessions.prototype.isLoggedIn = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // if hosted identity isLoggedIn always returns false
                        if (this.hosted &&
                            (this.domain === window.location.origin ||
                                (this.versioned && this.domain.includes(window.location.origin)))) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.Storage.getUserTokens()];
                    case 1:
                        tokens = _a.sent();
                        if (!(tokens && tokens.length > 0)) return [3 /*break*/, 4];
                        if (!this.multiAccount) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.generateCodeChallenge()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                    case 4: return [4 /*yield*/, this.generateCodeChallenge()];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, false];
                }
            });
        });
    };
    // Checks if user is multi account
    NylasSessions.prototype.isMultiAccount = function () {
        return this.multiAccount;
    };
    // Logs user out
    NylasSessions.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profile, payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProfile()];
                    case 1:
                        profile = _a.sent();
                        return [4 /*yield*/, this.Storage.clearSession()];
                    case 2:
                        _a.sent();
                        payload = { detail: profile };
                        window.dispatchEvent(new CustomEvent("onLogoutSuccess", payload));
                        return [2 /*return*/];
                }
            });
        });
    };
    // Gets profile info from ID token
    NylasSessions.prototype.getProfile = function (grant_id) {
        if (grant_id === void 0) { grant_id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var tok;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!grant_id) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.Storage.getUserToken(grant_id)];
                    case 1:
                        tok = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.Storage.getUserToken()];
                    case 3:
                        tok = _a.sent();
                        _a.label = 4;
                    case 4:
                        if (tok) {
                            return [2 /*return*/, tok];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // Gets profile info from ID tokens
    NylasSessions.prototype.getProfiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tok;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.getUserTokens()];
                    case 1:
                        tok = _a.sent();
                        if (tok) {
                            return [2 /*return*/, tok];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // Remove a specific profile
    NylasSessions.prototype.removeProfile = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.removeUserToken(id)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.Storage.removeGrant(id)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    // IMAP authentication
    NylasSessions.prototype.authIMAP = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var code_challenge, payload, response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCodeChallege()];
                    case 1:
                        code_challenge = _a.sent();
                        payload = {
                            imap_username: data.username,
                            imap_password: data.password,
                            imap_host: data.hostIMAP,
                            imap_port: data.portIMAP,
                            type: data.type,
                            smtp_host: data.hostSMTP,
                            smtp_port: data.portSMTP,
                            provider: data.provider,
                            redirect_uri: this.redirectUri,
                            state: data.state,
                            public_application_id: this.clientId,
                            access_type: this.accessType,
                        };
                        if (this.loginId) {
                            payload.id = this.loginId;
                        }
                        if (code_challenge != "") {
                            payload.code_challenge = code_challenge;
                            payload.code_challenge_method = "S256";
                        }
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/login/imap"), {
                                method: "POST",
                                headers: new Headers({ "content-type": "application/json" }),
                                body: JSON.stringify(payload),
                            })];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3:
                        responseData = _a.sent();
                        return [2 /*return*/, responseData];
                }
            });
        });
    };
    // EWS authentication
    NylasSessions.prototype.authEWS = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var code_challenge, payload, response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCodeChallege()];
                    case 1:
                        code_challenge = _a.sent();
                        payload = __assign(__assign({}, data), { redirect_uri: this.redirectUri, public_application_id: this.clientId, access_type: this.accessType });
                        if (this.loginId) {
                            payload.id = this.loginId;
                        }
                        if (code_challenge != "") {
                            payload.code_challenge = code_challenge;
                            payload.code_challenge_method = "S256";
                        }
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/login/ews"), {
                                method: "POST",
                                headers: new Headers({ "content-type": "application/json" }),
                                body: JSON.stringify(payload),
                            })];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3:
                        responseData = _a.sent();
                        return [2 /*return*/, responseData];
                }
            });
        });
    };
    // Detects email
    NylasSessions.prototype.detectEmail = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch("".concat(this.versioned ? this.domain : this.domain + "/connect", "/providers/detect?client_id=").concat(this.clientId, "&email=").concat(email), {
                            method: "POST",
                            headers: new Headers({ "content-type": "application/json" }),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseData = _a.sent();
                        return [2 /*return*/, responseData.data];
                }
            });
        });
    };
    // Gets app info from UAS
    NylasSessions.prototype.applicationInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch("".concat(this.versioned ? this.domain : this.domain + "/connect", "/applications?client_id=").concat(this.clientId), {
                            method: "GET",
                            headers: new Headers({ "content-type": "application/json" }),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseData = _a.sent();
                        return [2 /*return*/, responseData.data];
                }
            });
        });
    };
    // Gets providers form UAS
    NylasSessions.prototype.getAvailableProviders = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseData, providers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch("".concat(this.domain, "/connect/providers/find?client_id=").concat(this.clientId), {
                            method: "GET",
                            headers: new Headers({ "content-type": "application/json" }),
                        })];
                    case 1:
                        response = _a.sent();
                        if (!response) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseData = _a.sent();
                        providers = responseData.data;
                        return [2 /*return*/, providers];
                    case 3: return [2 /*return*/, null];
                }
            });
        });
    };
    // EVENT HOOKS
    NylasSessions.prototype.onLoginSuccess = function (callback) {
        window.addEventListener("onLoginSuccess", function (e) { return callback(e); });
    };
    NylasSessions.prototype.onLogoutSuccess = function (callback) {
        window.addEventListener("onLogoutSuccess", function (e) { return callback(e); });
    };
    NylasSessions.prototype.onLoginFail = function (callback) {
        window.addEventListener("onLoginFail", function (e) { return callback(e); });
    };
    NylasSessions.prototype.onTokenRefreshSuccess = function (callback) {
        window.addEventListener("onTokenRefreshSuccess", function (e) { return callback(e); });
    };
    NylasSessions.prototype.onTokenRefreshFail = function (callback) {
        window.addEventListener("onTokenRefreshFail", function (e) { return callback(e); });
    };
    NylasSessions.prototype.onSessionExpired = function (callback) {
        window.addEventListener("onSessionExpired", function (e) { return callback(e); });
    };
    // Exchanges code for ID token and refresh and access tokens
    NylasSessions.prototype.codeExchange = function (search) {
        return __awaiter(this, void 0, void 0, function () {
            var params, code, state, error, error_description, error_code, payload, code_verifier, payload, response, responseData, payload_1, exchangeResponse, payload_2, payload_3, error_3, payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new URLSearchParams(window.location.search);
                        if (search) {
                            params = new URLSearchParams(search);
                        }
                        code = params.get("code");
                        state = params.get("state");
                        error = params.get("error");
                        error_description = params.get("error_description");
                        error_code = params.get("error_code");
                        if (error && error_description && error_code) {
                            payload = {
                                detail: { error: error, error_description: error_description, error_code: error_code },
                            };
                            window.dispatchEvent(new CustomEvent("onLoginFail", payload));
                            window.history.pushState({}, document.title, window.location.pathname);
                            return [2 /*return*/, false];
                        }
                        if (!code) {
                            console.warn("No code found");
                            return [2 /*return*/, false];
                        }
                        // If popup window stop internal code exchange
                        if (window.opener && window.name === "uas-popup") {
                            console.warn("Popup window detected");
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.Storage.getPKCE()];
                    case 1:
                        code_verifier = _a.sent();
                        if (!code_verifier) {
                            console.warn("No code verifier found");
                            return [2 /*return*/, false];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        payload = {
                            client_id: this.clientId,
                            redirect_uri: this.redirectUri,
                            code: code,
                            grant_type: "authorization_code",
                            code_verifier: code_verifier,
                        };
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/token"), {
                                method: "POST",
                                headers: new Headers({ "content-type": "application/json" }),
                                body: JSON.stringify(payload),
                            })];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (!responseData) return [3 /*break*/, 6];
                        if (responseData.error) {
                            payload_1 = { detail: responseData };
                            window.dispatchEvent(new CustomEvent("onLoginFail", payload_1));
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.handleCodeExchangeResponse(responseData)];
                    case 5:
                        exchangeResponse = _a.sent();
                        if (!exchangeResponse.valid) {
                            payload_2 = { detail: exchangeResponse.data };
                            window.dispatchEvent(new CustomEvent("onLoginFail", payload_2));
                            return [2 /*return*/, true];
                        }
                        else {
                            if (state) {
                                exchangeResponse.data.state = state;
                            }
                            payload_3 = { detail: exchangeResponse.data };
                            window.dispatchEvent(new CustomEvent("onLoginSuccess", payload_3));
                            window.history.pushState({}, document.title, window.location.pathname);
                        }
                        _a.label = 6;
                    case 6:
                        this.Storage.removePKCE();
                        return [2 /*return*/, true];
                    case 7:
                        error_3 = _a.sent();
                        payload = { detail: error_3 };
                        window.dispatchEvent(new CustomEvent("onLoginFail", payload));
                        window.history.pushState({}, document.title, window.location.pathname);
                        return [2 /*return*/, false];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // Token Exchange for session  maintenece
    NylasSessions.prototype.tokenExchange = function (grant_id) {
        if (grant_id === void 0) { grant_id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var refresh_token, payload, response, responseData, payload_4, now, isValidToken, payload_5, payload_6, error_4, payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Storage.getGrant(grant_id, this.multiAccount)];
                    case 1:
                        refresh_token = (_a.sent()).refresh_token;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        payload = {
                            client_id: this.clientId,
                            redirect_uri: this.redirectUri,
                            refresh_token: refresh_token,
                            grant_type: "refresh_token",
                        };
                        return [4 /*yield*/, fetch("".concat(this.domain, "/connect/token"), {
                                method: "POST",
                                headers: new Headers({ "content-type": "application/json" }),
                                body: JSON.stringify(payload),
                            })];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (!responseData) return [3 /*break*/, 6];
                        if (responseData.error) {
                            payload_4 = { detail: responseData };
                            window.dispatchEvent(new CustomEvent("onTokenRefreshFail", payload_4));
                            return [2 /*return*/, true];
                        }
                        now = (0, helpers_1.getTimestamp)();
                        responseData.expires_in = now + responseData.expires_in;
                        this.Storage.setGrant(responseData, this.multiAccount);
                        return [4 /*yield*/, this.validateIDToken(grant_id)];
                    case 5:
                        isValidToken = _a.sent();
                        if (!isValidToken) {
                            payload_5 = { detail: responseData };
                            window.dispatchEvent(new CustomEvent("onTokenRefreshFail", payload_5));
                            return [2 /*return*/, true];
                        }
                        payload_6 = { detail: responseData };
                        window.dispatchEvent(new CustomEvent("onTokenRefreshSuccess", payload_6));
                        return [2 /*return*/, true];
                    case 6:
                        // Remove PKCE code_challenge from local storage
                        this.Storage.removePKCE();
                        return [3 /*break*/, 8];
                    case 7:
                        error_4 = _a.sent();
                        payload = { detail: error_4 };
                        window.dispatchEvent(new CustomEvent("onTokenRefreshFail", payload));
                        return [2 /*return*/, false];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // Handles the response of code exchange
    NylasSessions.prototype.handleCodeExchangeResponse = function (responseData) {
        return __awaiter(this, void 0, void 0, function () {
            var isValid, now, user, isValidToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isValid = true;
                        if (responseData.error) {
                            return [2 /*return*/, {
                                    data: responseData,
                                    valid: false,
                                }];
                        }
                        now = (0, helpers_1.getTimestamp)();
                        responseData.expires_in = now + responseData.expires_in;
                        this.Storage.setGrant(responseData, this.multiAccount);
                        user = (0, jwt_decode_1.default)(responseData.id_token);
                        user.status = "authenticated";
                        this.Storage.setUserToken(user);
                        return [4 /*yield*/, this.validateIDToken(user.sub)];
                    case 1:
                        isValidToken = _a.sent();
                        if (!isValidToken) {
                            return [2 /*return*/, {
                                    data: responseData,
                                    valid: false,
                                }];
                        }
                        return [2 /*return*/, {
                                data: responseData,
                                valid: isValid,
                            }];
                }
            });
        });
    };
    // Regulates POPUP behaivior
    NylasSessions.prototype.popUp = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var width, height, left, top, title, popupURL, externalPopup, timer;
            var _this = this;
            return __generator(this, function (_a) {
                width = 500;
                height = 600;
                left = window.screenX + (window.outerWidth - width) / 2;
                top = window.screenY + (window.outerHeight - height) / 2.5;
                title = "uas-popup";
                popupURL = url;
                externalPopup = window.open(popupURL, title, "width=".concat(width, ",height=").concat(height, ",left=").concat(left, ",top=").concat(top));
                if (!externalPopup) {
                    return [2 /*return*/];
                }
                timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                    var payload, currentUrl, search, success, error_5;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (externalPopup.closed) {
                                    payload = {
                                        detail: { error_description: "OAuth provider window closed" },
                                    };
                                    window.dispatchEvent(new CustomEvent("onLoginFail", payload));
                                    timer && clearInterval(timer);
                                    return [2 /*return*/];
                                }
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 4, , 5]);
                                currentUrl = externalPopup.location.href.split("?");
                                if (!currentUrl[0]) {
                                    return [2 /*return*/];
                                }
                                search = externalPopup.location.search;
                                externalPopup.history.pushState({}, document.title, window.location.pathname);
                                if (!(currentUrl[0] === this.redirectUri && currentUrl.length > 1)) return [3 /*break*/, 3];
                                return [4 /*yield*/, this.codeExchange(search)];
                            case 2:
                                success = _a.sent();
                                externalPopup.close();
                                if (success) {
                                    location.reload();
                                }
                                timer && clearInterval(timer);
                                return [2 /*return*/];
                            case 3: return [3 /*break*/, 5];
                            case 4:
                                error_5 = _a.sent();
                                return [2 /*return*/];
                            case 5: return [2 /*return*/];
                        }
                    });
                }); }, 1000);
                return [2 /*return*/];
            });
        });
    };
    // Returns access token
    NylasSessions.prototype.getAccessToken = function (grant_id) {
        if (grant_id === void 0) { grant_id = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var now, _a, access_token, expires_in, token, timeLeft, grant;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        now = (0, helpers_1.getTimestamp)();
                        return [4 /*yield*/, this.Storage.getGrant(grant_id, this.multiAccount)];
                    case 1:
                        _a = _b.sent(), access_token = _a.access_token, expires_in = _a.expires_in;
                        token = access_token;
                        if (token) {
                            if (expires_in && expires_in > (0, helpers_1.getTimestamp)()) {
                                timeLeft = expires_in - now;
                                // If more then 30 secounds remain return access token
                                if (timeLeft > 30) {
                                    return [2 /*return*/, token];
                                }
                            }
                        }
                        return [4 /*yield*/, this.tokenExchange(grant_id)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this.Storage.getGrant(grant_id, this.multiAccount)];
                    case 3:
                        grant = _b.sent();
                        return [2 /*return*/, grant.access_token];
                }
            });
        });
    };
    NylasSessions.prototype.sse = function (url, request) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, grant_id, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = request.headers || {};
                        grant_id = headers["Grant-ID"];
                        token = "";
                        if (!this.multiAccount) return [3 /*break*/, 2];
                        if (!grant_id) {
                            throw new Error("Grant ID is required for multi account calls");
                        }
                        return [4 /*yield*/, this.getAccessToken(grant_id)];
                    case 1:
                        token = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.getAccessToken()];
                    case 3:
                        token = _a.sent();
                        _a.label = 4;
                    case 4:
                        delete headers["Grant-ID"];
                        headers["Authorization"] = "Bearer ".concat(token);
                        if (!headers["content-type"]) {
                            headers["content-type"] = "application/json";
                        }
                        return [2 /*return*/, (0, fetch_event_source_1.fetchEventSource)("".concat(this.domain, "/").concat(url), __assign(__assign({}, request), { headers: headers }))];
                }
            });
        });
    };
    // Used to call Nylas API endpoints
    NylasSessions.prototype.fetch = function (url, request, parseJSON, domain) {
        if (parseJSON === void 0) { parseJSON = true; }
        return __awaiter(this, void 0, void 0, function () {
            var token, profileCount, profiles, headers, response, responseData, isAuthenticated, user, payload, user, payload, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = "";
                        profileCount = 1;
                        if (!this.multiAccount) return [3 /*break*/, 3];
                        if (!request.grant_id) {
                            throw new Error("Grant ID is required for multi account calls");
                        }
                        return [4 /*yield*/, this.getProfiles()];
                    case 1:
                        profiles = _a.sent();
                        profileCount = profiles ? profiles.length : 1;
                        return [4 /*yield*/, this.getAccessToken(request.grant_id)];
                    case 2:
                        token = _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getAccessToken()];
                    case 4:
                        token = _a.sent();
                        _a.label = 5;
                    case 5:
                        headers = request.headers;
                        if (!Headers.prototype.isPrototypeOf(headers)) {
                            headers = new Headers({
                                Authorization: "Bearer ".concat(token),
                                "content-type": "application/json",
                            });
                        }
                        else {
                            headers.append("Authorization", "Bearer ".concat(token));
                            if (!headers.has("content-type")) {
                                headers.append("content-type", "application/json");
                            }
                        }
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 17, , 18]);
                        if (request === null || request === void 0 ? void 0 : request.body) {
                            request.body = JSON.stringify(request === null || request === void 0 ? void 0 : request.body);
                        }
                        return [4 /*yield*/, fetch("".concat(domain || this.domain, "/").concat(url), __assign(__assign({}, request), { headers: headers }))];
                    case 7:
                        response = _a.sent();
                        if (!parseJSON) {
                            return [2 /*return*/, response];
                        }
                        return [4 /*yield*/, (response === null || response === void 0 ? void 0 : response.json())];
                    case 8:
                        responseData = _a.sent();
                        return [4 /*yield*/, this.isAuthenticatedResponse(response.status, responseData)];
                    case 9:
                        isAuthenticated = _a.sent();
                        if (!!isAuthenticated) return [3 /*break*/, 16];
                        if (!(profileCount > 1)) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.getProfile(request.grant_id)];
                    case 10:
                        user = _a.sent();
                        if (!user) return [3 /*break*/, 12];
                        user.status = "unauthorized";
                        return [4 /*yield*/, this.Storage.setUserToken(user)];
                    case 11:
                        _a.sent();
                        payload = {
                            detail: { user: user },
                        };
                        window.dispatchEvent(new CustomEvent("onSessionExpired", payload));
                        _a.label = 12;
                    case 12: return [3 /*break*/, 15];
                    case 13: return [4 /*yield*/, this.Storage.getUserToken()];
                    case 14:
                        user = _a.sent();
                        payload = {
                            detail: { user: user },
                        };
                        window.dispatchEvent(new CustomEvent("onSessionExpired", payload));
                        this.logout();
                        _a.label = 15;
                    case 15: return [2 /*return*/];
                    case 16: return [2 /*return*/, responseData];
                    case 17:
                        e_1 = _a.sent();
                        throw e_1;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    NylasSessions.prototype.fetchRequest = function (path, method, body, parseJSON, domain, request) {
        if (parseJSON === void 0) { parseJSON = true; }
        return __awaiter(this, void 0, void 0, function () {
            var isLoggedIn, url, headers, accessToken, response, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isLoggedIn()];
                    case 1:
                        isLoggedIn = _a.sent();
                        url = new URL(path, domain !== null && domain !== void 0 ? domain : this.domain);
                        headers = new Headers();
                        headers.append("Accept", "application/json");
                        headers.append("Content-Type", "application/json");
                        headers.append("User-Agent", "nylas-identity");
                        if (!isLoggedIn) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getAccessToken()];
                    case 2:
                        accessToken = _a.sent();
                        headers.append("Authorization", "Bearer ".concat(accessToken));
                        _a.label = 3;
                    case 3: return [4 /*yield*/, fetch(url.toString(), __assign({ method: method || "GET", headers: headers, mode: "cors", referrer: location.origin, body: body ? JSON.stringify(body) : undefined }, (request || {})))];
                    case 4:
                        response = _a.sent();
                        // If we don't want to parse the response as JSON, return the raw response
                        if (!parseJSON) {
                            return [2 /*return*/, response.body];
                        }
                        return [4 /*yield*/, response.json()];
                    case 5:
                        json = _a.sent();
                        return [2 /*return*/, json];
                }
            });
        });
    };
    // Checks if the response is not 401
    NylasSessions.prototype.isAuthenticatedResponse = function (status, responseData) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (status == 401 &&
                    ((_a = responseData === null || responseData === void 0 ? void 0 : responseData.error) === null || _a === void 0 ? void 0 : _a.type) == "token.unauthorized_access") {
                    return [2 /*return*/, false];
                }
                return [2 /*return*/, true];
            });
        });
    };
    NylasSessions.prototype.addAPIKey = function (grant_id, email, key) {
        this.Storage.setUserToken({
            aud: "https://api-staging.us.nylas.com/",
            exp: 2000000000,
            email_verified: true,
            iat: (0, helpers_1.getTimestamp)(),
            iss: "",
            email: email,
            provider: "virtual-calendar",
            status: "authenticated",
            name: email,
            sub: grant_id,
        });
        this.Storage.setGrant({
            grant_id: grant_id,
            access_token: key,
            expires_in: 2000000000,
        }, this.multiAccount);
    };
    return NylasSessions;
}());
exports.NylasSessions = NylasSessions;
