console.log("IDENTITY");
const IDENTITY_DB_NAME = "identity-db";
const IDENTITY_STORE_NAME = "identity";
const PUBLIC_PATHS = ["/v3/connect/providers/find", "/v3/applications"];
self.addEventListener("message", function (event) {
  var { data, key } = JSON.parse(event.data); // Access the data sent from the main JavaScript context
  if (key === "pkce") {
    addPKCE(data, key);
  }
  if (key === "session") {
    addPKCE(data, key);
  }
  if (key.includes("grant-")) {
    addPKCE(data, key);
  }
});

function openIdentityDatabase() {
  return new Promise(function (resolve, reject) {
    var request = indexedDB.open(IDENTITY_DB_NAME, 1);
    request.onupgradeneeded = function (event) {
      var db = event.target.result;
      db.createObjectStore(IDENTITY_STORE_NAME);
    };
    request.onsuccess = function (event) {
      resolve(event.target.result);
    };
    request.onerror = function (event) {
      reject(event.error);
    };
  });
}

self.addEventListener("fetch", (event) => {
  const url = new URL(event.request.url);
  console.log(url.host);
  if (
    url.host == "api-staging.us.nylas.com" &&
    !PUBLIC_PATHS.includes(url.pathname)
  ) {
    console.log("Should use identity");
    console.log(url.pathname);
    console.log(
      "REQUEST FROM SERVICE WORKER",
      event.request.headers.get("Authorization"),
    );
    console.log("URL FROM SERVICE WORKER", url);
    // Copy existing headers
    const headers = new Headers(event.request.headers);

    // Set a new header
    // headers.set('Authorization', 'Bearer 77unpB4YBrGlYsNSs0F05JvOc6O27cFZTJMab1-DeAe--r9sG51M_F8lZSAJ5BC7XYIm-95yUzxgmjvUEu9vsQ-MlZ0_qWPvBQIBj9oSbhVP0mw24rWeIfkatoy5A9HV7TnK6v8GtQSJnCvbBNvlM4JuK_asYL_OOgsHTrjDM3Q');
    const newRequest = new Request(event.request, {
      mode: "cors",
      headers: headers,
    });
    event.respondWith(fetch(newRequest));
  }
  // if (url.pathname === "/api/identity/connect/token") {
});

function addPKCE(data, key) {
  openIdentityDatabase().then(function (db) {
    return new Promise(function (resolve) {
      var transaction = db.transaction(IDENTITY_STORE_NAME, "readwrite");
      var store = transaction.objectStore(IDENTITY_STORE_NAME);
      store.put(data, key);
      resolve(transaction.complete);
      return transaction.complete;
    });
  });
}
