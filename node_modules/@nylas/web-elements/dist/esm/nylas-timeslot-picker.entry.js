import { r as registerInstance, i as createEvent, h, a as Host } from './index-8362ce5c.js';
import { R as RegisterComponent } from './register-component-0462b27d.js';
import { a as debug, n as isSameDay } from './utils-157014b4.js';
import './_commonjsHelpers-7c16df4a.js';

const nylasTimeslotPickerCss = ":host{display:block;height:calc(100% - 48px)}.time-picker-wrapper{display:flex;flex-direction:column;height:100%}.time-slots{position:relative;display:flex;flex-direction:column;gap:0.75rem;align-items:center;overflow-y:scroll;padding:0.5rem 1.5rem;flex:1}.time{box-sizing:border-box;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:4px 12px;gap:0.5rem;font-size:16px;font-weight:500;font-family:inherit;width:100%;height:48px;color:var(--nylas-base-800);background:var(--nylas-base-0);border:none;outline:1.5px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);flex:none;order:4;align-self:stretch;flex-grow:0;cursor:pointer}.time:hover,.time:focus{color:var(--nylas-primary);outline-color:var(--nylas-primary)}.time.selected{font-weight:600;color:var(--nylas-primary);outline:2px solid var(--nylas-primary);border-color:transparent;box-shadow:0 0 0 2px var(--nylas-primary)}.empty{text-align:center;padding:0 1.5rem;color:var(--nylas-base-600);font-size:min(max(12px, 2vw), 14px);height:450px;display:flex;align-items:center;justify-content:center}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.loading{padding:0 1.5rem}.loading .time-slot-skeleton{width:100%;height:4rem;background-color:var(--nylas-base-50);margin-bottom:0.5rem;border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite ease-in-out}.footer{width:100%;padding:10px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}.footer sp-button{padding:14px;color:var(--nylas-base-100);border-radius:var(--nylas-border-radius-2x);width:100%;height:48px;font-weight:600;font-size:16px;background-color:var(--nylas-primary);border:none}.footer sp-button:hover,.footer sp-button:focus{background-color:var(--nylas-base-600)}.footer sp-button:active{background-color:var(--nylas-base-800)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasTimeslotPicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.timeslotSelected = createEvent(this, "timeslotSelected", 7);
        this.timeslotConfirmed = createEvent(this, "timeslotConfirmed", 7);
        this.handleConfirmedTimeslot = async (event, timeslot) => {
            event.preventDefault();
            debug(`[nylas-timeslot-picker] Confirm timeslot`, timeslot);
            this.timeslotConfirmed.emit(timeslot);
        };
        this.handleMouseEnter = (index) => {
            this.hoveredTimeslotIndex = index;
        };
        this.handleMouseLeave = () => {
            this.hoveredTimeslotIndex = -1;
        };
        this.selectedDate = new Date();
        this.availability = undefined;
        this.selectedTimeslot = undefined;
        this.isLoading = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.times = [];
        this.hoveredTimeslotIndex = undefined;
        this.selectedTimeslotIndex = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        const availableTimes = this.availability?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
        this.times = availableTimes || [];
        debug(`[nylas-timeslot-picker] Component will load`, { selectedDate: this.selectedDate, availability: this.availability, times: this.times });
    }
    async componentDidLoad() {
        debug(`[nylas-timeslot-picker] Component did load`);
    }
    getTimeslotId(date, index) {
        return `${date.toLocaleDateString()}-${index}`;
    }
    onClickSelectTime(timeslot, index) {
        debug(`[nylas-timeslot-picker] Time selected`, timeslot, index);
        this.selectedTimeslotIndex = this.getTimeslotId(timeslot.start_time, index);
        this.timeslotSelected.emit({
            start_time: timeslot.start_time,
            end_time: timeslot.end_time,
        });
    }
    getTimeSlotLabel(timeslot) {
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            timeZone: this.selectedTimezone,
        });
        return `${timeFormat.format(timeslot.start_time)} - ${timeFormat.format(timeslot.end_time)}`;
    }
    selectedDateChanged(newVal) {
        debug(`[nylas-timeslot-picker] Selected date changed`, { newVal });
        if (newVal) {
            this.selectedTimeslotIndex = '';
            if (typeof newVal !== 'undefined') {
                const availableTimes = this.availability?.filter(timeslot => isSameDay(timeslot.start_time, newVal)).map(timeslot => timeslot);
                this.times = availableTimes || [];
            }
        }
    }
    availabilityChanged(newVal) {
        debug(`[nylas-timeslot-picker] Available times changed`, { newVal, selectedDate: this.selectedDate });
        if (typeof newVal !== 'undefined') {
            const availableTimes = newVal?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
            this.times = availableTimes || [];
        }
    }
    render() {
        if (this.isLoading) {
            return (h(Host, null, h("div", { class: 'loading' }, new Array(6).fill(0).map((_, i) => (h("div", { class: 'time-slot-skeleton', style: { animationDelay: `${i * 20}ms` } }))))));
        }
        if (this.availability && this.availability.length === 0) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No dates available"))));
        }
        if ((!this.times || this.times.length === 0) && !!this.selectedDate) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No time slots available for selected date"))));
        }
        if (!this.selectedDate)
            return h(Host, null);
        return (h(Host, { part: "ntp" }, h("div", { class: 'time-picker-wrapper' }, h("div", { class: 'time-slots' }, this.times.map((timeslot, index) => (h("button", { part: `ntp__timeslot ${this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime() ? 'ntp__timeslot--selected' : ''}`, "aria-role": "button", class: {
                time: true,
                selected: typeof this.selectedTimeslot !== 'undefined' && this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime(),
            }, onClick: () => this.onClickSelectTime(timeslot, index), onMouseEnter: () => this.handleMouseEnter(index), onMouseLeave: () => this.handleMouseLeave() }, this.hoveredTimeslotIndex == index || this.selectedTimeslotIndex == this.getTimeslotId(timeslot.start_time, index)
            ? this.getTimeSlotLabel(timeslot)
            : timeslot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZone: this.selectedTimezone }))))), this.selectedTimeslot && (h("div", { class: 'footer' }, h("sp-button", { variant: "primary", onClick: (event) => this.handleConfirmedTimeslot(event, this.selectedTimeslot), part: "ntp__button-primary" }, h("slot", { name: "timeslot-picker-cta-label" }, "Next")))))));
    }
    static get watchers() { return {
        "selectedDate": ["selectedDateChanged"],
        "availability": ["availabilityChanged"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-timeslot-picker',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.availability', 'availability'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.isLoading', 'isLoading'],
        ]),
        eventToProps: {
            timeslotSelected: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectTime(event.detail);
            },
            timeslotConfirmed: async (event, nylasSchedulerConnector) => {
                if (event.detail) {
                    nylasSchedulerConnector.scheduler.toggleAdditionalData(true);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotPicker.prototype, "render", null);
NylasTimeslotPicker.style = nylasTimeslotPickerCss;

export { NylasTimeslotPicker as nylas_timeslot_picker };

//# sourceMappingURL=nylas-timeslot-picker.entry.js.map