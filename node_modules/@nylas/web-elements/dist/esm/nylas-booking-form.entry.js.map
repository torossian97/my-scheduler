{"file":"nylas-booking-form.entry.js","mappings":"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","names":[],"sources":["src/components/scheduler/nylas-booking-form/nylas-booking-form.scss?tag=nylas-booking-form&encapsulation=shadow","src/components/scheduler/nylas-booking-form/nylas-booking-form.tsx"],"sourcesContent":["@import '../../../common/mixins/inputs.scss';\n@import '../../../common/styles/variables.scss';\n\n:host {\n  display: block;\n  height: 100%;\n  @include default-css-variables;\n}\n\n.nylas-booking-form {\n  width: 100%;\n  padding: 1.5rem;\n  box-sizing: border-box;\n  height: 450px;\n  overflow-y: auto;\n  height: 100%;\n}\n\nform {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n}\n\nsp-textfield {\n  --spectrum-corner-radius-100: var(--nylas-border-radius-2x); // Set guest input radius\n  --spectrum-textfield-border-color: var(--nylas-base-300);\n  position: relative;\n  width: 100%;\n  height: 48px;\n  margin-bottom: 16px;\n  color: var(--nylas-base-500);\n}\n\n.cta {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  @media #{$mobile} {\n    flex-direction: column-reverse;\n  }\n  align-items: flex-start;\n  justify-content: space-between;\n  gap: 0.5rem;\n  padding: 10px;\n  box-sizing: border-box;\n  border-top: 1px solid var(--nylas-base-200);\n}\n\nsp-button {\n  background-color: transparent;\n  color: var(--nylas-base-800);\n  border-radius: var(--nylas-border-radius-2x);\n  --button-width: 50%;\n  font-family: var(--nylas-font-family);\n  font-size: 16px;\n  font-weight: 600;\n  border: none;\n  height: 48px;\n  padding: 14px;\n  @media #{$mobile} {\n    --button-width: 100%;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: var(--nylas-base-100);\n    color: var(--nylas-primary);\n    border-radius: var(--nylas-border-radius-2x);\n  }\n  &:active {\n    background-color: var(--nylas-base-200);\n    color: var(--nylas-base-800);\n  }\n\n  &.back {\n    width: var(--button-width);\n    background-color: transparent;\n    color: var(--nylas-base-700);\n    outline: 1px solid var(--nylas-base-300);\n    &:hover,\n    &:focus {\n      outline-color: var(--nylas-primary);\n    }\n    &:active {\n      outline: 2px solid var(--nylas-base-600);\n    }\n  }\n\n  &.book {\n    width: var(--button-width);\n    background-color: var(--nylas-primary);\n    color: var(--nylas-base-0);\n    &:hover,\n    &:focus {\n      background-color: var(--nylas-base-600);\n    }\n    &:active {\n      background-color: var(--nylas-base-800);\n    }\n  }\n}\n\n.input-wrapper {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 4px;\n  margin-bottom: 1rem;\n  input::placeholder {\n    color: var(--nylas-base-300);\n  }\n  label,\n  input {\n    font-family: var(--nylas-font-family);\n  }\n  .help-text {\n    margin: 0;\n    color: var(--nylas-error);\n  }\n}\n\n.button-wrapper {\n  width: 100%;\n  align-items: flex-start;\n  height: max-content;\n  position: relative;\n}\n\nsp-infield-button {\n  --spectrum-infield-button-background-color: transparent;\n  --spectrum-infield-button-background-color-hover: transparent;\n  --spectrum-infield-button-background-color-active: transparent;\n  --spectrum-infield-button-border-color: transparent;\n  --spectrum-infield-button-border-width: 1px;\n  --spectrum-infield-button-border-radius: 0;\n  color: var(--nylas-base-600);\n  background: transparent;\n  border: none;\n  outline: 1px solid var(--nylas-base-300);\n  border-radius: 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x) 0;\n  height: 52px;\n  width: 52px;\n  display: flex;\n  position: absolute;\n  right: 0;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  sp-icon-cross300 {\n    color: var(--nylas-base-600);\n  }\n  &.error {\n    border-width: 2px;\n    border-color: var(--nylas-error);\n  }\n}\n\ninput[type='text'],\ninput[type='email'] {\n  @include textfield;\n  &.guest-email {\n    color: var(--nylas-base-900);\n    padding-right: 52px; // Infield button width\n  }\n}\n\nlabel {\n  @include input-label;\n}\n","import { Component, Element, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConnector } from '../../..';\nimport type { NylasEvent, NylasSchedulerBookingData } from '../../..';\nimport { NylasScheduling } from '../nylas-scheduler/nylas-scheduling';\nimport { debug } from '@/utils/utils';\nimport { Notification, NylasSchedulerBookingParticipant } from '@nylas/core';\n\nconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n/**\n * The `nylas-booking-form` component is a UI component that allows users to book an event.\n *\n * The booking form component.\n * @part nbf - The booking form host.\n * @part nbf__input-label - The input label.\n * @part nbf__input-textfield - The input textfield.\n * @part nbf__button-ghost - The ghost button for adding guests.\n * @part nbf__button-primary - The primary button for booking.\n * @part nbf__button-outline - The outline button for canceling.\n * @slot custom-booking-form - The custom booking form.\n */\n@Component({\n  tag: 'nylas-booking-form',\n  styleUrl: 'nylas-booking-form.scss',\n  shadow: true,\n})\nexport class NylasBookingForm {\n  /**\n   * The host element\n   */\n  @Element() readonly host!: HTMLElement;\n\n  /**\n   * The loading state.\n   */\n  @Prop() readonly isLoading?: boolean;\n\n  /**\n   * The booking info.\n   */\n  @Prop() readonly bookingInfo?: NylasSchedulerBookingData;\n\n  /**\n   * The booked event (Used to track if a booking is created in an eventOverride).\n   */\n  @Prop() readonly eventInfo?: NylasEvent;\n\n  /**\n   * This event is fired when the name is changed.\n   */\n  @Event() nameChanged!: EventEmitter<string>;\n\n  /**\n   * This event is fired when the email is changed.\n   */\n  @Event() emailChanged!: EventEmitter<string>;\n\n  /**\n   * This event is fired when the cancel button is clicked.\n   */\n  @Event() backButtonClicked!: EventEmitter<boolean>;\n\n  /**\n   * This event is fired when the book button is clicked.\n   */\n  @Event() detailsConfirmed!: EventEmitter<NylasSchedulerBookingData>;\n\n  /**\n   * This event is fired when an error occurs in the booking form.\n   */\n  @Event() bookingFormError!: EventEmitter<Partial<Notification>>;\n\n  /**\n   * The name of the user.\n   */\n  @State() name: string = '';\n\n  /**\n   * The email address of the user.\n   */\n  @State() email: string = '';\n\n  /**\n   * The guests of the user.\n   */\n  @State() guestEmails: string[] = [];\n\n  /**\n   * Guest email input errors.\n   */\n  @State() guestEmailErrors: { [key: number]: string } = {};\n\n  /**\n   * State to check if name is valid.\n   */\n  @State() isNameValid: boolean = true;\n\n  /**\n   * State to check if email is valid.\n   */\n  @State() isEmailValid: boolean = true;\n\n  /**\n   * Error message state.\n   */\n  @State() validationError: { name: string; email: string } = { name: '', email: '' };\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  componentWillLoad() {\n    debug('nylas-booking-form', 'componentWillLoad', this.bookingInfo);\n    if (this.bookingInfo) {\n      this.name = this.bookingInfo.primaryParticipant?.name;\n      this.email = this.bookingInfo.primaryParticipant?.email;\n    }\n  }\n\n  @Watch('bookingInfo')\n  bookingInfoChangedHandler(newValue: NylasSchedulerBookingData | undefined) {\n    if (newValue && newValue.primaryParticipant) {\n      this.name = newValue.primaryParticipant.name;\n      this.email = newValue.primaryParticipant.email;\n    }\n  }\n\n  /**\n   * Change the name.\n   * @param name The name to select.\n   */\n  changeName(name: string) {\n    // Reset the validation error\n    this.isNameValid = true;\n    this.validationError.name = '';\n\n    this.name = name;\n    this.nameChanged.emit(name);\n  }\n\n  /**\n   * Change the email.\n   * @param email The email to select.\n   */\n  changeEmail(email: string) {\n    // Reset the validation error\n    this.isEmailValid = true;\n    this.validationError.email = '';\n\n    this.email = email;\n    this.emailChanged.emit(email);\n  }\n\n  resetGuestEmailError(guestIndex: number) {\n    const errors = { ...this.guestEmailErrors };\n    delete errors[guestIndex];\n    this.guestEmailErrors = { ...errors };\n  }\n\n  /**\n   * Handle guest emails changed.\n   */\n  handleGuestChange = (guestIndex: number, email: string) => {\n    // Reset the validation error\n    this.resetGuestEmailError(guestIndex);\n    const guests = [...this.guestEmails];\n    guests[guestIndex] = email;\n    this.guestEmails = [...guests];\n  };\n\n  /**\n   * Handle guest input blur.\n   */\n  handleGuestBlur = (guestIndex: number, email: string) => {\n    this.resetGuestEmailError(guestIndex);\n\n    if (email === '') {\n      this.guestEmailErrors[guestIndex] = 'Email is required';\n      return;\n    }\n    if (!emailRegex.test(email)) {\n      this.guestEmailErrors[guestIndex] = 'Enter a valid email address';\n      return;\n    }\n    this.handleGuestChange(guestIndex, email);\n  };\n\n  /**\n   * Handle add guest button clicked.\n   */\n  addGuestButtonClickedHandler = () => {\n    this.guestEmails = [...this.guestEmails, ''];\n  };\n\n  /**\n   * Handle remove guest button clicked.\n   */\n  removeGuestButtonClickHandler = (e: Event, guestIndex: number) => {\n    e.preventDefault();\n    this.resetGuestEmailError(guestIndex);\n\n    const guests = [...this.guestEmails];\n    guests.splice(guestIndex, 1);\n    this.guestEmails = [...guests];\n  };\n\n  /**\n   * Handle back button clicked.\n   */\n  handleBackButtonClicked = () => {\n    this.backButtonClicked.emit();\n  };\n\n  /**\n   *\n   * Handle book button clicked.\n   */\n  bookButtonClickedHandler = async (e: Event) => {\n    e.preventDefault();\n    debug('nylas-booking-form', 'bookButtonClickedHandler', this.bookingInfo);\n    const name = this.name || this.bookingInfo?.primaryParticipant?.name;\n    const email = this.email || this.bookingInfo?.primaryParticipant?.email;\n\n    if (!name || name === '') {\n      this.isNameValid = false;\n      this.validationError.name = 'Name is required';\n      this.bookingFormError.emit({\n        title: 'Booking form error',\n        description: 'Name is required',\n      });\n      return;\n    }\n    if (!email || email === '') {\n      this.isEmailValid = false;\n      this.validationError.email = 'Email is required';\n      this.bookingFormError.emit({\n        title: 'Booking form error',\n        description: 'Email is required',\n      });\n      return;\n    }\n    if (!emailRegex.test(email)) {\n      this.isEmailValid = false;\n      this.validationError.email = 'Enter a valid email address';\n      this.bookingFormError.emit({\n        title: 'Booking form error',\n        description: 'Invalid email',\n      });\n      return;\n    }\n\n    let guests: NylasSchedulerBookingParticipant[] = [];\n    if (this.guestEmails.length > 0) {\n      let hasError = false;\n      this.guestEmails.forEach((email: string, i: number) => {\n        if (email === '') {\n          hasError = true;\n          this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Email is required' };\n        } else if (!emailRegex.test(email)) {\n          hasError = true;\n          this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Enter a valid email address' };\n        }\n      });\n      if (hasError) {\n        this.bookingFormError.emit({\n          title: 'Booking form error',\n          description: 'Invalid guest email',\n        });\n        return;\n      }\n      guests = this.guestEmails.map((email: string) => ({ name: '', email: email.trim() }));\n    } else if (this.bookingInfo?.guests) {\n      guests = this.bookingInfo?.guests;\n    }\n\n    this.detailsConfirmed.emit({\n      primaryParticipant: {\n        name: name,\n        email: email,\n      },\n      guests: guests,\n      additionalFields: {\n        ...this.bookingInfo?.additionalFields,\n      },\n    });\n  };\n\n  @RegisterComponent<NylasBookingForm, NylasSchedulerConnector, Exclude<NylasScheduling['stores'], undefined>>({\n    name: 'nylas-booking-form',\n    stateToProps: new Map([\n      ['scheduler.isLoading', 'isLoading'],\n      ['scheduler.bookingInfo', 'bookingInfo'],\n      ['scheduler.eventInfo', 'eventInfo'],\n    ]),\n    eventToProps: {\n      backButtonClicked: async (_event: CustomEvent<boolean>, nylasSchedulerConnector: NylasSchedulerConnector) => {\n        nylasSchedulerConnector.scheduler.toggleAdditionalData(false);\n      },\n      nameChanged: async (event: CustomEvent<string>, nylasSchedulerConnector: NylasSchedulerConnector) => {\n        nylasSchedulerConnector.scheduler.setParticipantName(event.detail);\n      },\n      emailChanged: async (event: CustomEvent<string>, nylasSchedulerConnector: NylasSchedulerConnector) => {\n        nylasSchedulerConnector.scheduler.setParticipantEmail(event.detail);\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <form onSubmit={e => this.bookButtonClickedHandler(e)} noValidate>\n          <div class=\"nylas-booking-form\">\n            <slot name=\"custom-booking-form\">\n              <div class=\"input-wrapper\">\n                <label htmlFor=\"name\" class={{ 'input-label': true, 'error': !this.isNameValid }} part=\"nbf__input-label\">\n                  Name <span class=\"required\">*</span>\n                </label>\n                <input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  value={this.name}\n                  class={{\n                    input: true,\n                    error: !this.isNameValid,\n                  }}\n                  part=\"nbf__input-textfield\"\n                  onInput={(e: Event) => this.changeName((e.target as HTMLInputElement)?.value)}\n                ></input>\n                <p class=\"help-text\">{this.validationError.name}</p>\n              </div>\n              <div class=\"input-wrapper\">\n                <label htmlFor=\"email\" class={{ 'input-label': true, 'error': !this.isEmailValid }} part=\"nbf__input-label\">\n                  Email <span class=\"required\">*</span>\n                </label>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={this.email}\n                  class={{\n                    input: true,\n                    error: !this.isEmailValid,\n                  }}\n                  part=\"nbf__input-textfield\"\n                  onInput={(e: Event) => this.changeEmail((e.target as HTMLInputElement)?.value)}\n                ></input>\n                <p class=\"help-text\">{this.validationError.email}</p>\n              </div>\n              {/* <div class=\"input-wrapper\">\n                  <sp-button class=\"add-guest\" variant=\"primary\" part=\"nbf__button-ghost\" onClick={this.addGuestButtonClickedHandler}>\n                    <add-circle-icon slot=\"icon\"></add-circle-icon>\n                    Add guest\n                  </sp-button>\n                  {this.guestEmails.map((email, index) => (\n                    <div class=\"input-wrapper button-wrapper\">\n                      <input\n                        type=\"email\"\n                        id={`guest-email-${index}`}\n                        class={{\n                          'guest-email': true,\n                          'error': !!this.guestEmailErrors[index],\n                        }}\n                        placeholder=\"Enter guest email\"\n                        value={email}\n                        data-index={index}\n                        part=\"nbf__input-textfield\"\n                        onBlur={(e: Event) => this.handleGuestBlur(index, (e.target as HTMLInputElement)?.value)}\n                        onInput={(e: Event) => this.handleGuestChange(index, (e.target as HTMLInputElement)?.value)}\n                      ></input>\n                      <sp-infield-button\n                        size=\"s\"\n                        class={{\n                          'remove-guest': true,\n                          'error': !!this.guestEmailErrors[index],\n                        }}\n                        treatment=\"outline\"\n                        inline=\"end\"\n                        onClick={(e: Event) => this.removeGuestButtonClickHandler(e, index)}\n                      >\n                        <sp-icon-cross300 size=\"s\"></sp-icon-cross300>\n                      </sp-infield-button>\n                      <p class=\"help-text\">{this.guestEmailErrors[index]}</p>\n                    </div>\n                  ))}\n                </div> */}\n            </slot>\n          </div>\n          <div class=\"cta\">\n            <sp-button treatment=\"outline\" variant=\"secondary\" class={'back'} part=\"nbf__button-outline\" onClick={this.handleBackButtonClicked}>\n              <slot name=\"booking-form-back-label\">Back</slot>\n            </sp-button>\n            <sp-button variant=\"primary\" class={'book'} part=\"nbf__button-primary\" type=\"submit\">\n              {this.isLoading && <loading-icon slot=\"icon\"></loading-icon>}\n              <slot name=\"booking-form-book-label\">Book now</slot>\n            </sp-button>\n          </div>\n        </form>\n      </Host>\n    );\n  }\n}\n"],"version":3}