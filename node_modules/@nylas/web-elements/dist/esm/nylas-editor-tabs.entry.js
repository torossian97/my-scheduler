import { h, r as registerInstance, i as createEvent, a as Host, e as getElement } from './index-8362ce5c.js';
import { R as RegisterComponent } from './register-component-0462b27d.js';
import { p as mergeDeep, a as debug, q as parsePreviewLink } from './utils-157014b4.js';
import { D as DEFAULT_OPEN_HOURS } from './constants-bf39e913.js';
import './_commonjsHelpers-7c16df4a.js';

function TabContents({ id, formState, activeTab, calendars }) {
    switch (activeTab) {
        case 'eventInfo':
            const eventTitle = formState.title;
            const eventDescription = formState.description;
            const eventDuration = parseInt(formState.duration);
            const location = formState.location;
            return (h("div", { key: id },
                h("nylas-event-info", null,
                    h("div", { slot: "inputs" },
                        h("nylas-event-title", { name: "title", eventTitle: eventTitle, exportparts: "net, net__title, net__dropdown-content" }),
                        h("nylas-event-duration", { name: "duration", eventDurationMinutes: eventDuration, exportparts: "ned, ned__input, ned__dropdown, ned__dropdown-button, ned__dropdown-content" }),
                        h("nylas-location-component", { name: "location", eventLocation: location, exportparts: "nel, nel__location, nel__dropdown, nel__dropdown-button, nel__dropdown-content" }),
                        h("nylas-event-description", { name: "description", eventDescription: eventDescription, exportparts: "nedesc, nedesc__textarea" })))));
        case 'availability':
            const openHours = formState.availability.openHours;
            const timezone = formState.availability.timezone ? formState.availability.timezone : Intl.DateTimeFormat().resolvedOptions().timeZone;
            const organizer = formState.participants?.find(p => p.is_organizer);
            const organizerEmail = organizer?.email ?? 'primary';
            const selectedCalendars = formState.calendarIds.length > 0 ? formState.calendarIds : [organizerEmail];
            const bookingCalendar = formState.bookingCalendar == 'primary' ? organizerEmail : formState.bookingCalendar;
            return (h("div", { key: id },
                h("nylas-booking-calendar-picker", { name: "booking-calendar", calendars: calendars ?? [], defaultBookingCalendar: bookingCalendar, exportparts: 'nbcp, nbcp__header, nbcp__input-label, nbcp__dropdown, nbcp__dropdown-button, nbcp__dropdown-content' }),
                h("nylas-calendar-picker", { name: "calendars", calendars: calendars ?? [], defaultSelectedCalendars: selectedCalendars, exportparts: 'ncp ncp__header, ncp__dropdown, ncp__dropdown-button, ncp__dropdown-content' }),
                h("nylas-availability-picker", { name: "availability", openHours: openHours, defaultTimezone: timezone, exportparts: 'nap__header, nap__select-timezone, nap__select-timezone-button, nap__select-timezone-dropdown-content, nap__availability, nap__day, nap__time-ranges, nap__time-range, nap__add-time-range, nap__time-picker-container, nap__time-picker-input, nap__time-picker-times' })));
        case 'bookingOptions':
            return (h("div", { key: id },
                h("nylas-buffer-time", { name: "buffer-time", buffer: formState.buffer, exportparts: 'nbt, nbt__header, nbt__body, nbt__dropdown-before, nbt__dropdown-button-before, nbt__dropdown-content-before, nbt__dropdown-after, nbt__dropdown-button-after, nbt__dropdown-content-after, nbt__preview' }),
                h("nylas-event-limits", null,
                    h("div", { slot: "inputs" },
                        h("nylas-limit-future-bookings", { name: "limit-future-bookings", availableDaysInFuture: formState.availableDaysInFuture, exportparts: "nlfb, nlfb__number-dropdown, nlfb__number-dropdown-button, nlfb__number-dropdown-content, nlfb__period-dropdown, nlfb__period-dropdown-button, nlfb__period-dropdown-content" }),
                        h("nylas-min-cancellation-notice", { name: "min-cancellation-notice", minCancellationNotice: formState.minCancellationNotice, exportparts: "nmcn, nmcn__number-dropdown, nmcn__number-dropdown-button, nmcn__number-dropdown-content, nmcn__period-dropdown, nmcn__period-dropdown-button, nmcn__period-dropdown-content" })))));
    }
}

const nylasEditorTabsCss = ".sc-nylas-editor-tabs-h{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.scheduler-editor.sc-nylas-editor-tabs{display:flex;flex-direction:column}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{height:554px;display:grid;grid-template-columns:minmax(224px, 25%) 1fr}@media screen and (max-width: 768px){.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{display:table-column-group;height:auto}}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs{display:flex;flex-direction:column;border-right:1px solid var(--nylas-base-200);background-color:var(--nylas-base-25)}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs{display:flex;align-items:center;gap:0.5rem;padding:0.5rem 1rem;color:var(--nylas-base-900);background:var(--nylas-base-0);border:none;height:56px;font-family:var(--nylas-font-family);font-size:16px;font-weight:500;line-height:24px;cursor:pointer}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs:not(:first-of-type){margin-top:0.25rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.active.sc-nylas-editor-tabs{font-weight:600;background:var(--nylas-base-0);color:var(--nylas-primary);border-left:4px solid var(--nylas-primary);box-shadow:0px 1px 2px 0px rgba(0, 0, 0, 0.0588235294);box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1019607843)}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs{max-width:692px;overflow-y:auto}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs{width:inherit}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs{display:flex;flex-direction:column;gap:1rem}.footer.sc-nylas-editor-tabs{display:flex;justify-content:space-between;align-items:center;gap:1rem;min-height:80px;padding:0 1rem;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs{flex-direction:column;height:auto}}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .preview.sc-nylas-editor-tabs{margin-top:1rem;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{display:flex;justify-content:flex-end;align-items:center;justify-self:flex-end;gap:1rem}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{flex-direction:column-reverse;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.sc-nylas-editor-tabs{max-width:524px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.unsaved-changes.sc-nylas-editor-tabs{color:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.saved-changes.sc-nylas-editor-tabs{color:var(--nylas-success)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error.sc-nylas-editor-tabs{color:var(--nylas-error)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error-full-width.sc-nylas-editor-tabs{max-width:660px}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button-component.sc-nylas-editor-tabs{width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs{background:var(--nylas-primary);color:var(--nylas-base-0);height:48px;border:none;border-radius:var(--nylas-border-radius-2x);font-size:1rem;line-height:24px;padding:0 1rem;cursor:pointer;width:148px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:hover{background:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:active{background:var(--nylas-base-800)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:disabled{background:var(--nylas-base-300);cursor:not-allowed}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs span.sc-nylas-editor-tabs{display:flex;align-items:center;justify-content:center;gap:0.5rem}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEditorTabs = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.schedulerConfigChanged = createEvent(this, "schedulerConfigChanged", 7);
        this.cancelButtonClick = createEvent(this, "cancelButtonClick", 7);
        this.formSubmitted = createEvent(this, "formSubmitted", 7);
        this.previewButtonClicked = createEvent(this, "previewButtonClicked", 7);
        this.setError = (error) => {
            this.error = error.message;
        };
        this.formSubmissionHandler = async (event) => {
            event.preventDefault();
            this.formSubmitted.emit();
            const valid = this.formRef.checkValidity();
            if (!valid) {
                return;
            }
            this.isLoading = true;
            this.hasUnsavedChanges = false;
            const formState = this.updateFormState();
            const { title, description, duration, availability, calendarIds, bookingCalendar, location, bookingType, buffer, availableDaysInFuture, minCancellationNotice } = formState;
            const organizer = this.selectedConfiguration?.participants?.find(p => p.is_organizer);
            const configObject = {
                ...(this.selectedConfiguration?.id && { id: this.selectedConfiguration.id }),
                version: this.selectedConfiguration?.version ?? '1.0.0',
                availability: {
                    duration_minutes: duration ? parseInt(duration) : 0,
                    interval_minutes: duration ? parseInt(duration) : 0,
                    availability_rules: {
                        availability_method: this.selectedConfiguration?.availability?.availability_rules?.availability_method ?? 'collective',
                        buffer: buffer || { before: 0, after: 0 },
                        default_open_hours: this.selectedConfiguration?.availability?.availability_rules?.default_open_hours ?? DEFAULT_OPEN_HOURS,
                        round_robin_group_id: this.selectedConfiguration?.availability?.availability_rules?.round_robin_group_id ?? '',
                    },
                },
                participants: [
                    {
                        name: organizer?.name ?? organizer?.email ?? this.currentUser?.name ?? this.currentUser?.email ?? '',
                        email: organizer?.email ?? this.currentUser?.email ?? '',
                        is_organizer: true,
                        availability: {
                            calendar_ids: calendarIds?.length ? calendarIds : ['primary'],
                            open_hours: availability?.openHours ?? [],
                        },
                        booking: {
                            calendar_id: bookingCalendar && bookingCalendar !== '' ? bookingCalendar : 'primary',
                        },
                    },
                ],
                event_booking: {
                    title: title?.toString() ?? '',
                    description: description?.toString() ?? '',
                    location: location?.toString() ?? '',
                    booking_type: bookingType?.toString() ?? 'booking',
                    timezone: availability?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                },
                scheduler: {
                    available_days_in_future: availableDaysInFuture ?? 30,
                    min_cancellation_notice: minCancellationNotice ?? 0,
                },
            };
            const configObjectWithDeveloperSettings = mergeDeep(configObject, this.selectedConfiguration);
            configObjectWithDeveloperSettings.requires_session_auth = this.defaultRequiresSessionAuth;
            const finalConfig = this.action === 'create' ? configObjectWithDeveloperSettings : configObject;
            const resetLoadingState = (_e) => {
                this.isLoading = false;
                this.changesSaved = true;
                setTimeout(() => {
                    this.changesSaved = false;
                }, 5000);
            };
            this.schedulerConfigChanged.emit({ config: finalConfig, resetLoadingState, setError: this.setError, action: this.action });
        };
        this.calendars = undefined;
        this.selectedConfiguration = undefined;
        this.defaultRequiresSessionAuth = true;
        this.currentUser = undefined;
        this.schedulerPreviewLink = '';
        this.mode = 'app';
        this.action = 'create';
        this.activeTab = 'eventInfo';
        this.isLoading = false;
        this.hasUnsavedChanges = false;
        this.changesSaved = false;
        this.formState = {};
        this.error = '';
    }
    configChangedHandler(newConfig) {
        debug('[nylas-editor-tabs]', 'configChangedHandler', newConfig, this.selectedConfiguration);
        this.formState = {
            ...this.getFormStateFromConfig(newConfig),
        };
        if (newConfig.id) {
            this.action = 'edit';
        }
        else {
            this.action = 'create';
        }
    }
    connectedCallback() {
        debug('[nylas-editor-tabs]', 'connectedCallback');
    }
    componentWillLoad() {
        debug('[nylas-editor-tabs]', 'componentWillLoad');
        this.formState = this.getFormStateFromConfig(this.selectedConfiguration);
    }
    componentDidLoad() {
        debug('[nylas-editor-tabs]', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('[nylas-editor-tabs]', 'disconnectedCallback');
    }
    handleValueChanged(event) {
        debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        this.formState = { ...this.formState, [name]: value };
        this.hasUnsavedChanges = true;
        this.error = '';
    }
    getFormStateFromConfig(config) {
        const organizerParticipant = config?.participants?.find(p => p.is_organizer);
        return {
            title: config?.event_booking?.title ?? '',
            description: config?.event_booking?.description ?? '',
            duration: config?.availability?.duration_minutes?.toString() ?? '10',
            availability: {
                timezone: config?.event_booking?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                open_hours: organizerParticipant?.availability?.open_hours ?? undefined,
            },
            calendarIds: organizerParticipant?.availability?.calendar_ids ?? [],
            participants: config?.participants ?? [],
            bookingCalendar: organizerParticipant?.booking?.calendar_id ?? organizerParticipant?.email ?? '',
            location: this.selectedConfiguration?.event_booking?.location ?? '',
            bookingType: this.selectedConfiguration?.event_booking?.booking_type ?? 'booking',
            buffer: this.selectedConfiguration?.availability?.availability_rules?.buffer ?? { before: 0, after: 0 },
            availableDaysInFuture: this.selectedConfiguration?.scheduler?.available_days_in_future ?? 30,
            minCancellationNotice: this.selectedConfiguration?.scheduler?.min_cancellation_notice ?? 0,
        };
    }
    updateFormState() {
        const formData = new FormData(this.formRef);
        formData.forEach((value, key) => {
            switch (key) {
                case 'title':
                    this.formState.title = value.toString();
                    break;
                case 'description':
                    this.formState.description = value.toString();
                    break;
                case 'duration':
                    this.formState.duration = value.toString();
                    break;
                case 'availability':
                    this.formState.availability = JSON.parse(value.toString());
                    break;
                case 'participants':
                    this.formState.participants = JSON.parse(value.toString());
                    break;
                case 'calendars':
                    this.formState.calendarIds = value.toString().split(',');
                    break;
                case 'booking-calendar':
                    this.formState.bookingCalendar = value.toString();
                    break;
                case 'location':
                    this.formState.location = value.toString();
                    break;
                case 'booking-type':
                    this.formState.bookingType = value.toString();
                    break;
                case 'buffer-time':
                    this.formState.buffer = JSON.parse(value.toString());
                    break;
                case 'limit-future-bookings':
                    this.formState.availableDaysInFuture = parseInt(value.toString());
                    break;
                case 'min-cancellation-notice':
                    this.formState.minCancellationNotice = parseInt(value.toString());
                    break;
            }
        });
        this.formState = { ...this.formState };
        return this.formState;
    }
    setActiveTab(e, tabName) {
        e.preventDefault();
        this.updateFormState();
        this.activeTab = tabName;
    }
    render() {
        debug('[nylas-editor-tabs]', 'render', this.formState);
        return (h(Host, { key: 'd8076c91e22be275e321ab8e38090e5da2512234' }, h("form", { key: '8609296809c107d53d49ab570f97608815a3a29c', onSubmit: this.formSubmissionHandler, class: "scheduler-editor", ref: el => (this.formRef = el), noValidate: true }, this.mode === 'app' ? (h("div", { class: "form-contents" }, h("div", { class: "tabs" }, h("button", { class: { tab: true, active: this.activeTab == 'eventInfo' }, onClick: e => this.setActiveTab(e, 'eventInfo') }, h("calendar-info-icon", { width: "16", height: "16" }), "Event Info"), h("button", { class: { tab: true, active: this.activeTab == 'availability' }, onClick: e => this.setActiveTab(e, 'availability') }, h("calendar-patterns-icon", { width: "16", height: "16" }), "Availability"), h("button", { class: { tab: true, active: this.activeTab == 'bookingOptions' }, onClick: e => this.setActiveTab(e, 'bookingOptions') }, h("flow-icon", { width: "16", height: "16" }), "Booking Options")), h("div", { class: "tab-content" }, h(TabContents, { formState: this.formState, activeTab: this.activeTab, calendars: this.calendars, id: this.selectedConfiguration?.id ?? 'new' })))) : (h("slot", null)), h("div", { key: 'dc4bcd5a80351f3ec5c932759c1e58ee664e7351', class: "footer" }, h("div", { key: '50592e0c5e63b0fa70c6d74e843be3cdea38d9af', class: "preview" }, this.schedulerPreviewLink !== '' && this.action === 'edit' && (h("button-component", { type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                const previewEvent = this.previewButtonClicked.emit(this.host);
                if (!previewEvent.defaultPrevented) {
                    window.open(parsePreviewLink(this.schedulerPreviewLink, this.selectedConfiguration), '_blank');
                }
            }, variant: 'basic' }, "Preview"))), h("div", { key: '0869ee9cddd4a4ec51f1197eea202a38391066e9', class: "buttons" }, h("p", { key: '934b5c8cbf221385e6b8bfc1124efd71968f240e', class: {
                'unsaved-changes': this.hasUnsavedChanges && !this.changesSaved,
                'saved-changes': this.changesSaved,
                'error': this.error !== '',
                'error-full-width': this.error !== '' && this.action === 'create',
            } }, this.error !== '' ? this.error : '', this.error == '' && this.hasUnsavedChanges && !this.changesSaved ? 'Unsaved changes' : this.error == '' && this.changesSaved ? 'Changes saved!' : ''), h("button-component", { key: 'ed6a26fd73158a4de86d206440c308d88674416e', type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                this.cancelButtonClick.emit();
                this.error = '';
            }, variant: 'basic' }, "Cancel"), h("button-component", { key: '98e6d0890027a9ba67fd13746beb0615e7511519', type: "submit", disabled: this.isLoading }, this.isLoading ? (h("span", null, "Saving", h("loading-icon", null), ' ')) : this.action == 'create' ? ('Create') : ('Save changes')))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "selectedConfiguration": ["configChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-editor-tabs',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {
            schedulerConfigChanged: async (event, nylasSchedulerConfigConnector) => {
                const { resetLoadingState, setError, action, config } = event.detail;
                const checkForErrors = (response) => {
                    const [data, error] = response;
                    if (!data && error && setError) {
                        setError(error);
                    }
                    if (resetLoadingState) {
                        resetLoadingState(event);
                    }
                };
                if (action === 'edit') {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.updateConfiguration(config);
                    checkForErrors(response);
                }
                else {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.createConfiguration(config);
                    checkForErrors(response);
                }
            },
            cancelButtonClick: async (_, nylasSchedulerConfigConnector) => {
                nylasSchedulerConfigConnector.schedulerConfigStore.state.action = null;
            },
        },
        localPropsToProp: new Map([
            ['schedulerPreviewLink', 'schedulerPreviewLink'],
            ['defaultRequiresSessionAuth', 'defaultRequiresSessionAuth'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEditorTabs.prototype, "render", null);
NylasEditorTabs.style = nylasEditorTabsCss;

export { NylasEditorTabs as nylas_editor_tabs };

//# sourceMappingURL=nylas-editor-tabs.entry.js.map