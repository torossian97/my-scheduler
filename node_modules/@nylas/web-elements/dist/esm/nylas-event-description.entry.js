import { r as registerInstance, i as createEvent, h, a as Host, e as getElement } from './index-8362ce5c.js';
import { R as RegisterComponent } from './register-component-0462b27d.js';
import { a as debug } from './utils-157014b4.js';
import './_commonjsHelpers-7c16df4a.js';

const nylasEventDescriptionCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-description{display:flex;flex-direction:column;gap:4px}.nylas-event-description label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-description label span.label-icon{margin-left:4px}.nylas-event-description label span.label-icon tooltip-component{display:flex}.nylas-event-description textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-event-description textarea::-webkit-resizer{display:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDescription = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventDescription = undefined;
        this.name = 'description';
        this.description = this.eventDescription || this.selectedConfiguration?.event_booking?.description || '';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-description', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue, oldValue);
        if (newValue?.event_booking?.description) {
            this.description = newValue?.event_booking?.description;
        }
    }
    connectedCallback() {
        debug('nylas-event-description', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-description', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-event-description', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('nylas-event-description', 'disconnectedCallback');
    }
    handleChange(event) {
        this.description = event.target.value;
        this.internals.setFormValue(event.target.value, 'description');
        this.valueChanged.emit({ value: event.target.value, name: this.name });
    }
    render() {
        return (h(Host, { key: '0a1db83797453d80a3fe368c46c7c0419751ae96' }, h("div", { key: 'cb041dfd5f60a1d6969f9dd3b66bf07a30ead95d', class: "nylas-event-description", part: "nedesc" }, h("label", { key: 'f038f2c325d054408d1c4ba2ec046d811abc1b28', htmlFor: "description" }, "Event description", h("span", { key: 'b458c9fc9a283455065612b23888cf4257f7d163', class: "label-icon" }, h("tooltip-component", { key: '556fe837419cb336758136e93b91485a7900ed43' }, h("info-icon", { key: 'ac64baf6ce1f98d924a30f5fda5457f2553201a6', slot: "tooltip-icon" }), h("span", { key: 'f7c463ba89a295e3791d1c7eadc0050b925eeeb4', slot: "tooltip-content" }, "Provide any additional details for your event.")))), h("textarea", { key: '254cca296ff7e4b92626348945834a97d0d593fd', id: "description", part: "nedesc__textarea", name: "description", value: this.description, maxlength: "8192", onInput: e => this.handleChange(e) }))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-event-description',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDescription.prototype, "render", null);
NylasEventDescription.style = nylasEventDescriptionCss;

export { NylasEventDescription as nylas_event_description };

//# sourceMappingURL=nylas-event-description.entry.js.map