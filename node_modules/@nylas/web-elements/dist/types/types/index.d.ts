export interface NylasResponse<Data = any> {
    request_id: string;
    data?: Data;
    error?: {
        message: string;
        type: string;
    };
}
export interface OpenHours {
    days: number[];
    exDates: string[];
    timezone: string;
    start: string;
    end: string;
}
export interface MeetingBuffer {
    before: number;
    after: number;
}
export interface Rules {
    availability_method: 'max-fairness' | 'max-availability' | 'collective';
    buffer: MeetingBuffer;
    default_open_hours?: OpenHours[];
    round_robin_group_id: string;
}
export interface Configuration {
    id: string;
    version: string;
    participants: Participant[];
    availability: Availability;
    event_booking: EventBooking;
    scheduler: Scheduler;
}
export interface UpdateConfiguration extends Omit<Configuration, 'id'> {
}
export interface Participant {
    name: string;
    email: string;
    is_organizer?: boolean;
    availability?: ParticipantAvailability;
    booking?: ParticipantBooking;
}
export interface ParticipantAvailability {
    calendar_ids: string[];
    open_hours?: OpenHours[];
}
export interface ParticipantBooking {
    calendar_id: string;
}
export interface Availability {
    duration_minutes: number;
    interval_minutes?: number;
    round_to?: number;
    availability_rules?: Rules;
}
export interface EventBooking {
    title: string;
    description?: string;
    location?: string;
    booking_type: BookingType;
    additional_fields?: {
        [key: string]: any;
    };
    hide_participants: boolean;
}
export interface Scheduler {
    available_days_in_future: number;
    min_cancellation_notice: number;
}
export declare enum BookingType {
    InstantBooking = "booking",
    PreBooking = "pre-booking"
}
