import type { NylasSessions } from '@nylas/identity';
import { DataResponseReturnType } from './types';
export type NylasRequestArgs = {
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    path: string;
    body?: any;
    headers?: Record<string, string>;
};
export type User = {
    id: string;
    email: string;
    name?: string;
};
export type AuthArgs = {
    provider?: string;
    scope?: Array<string>;
    loginHint?: string;
    includeGrantScopes?: boolean;
    prompt?: string;
    metadata?: string;
    state?: string;
};
export declare abstract class NylasApiRequest {
    abstract request<T = any>(args: NylasRequestArgs): Promise<DataResponseReturnType<T>>;
    abstract currentUser(): Promise<User | null>;
    abstract setDefaultAuthArgs(authArgs: AuthArgs): void;
    abstract authenticationUrl(authArgs?: AuthArgs): Promise<string | undefined>;
}
export declare class NylasIdentityRequestWrapper implements NylasApiRequest {
    private session;
    private activeGrantId?;
    private defaultAuthArgs;
    constructor(session: NylasSessions);
    setActiveGrantId(grantId: string): void;
    request<T>({ method, path, body, headers }: NylasRequestArgs): Promise<DataResponseReturnType<T>>;
    currentUser(): Promise<User | null>;
    authenticationUrl(authArgs?: AuthArgs): Promise<string | undefined>;
    setDefaultAuthArgs(authArgs: AuthArgs): void;
}
