import { RegisteredComponent } from "./register-component";
import { BaseNylasConnectorInterface } from "../connector/connector-interface";
import { ObservableMap } from '@stencil/store';
import { EventOverride } from './component-types';
export type PropKey = string | number | symbol;
export type StoreKey = string;
export type StoreName<T> = keyof T;
export type StateKey = string;
export type ElementID = string;
export type PropStateRegistration = {
    elementId: ElementID;
    propKey: PropKey;
};
export type EventListenerRegistration = [HTMLElement, PropKey, (event: CustomEvent<any>) => Promise<void>];
export interface NylasProviderInterface<Stores extends Record<string, ObservableMap<any>>> {
    nylasConnector?: BaseNylasConnectorInterface;
    stores: Stores;
    host?: HTMLElement;
    automaticComponentRegistration: boolean;
    registeredComponents: Record<ElementID, RegisteredComponent<any, any>>;
    propStateRegistrations: Map<StoreName<this['stores']>, Map<StateKey, PropStateRegistration[]>>;
    eventListenerRegistrations: Map<ElementID, EventListenerRegistration[]>;
    componentWillLoad(nylasConnector: BaseNylasConnectorInterface): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDisconnected(): Promise<void>;
    getStore<K extends keyof ThisType<this['stores']>>(name: K): ThisType<this['stores']>[K];
    registerComponent(component: RegisteredComponent<any, any>): void;
    unregisterComponent(component: RegisteredComponent<any, any>): void;
}
export declare abstract class NylasAbstractProvider<Stores extends Record<string, ObservableMap<any>>> implements NylasProviderInterface<Stores> {
    nylasConnector?: BaseNylasConnectorInterface;
    stores: Stores;
    host: HTMLElement;
    automaticComponentRegistration: boolean;
    registeredComponents: Record<ElementID, RegisteredComponent<any, any>>;
    propStateRegistrations: Map<StoreName<this['stores']>, Map<StateKey, PropStateRegistration[]>>;
    eventListenerRegistrations: Map<ElementID, EventListenerRegistration[]>;
    eventOverrides: EventOverride<Exclude<typeof this.nylasConnector, undefined>>;
    constructor(host: HTMLElement, stores: Stores, automaticComponentRegistration: boolean | undefined, eventOverrides: EventOverride<any>);
    componentWillLoad(nylasConnector: BaseNylasConnectorInterface): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDisconnected(): Promise<void>;
    registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    registerComponent(component: RegisteredComponent<any, any>): void;
    unregisterComponent(component: RegisteredComponent<any, any>): void;
    getStore<K extends keyof Stores>(name: K): Stores[K];
    private setupStoreListeners;
    private get hostTagName();
}
export declare class NylasBaseProvider<T extends Record<string, ObservableMap<any>>> extends NylasAbstractProvider<T> {
}
