import { Message, NylasErrorResponse } from '@nylas/core';
import { EventEmitter } from '../stencil-public-runtime';
export type DataState = 'loading' | 'ready';
type StoresType = unknown;
type StoreInstances = {
    [K in keyof StoresType]: StoresType[K];
};
type StoreStateKeys<T> = T extends {
    state: infer S;
} ? keyof S : never;
export type CombinedStoreStateKeys<SK extends keyof S, S = StoreInstances> = {
    [StoreKey in SK]: StoreStateKeys<S[StoreKey]> extends never | undefined ? never : `${StoreKey & string}.${StoreStateKeys<S[StoreKey]> & string}`;
}[SK];
export type InternalMessage = {
    id: string;
    data: Message;
    collapse: boolean;
    showContactData: boolean;
};
export type InternalAttachment = {
    blob: Blob;
    filename: string;
    contentType: string;
    size: number;
    messageId: string;
};
export type MethodKeys<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export type AvailabilityTimeslot = {
    emails: string[];
    start_time: number;
    end_time: number;
};
export type AvailabilityResponse = {
    time_slots: AvailabilityTimeslot[];
    participants: {
        email: string;
        name: string;
    }[];
    duration: number;
};
export type UISettingsResponse = {
    scheduler: {
        available_days_in_future: number;
        min_cancellation_notice: number;
    };
    organizer: {
        name: string;
        email: string;
    };
};
export type ExtractEventEmitterKeys<T> = {
    [K in keyof T]: T[K] extends EventEmitter<any> ? K : never;
}[keyof T];
export type EventEmitterEventType<T> = T extends EventEmitter<infer U> ? U : never;
export type ExtractEventEmitterProperties<T> = {
    [K in keyof T]: T[K] extends EventEmitter<infer U> ? {
        key: K;
        eventType: U;
    } : never;
}[keyof T];
export type NylasEvent = {
    booking_id: string;
    organizer: {
        email: string;
        name: string;
        is_organizer?: boolean;
    };
    title: string;
    description: string;
    status: string;
};
export type DataResponseError = Exclude<NylasErrorResponse['error'], undefined>;
export type DataResponseReturnType<T = any> = [T, null] | [null, DataResponseError];
export {};
