import { EventEmitter } from '../../../stencil-public-runtime';
import { Configuration } from '@nylas/core';
type Token = {
    token: string;
    value: string;
    description: string;
};
export declare class NylasEventTitle {
    host: HTMLElement;
    internals: ElementInternals;
    selectedConfiguration?: Configuration;
    eventTitle?: string;
    name: string;
    showTokens: boolean;
    availableTokens: {
        label: string;
        value: string;
        labelHTML: Token;
    }[];
    filteredTokens: {
        label: string;
        value: string;
        labelHTML: Token;
    }[];
    ariaActivedescendant: string;
    currentWord: {
        $value: string;
        fullText: string;
        index: number;
        focusOffset: number;
    };
    validationError: string;
    private titleRef;
    elementNameChangedHandler(newValue: string): void;
    ariaActivedescendantChangedHandler(newValue: string): void;
    configChangedHandler(newVal: any): void;
    valueChanged: EventEmitter<{
        value: string;
        name: string;
    }>;
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    formSubmittedHandler(event: CustomEvent): void;
    updateEventTitleFromProp(newValue: string): void;
    highlightTokens(title: string): string;
    getCurrentSelectionForBrowser(): {
        focusOffset: any;
        dollarIndex: any;
        lastWord: any;
        currentText: any;
        node: any;
        allSelected: any;
    } | null;
    handleChange(event: Event): void;
    handleInputKeyDown(event: any): void;
    selectOption(e: Event, option: {
        label: string;
        value: string;
        labelHTML: Token;
    }): void;
    populateSuggestionsDropdown(query?: string): void;
    updateEventTitle(text: string): void;
    resetDropdown(): void;
    getLabelHTML(token: {
        token: string;
        description: string;
    }): any;
    render(): any;
}
export {};
