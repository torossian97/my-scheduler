import { BookingType, Calendar, Configuration, OpenHours } from '@nylas/core';
import { Event, EventEmitter } from '../../../stencil-public-runtime';
import { User } from "../../../common/nylas-api-request";
type SchedulerEventDetail = {
    config: Partial<Configuration>;
    action: 'create' | 'edit';
    resetLoadingState?: (e: CustomEvent) => void;
    setError?: (error: Error) => void;
};
export declare class NylasEditorTabs {
    private formRef;
    host: HTMLNylasEditorTabsElement;
    calendars?: Calendar[];
    selectedConfiguration?: Configuration;
    defaultRequiresSessionAuth: boolean;
    currentUser?: User;
    schedulerPreviewLink: string;
    mode?: 'app' | 'composable';
    action: 'create' | 'edit';
    activeTab: string;
    isLoading: boolean;
    hasUnsavedChanges: boolean;
    changesSaved: boolean;
    formState: Partial<{
        title: string;
        description: string;
        duration: string;
        availability?: {
            timezone: string;
            openHours?: OpenHours[];
        };
        calendarIds: string[];
        participants?: any[];
        bookingCalendar?: string;
        location?: string;
        bookingType?: string;
        buffer?: {
            before: number;
            after: number;
        };
        availableDaysInFuture?: number;
        minCancellationNotice?: number;
    }>;
    error?: string;
    schedulerConfigChanged: EventEmitter<SchedulerEventDetail>;
    cancelButtonClick: EventEmitter<void>;
    formSubmitted: EventEmitter<void>;
    previewButtonClicked: EventEmitter<HTMLNylasEditorTabsElement>;
    configChangedHandler(newConfig: Configuration): void;
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    handleValueChanged(event: CustomEvent): void;
    getFormStateFromConfig(config?: Configuration): {
        title: string;
        description: string;
        duration: string;
        availability: {
            timezone: string;
            open_hours: OpenHours[] | undefined;
        };
        calendarIds: string[];
        participants: import("@nylas/core").Participant[];
        bookingCalendar: string;
        location: string;
        bookingType: BookingType;
        buffer: import("@nylas/core").MeetingBuffer;
        availableDaysInFuture: number;
        minCancellationNotice: number;
    };
    updateFormState(): Partial<{
        title: string;
        description: string;
        duration: string;
        availability?: {
            timezone: string;
            openHours?: OpenHours[] | undefined;
        } | undefined;
        calendarIds: string[];
        participants?: any[] | undefined;
        bookingCalendar?: string | undefined;
        location?: string | undefined;
        bookingType?: string | undefined;
        buffer?: {
            before: number;
            after: number;
        } | undefined;
        availableDaysInFuture?: number | undefined;
        minCancellationNotice?: number | undefined;
    }>;
    setActiveTab(e: Event, tabName: string): void;
    setError: (error: Error) => void;
    formSubmissionHandler: (event: Event) => Promise<void>;
    render(): any;
}
export {};
