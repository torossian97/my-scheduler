import { EventEmitter } from '../../../stencil-public-runtime';
import { Configuration } from '@nylas/core';
export type OpenHours = {
    days: number[];
    start: string;
    end: string;
    timezone: string;
};
export type Schedule = {
    SUN: {
        start: string;
        end: string;
    }[];
    MON: {
        start: string;
        end: string;
    }[];
    TUE: {
        start: string;
        end: string;
    }[];
    WED: {
        start: string;
        end: string;
    }[];
    THU: {
        start: string;
        end: string;
    }[];
    FRI: {
        start: string;
        end: string;
    }[];
    SAT: {
        start: string;
        end: string;
    }[];
};
export declare class NylasAvailabilityPicker {
    host: HTMLNylasAvailabilityPickerElement;
    selectedConfiguration?: Configuration;
    openHours?: OpenHours[];
    name: string;
    defaultTimezone: string;
    valueChanged: EventEmitter<{
        value: {
            openHours: OpenHours[];
            timezone: string;
        };
        name: string;
    }>;
    internals: ElementInternals;
    schedule: {
        SUN: never[];
        MON: {
            start: string;
            end: string;
        }[];
        TUE: {
            start: string;
            end: string;
        }[];
        WED: {
            start: string;
            end: string;
        }[];
        THU: {
            start: string;
            end: string;
        }[];
        FRI: {
            start: string;
            end: string;
        }[];
        SAT: never[];
    };
    timezone: string;
    overlapDays: {
        [key: string]: number[];
    };
    elementNameChangedHandler(newValue: string): void;
    configChangedHandler(newConfig: Configuration): void;
    scheduleChanged(newValue: Schedule, oldValue: Schedule): void;
    selectedOptionChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
    }>): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    getOverlaps(timeRanges: any): number[];
    addTimeRange(day: any): void;
    removeTimeRange(day: any, index: any): void;
    setTime(event: CustomEvent<{
        key: string;
        value: string;
    }>): void;
    setFormError(event: CustomEvent<{
        key: string;
        message: string;
    }>): void;
    openHoursToSchedule(openHours: OpenHours[]): void;
    getDayKey(dayIndex: number): string;
    scheduleToOpenHours(schedule: Schedule): OpenHours[];
    render(): any;
}
