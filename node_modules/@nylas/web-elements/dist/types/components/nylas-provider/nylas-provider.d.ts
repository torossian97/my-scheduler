import { RegisteredComponent } from "../../common/register-component";
import { NylasConnector } from "../../connector/nylas-connector/index";
import { NylasAuthStoreType } from "../../stores/auth-store";
import { NylasMailboxStoreType } from "../../stores/mailbox-store";
import { NylasSchedulerStoreType } from "../../stores/scheduler-store";
import type { AuthConfig, NylasAuthType } from '@nylas/core';
import { EventEmitter } from '../../stencil-public-runtime';
import type { EventOverride } from "../../common/component-types";
import { NylasSchedulerConfigStoreType } from "../../stores/scheduler-config-store";
export declare class NylasProvider {
    private stores?;
    private baseProvider?;
    private nylasAuth?;
    private nylasConnector?;
    private host;
    readonly authConfig?: AuthConfig;
    eventOverrides: EventOverride<Exclude<typeof this.nylasConnector, undefined>>;
    automaticComponentRegistration: boolean;
    init: EventEmitter<HTMLNylasProviderElement>;
    loggedIn: EventEmitter<HTMLNylasProviderElement>;
    loggedOut: EventEmitter<HTMLNylasProviderElement>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDisconnected(): void;
    registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    private handleAuthChange;
    getNylasAuth(): Promise<NylasAuthType | undefined>;
    getNylasConnector(): Promise<NylasConnector | undefined>;
    getMailboxStore(): Promise<NylasMailboxStoreType | undefined>;
    getAuthStore(): Promise<NylasAuthStoreType | undefined>;
    getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined>;
    getNylasSchedulerConfigStore(): Promise<NylasSchedulerConfigStoreType | undefined>;
    render(): any;
}
