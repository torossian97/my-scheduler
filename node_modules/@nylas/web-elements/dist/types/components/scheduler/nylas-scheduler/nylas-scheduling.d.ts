import { RegisteredComponent } from "../../../common/register-component";
import type { SchedulerEventOverride } from "../../../common/component-types";
import { NylasSchedulerConnector } from "../../../connector/nylas-scheduler-connector/index";
import { NylasSchedulerStoreState, NylasSchedulerStoreType } from "../../../stores/scheduler-store";
import { NylasSchedulerBookingData, ThemeConfig, Notification, NylasSchedulerErrorResponse } from '@nylas/core';
import { EventEmitter } from '../../../stencil-public-runtime';
export declare class NylasScheduling {
    private stores?;
    private baseProvider?;
    private nylasSchedulerConnector?;
    private host;
    readonly mode: 'app' | 'composable';
    readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;
    readonly sessionId?: string;
    readonly schedulerApiUrl: string;
    readonly bookingInfo?: NylasSchedulerBookingData;
    readonly rescheduleBookingId?: string;
    readonly cancelBookingId?: string;
    readonly configurationId?: string;
    readonly nylasBranding?: boolean;
    readonly eventOverrides: SchedulerEventOverride;
    readonly isLoading?: boolean;
    readonly themeConfig?: ThemeConfig;
    readonly showNotification?: boolean;
    automaticComponentRegistration: boolean;
    selectedDateLabel: string;
    init: EventEmitter<HTMLNylasSchedulingElement>;
    schedulerWillLoad: EventEmitter<HTMLNylasSchedulingElement>;
    schedulerDidLoad: EventEmitter<HTMLNylasSchedulingElement>;
    nylasSchedulerError: EventEmitter<Notification>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDisconnected(): void;
    bookingInfoChanged(newVal?: NylasSchedulerBookingData): void;
    registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    monthChangedHandler(event: CustomEvent<Date>): Promise<void>;
    bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingData>): Promise<void>;
    dateSelectedHandler(event: CustomEvent<Date>): void;
    cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined>;
    getNylasSchedulerConnector(): Promise<NylasSchedulerConnector | undefined>;
    getRef(): Promise<HTMLNylasSchedulingElement>;
    private getErrorObject;
    private checkIfSessionIdOrConfigIdExists;
    private isTimeslotValid;
    private validateAvailableDaysInFuture;
    render(): any;
}
