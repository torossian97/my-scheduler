import { RegisteredComponent } from "../../../common/register-component";
import type { EventOverride } from "../../../common/component-types";
import { NylasMailboxConnector } from "../../../connector/nylas-mailbox-connector/index";
import { NylasAuthStoreState, NylasAuthStoreType } from "../../../stores/auth-store";
import { NylasMailboxStoreState, NylasMailboxStoreType } from "../../../stores/mailbox-store";
import { AuthConfig, NylasAuthType } from '@nylas/core';
import { EventEmitter } from '../../../stencil-public-runtime';
export declare class NylasMailbox {
    private stores?;
    private baseProvider?;
    private nylasAuth?;
    private router?;
    private nylasMailboxConnector?;
    private host;
    readonly automaticComponentRegistration: boolean;
    eventOverrides: EventOverride<Exclude<typeof this.nylasMailboxConnector, undefined>>;
    readonly authConfig?: AuthConfig;
    readonly defaultAuthStoreState?: NylasAuthStoreState;
    readonly defaultMailboxStoreState?: NylasMailboxStoreState;
    readonly init: EventEmitter<HTMLNylasMailboxElement>;
    readonly loggedIn: EventEmitter<HTMLNylasMailboxElement>;
    readonly loggedOut: EventEmitter<HTMLNylasMailboxElement>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDisconnected(): void;
    registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    getMailboxStore(): Promise<NylasMailboxStoreType | undefined>;
    getAuthStore(): Promise<NylasAuthStoreType | undefined>;
    getNylasAuth(): Promise<NylasAuthType | undefined>;
    getNylasMailboxConnector(): Promise<NylasMailboxConnector | undefined>;
    private handleAuthChange;
    render(): any;
}
