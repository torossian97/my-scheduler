/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AuthConfig, Calendar, Configuration, Folder, Message, Notification, NylasAuthType, NylasSchedulerBookingData as NylasSchedulerBookingData1, NylasSchedulerErrorResponse, ThemeConfig, Thread, Timeslot } from "@nylas/core";
import { OpenHours } from "./components/scheduler-editor/nylas-availability-picker/nylas-availability-picker";
import { DataState, InternalAttachment, NylasEvent } from "./common/types";
import { ConfigSettings, NylasEvent as NylasEvent1, NylasSchedulerBookingData, NylasSchedulerErrorResponse as NylasSchedulerErrorResponse1 } from ".";
import { AuthArgs, NylasApiRequest, User } from "./common/nylas-api-request";
import { AvailabilityTimeslot, ConfigSettings as ConfigSettings1, NylasSchedulerStoreState, NylasSchedulerStoreType } from "./stores/scheduler-store";
import { Stores, Transitions } from "./components/nylas-if-state/nylas-if-state";
import { TokenInfo } from "@nylas/core/dist/auth";
import { NylasAuthConnectorInterface, NylasMailboxConnectorInterface } from "./connector/connector-interface";
import { EventOverride, SchedulerEditorEventOverride, SchedulerEventOverride } from "./common/component-types";
import { NylasAuthStoreState, NylasAuthStoreType } from "./stores/auth-store";
import { NylasMailboxStoreState, NylasMailboxStoreType } from "./stores/mailbox-store";
import { NylasMailboxConnector } from "./connector/nylas-mailbox-connector/index";
import { PaginationEvent } from "./components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination";
import { MethodsOfNylasMailboxConnector } from "./components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button";
import { NylasConnector } from "./connector/nylas-connector/index";
import { NylasSchedulerConfigStoreState, NylasSchedulerConfigStoreType } from "./stores/scheduler-config-store";
import { Config } from "@nylas/identity";
import { NylasSchedulerConfigConnector } from "./connector/nylas-scheduler-config-connector/index";
import { NylasSchedulerConnector } from "./connector/nylas-scheduler-connector/index";
import { SummarizeEvent } from "./components/mailbox/nylas-summarize-message-button/nylas-summarize-message-button";
import { RefreshEvent } from "./components/mailbox/nylas-threads-refresh/nylas-threads-refresh";
export { AuthConfig, Calendar, Configuration, Folder, Message, Notification, NylasAuthType, NylasSchedulerBookingData as NylasSchedulerBookingData1, NylasSchedulerErrorResponse, ThemeConfig, Thread, Timeslot } from "@nylas/core";
export { OpenHours } from "./components/scheduler-editor/nylas-availability-picker/nylas-availability-picker";
export { DataState, InternalAttachment, NylasEvent } from "./common/types";
export { ConfigSettings, NylasEvent as NylasEvent1, NylasSchedulerBookingData, NylasSchedulerErrorResponse as NylasSchedulerErrorResponse1 } from ".";
export { AuthArgs, NylasApiRequest, User } from "./common/nylas-api-request";
export { AvailabilityTimeslot, ConfigSettings as ConfigSettings1, NylasSchedulerStoreState, NylasSchedulerStoreType } from "./stores/scheduler-store";
export { Stores, Transitions } from "./components/nylas-if-state/nylas-if-state";
export { TokenInfo } from "@nylas/core/dist/auth";
export { NylasAuthConnectorInterface, NylasMailboxConnectorInterface } from "./connector/connector-interface";
export { EventOverride, SchedulerEditorEventOverride, SchedulerEventOverride } from "./common/component-types";
export { NylasAuthStoreState, NylasAuthStoreType } from "./stores/auth-store";
export { NylasMailboxStoreState, NylasMailboxStoreType } from "./stores/mailbox-store";
export { NylasMailboxConnector } from "./connector/nylas-mailbox-connector/index";
export { PaginationEvent } from "./components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination";
export { MethodsOfNylasMailboxConnector } from "./components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button";
export { NylasConnector } from "./connector/nylas-connector/index";
export { NylasSchedulerConfigStoreState, NylasSchedulerConfigStoreType } from "./stores/scheduler-config-store";
export { Config } from "@nylas/identity";
export { NylasSchedulerConfigConnector } from "./connector/nylas-scheduler-config-connector/index";
export { NylasSchedulerConnector } from "./connector/nylas-scheduler-connector/index";
export { SummarizeEvent } from "./components/mailbox/nylas-summarize-message-button/nylas-summarize-message-button";
export { RefreshEvent } from "./components/mailbox/nylas-threads-refresh/nylas-threads-refresh";
export namespace Components {
    interface AddCircleIcon {
        "height": string;
        "width": string;
    }
    interface ArchiveIcon {
        "height": string;
        "width": string;
    }
    interface ArrowIcon {
        "height": string;
        "width": string;
    }
    interface BoldIcon {
        "height": string;
        "width": string;
    }
    interface ButtonComponent {
        "blurHandler"?: (event: FocusEvent) => void;
        "clickHandler"?: (event: MouseEvent) => void;
        "disabled": boolean;
        "focusHandler"?: (event: FocusEvent) => void;
        "mouseOutHandler"?: (event: MouseEvent) => void;
        "mouseOverHandler"?: (event: MouseEvent) => void;
        "type": string;
        "variant": ButtonType;
    }
    interface CalendarCancelIcon {
        "height": string;
        "width": string;
    }
    interface CalendarCheckIcon {
        "height": string;
        "width": string;
    }
    interface CalendarIcon {
        "height": string;
        "width": string;
    }
    interface CalendarInfoIcon {
        "height": string;
        "width": string;
    }
    interface CalendarPatternsIcon {
        "height": string;
        "width": string;
    }
    interface CheckmarkCircleIcon {
        "height": string;
        "width": string;
    }
    interface ChevronIcon {
        "height": string;
        "width": string;
    }
    interface CloseIcon {
        "height": string;
        "width": string;
    }
    interface DocumentRefreshIcon {
        "height": string;
        "width": string;
    }
    interface FlowIcon {
        "height": string;
        "width": string;
    }
    interface FolderIcon {
        "height": string;
        "width": string;
    }
    interface ForwardIcon {
        "height": string;
        "width": string;
    }
    interface GlobeIcon {
        "height": string;
        "width": string;
    }
    interface GoogleLogoIcon {
        "height": string;
        "width": string;
    }
    interface InboxIcon {
        "height": string;
        "width": string;
    }
    interface InfoIcon {
        "height": string;
        "width": string;
    }
    interface ItalicIcon {
        "height": string;
        "width": string;
    }
    interface LoadingIcon {
        "height": string;
        "width": string;
    }
    interface LocationIcon {
        "height": string;
        "width": string;
    }
    interface LocationOffIcon {
        "height": string;
        "width": string;
    }
    interface MicrosoftLogoIcon {
        "height": string;
        "width": string;
    }
    interface MultiSelectDropdown {
        /**
          * The label of the dropdown
         */
        "label"?: string;
        /**
          * The name of the dropdown
         */
        "name": string;
        /**
          * The options to display in the dropdown
         */
        "options": DropdownOption[];
    }
    /**
     * The `nylas-additional-participants` component is a form input for adding additional participants to an event.
     */
    interface NylasAdditionalParticipants {
        "eventParticipants"?: Participant[];
        "name": string;
    }
    /**
     * The `nylas-availability-picker` component is a form input for selecting availability (open hours).
     */
    interface NylasAvailabilityPicker {
        "defaultTimezone": string;
        /**
          * The name of the availability picker.
         */
        "name": string;
        /**
          * The open hours to display.
         */
        "openHours"?: OpenHours[];
        /**
          * The selected configuration.
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-booked-event-card` component is a UI component that displays the booked event card.
     */
    interface NylasBookedEventCard {
        /**
          * The booking info used to book / reschedule the event.
         */
        "bookingInfo"?: NylasSchedulerBookingData;
        /**
          * The config settings for the scheduler.
         */
        "configSettings"?: ConfigSettings;
        /**
          * The booked event.
         */
        "eventInfo": NylasEvent;
        /**
          * Booking flow type.
         */
        "rescheduleBookingId"?: string;
        /**
          * The selected timeslot.
         */
        "selectedTimeslot": Timeslot;
        /**
          * The selected timezone.
         */
        "selectedTimezone": string;
    }
    /**
     * The `nylas-booking-calendar-picker` component is a UI component that displays the booking calendar picker.
     */
    interface NylasBookingCalendarPicker {
        /**
          * The calendars to choose from.
         */
        "calendars"?: Calendar[];
        /**
          * The current logged in user.
         */
        "currentUser"?: User;
        /**
          * The default selected calendar.
         */
        "defaultBookingCalendar": string;
        /**
          * The name of the calendar picker.
         */
        "name": string;
    }
    /**
     * The `nylas-booking-form` component is a UI component that allows users to book an event.
     * The booking form component.
     */
    interface NylasBookingForm {
        /**
          * The booking info.
         */
        "bookingInfo"?: NylasSchedulerBookingData;
        /**
          * The booked event (Used to track if a booking is created in an eventOverride).
         */
        "eventInfo"?: NylasEvent1;
        /**
          * The loading state.
         */
        "isLoading"?: boolean;
    }
    /**
     * The `nylas-buffer-time` component is a UI component that displays the booking calendar picker.
     */
    interface NylasBufferTime {
        /**
          * The buffer time
         */
        "buffer": { before: number; after: number };
        /**
          * The name of the calendar picker.
         */
        "name": string;
    }
    /**
     * The `nylas-calendar-picker` component is a form input for selecting calendars.
     */
    interface NylasCalendarPicker {
        /**
          * The calendars to choose from.
         */
        "calendars"?: Calendar[];
        /**
          * The logged in user.
         */
        "currentUser"?: User;
        /**
          * The default selected calendars.
         */
        "defaultSelectedCalendars": string[];
        /**
          * The name of the calendar picker.
         */
        "name": string;
    }
    /**
     * The `nylas-cancel-booking-form` component is a UI component that allows users to cancel a booking.
     */
    interface NylasCancelBookingForm {
        /**
          * The booking ID to cancel.
         */
        "cancelBookingId": string;
    }
    /**
     * The `nylas-cancelled-event-card` component is a UI component that displays the cancelled event card.
     */
    interface NylasCancelledEventCard {
        /**
          * The participant's name who booked the event / is logged in.
         */
        "cancelledEventInfo": Partial<NylasEvent1>;
        /**
          * The config settings for the scheduler.
         */
        "configSettings"?: ConfigSettings;
    }
    interface NylasComposer {
        /**
          * The message to reply to or forward
         */
        "message"?: Message;
        /**
          * The view email element
         */
        "viewEmailElement"?: HTMLNylasViewEmailElement | null;
    }
    /**
     * The `nylas-custom-booking-flow` component is a UI component that displays the booking calendar picker.
     */
    interface NylasCustomBookingFlow {
        /**
          * The booking type.
         */
        "bookingType": string;
        /**
          * The name of the calendar picker.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-date-picker` component is a UI component that allows users to select a date.
     */
    interface NylasDatePicker {
        /**
          * The config settings.
         */
        "configSettings"?: ConfigSettings;
        /**
          * The loading state.
         */
        "isLoading"?: boolean;
        /**
          * The dates that are selectable.
         */
        "selectableDates"?: Date[];
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
    }
    /**
     * The `nylas-editor-tabs` component is a UI component that displays the editor tabs for the scheduler editor.
     */
    interface NylasEditorTabs {
        /**
          * The list of calendars to use in the editor when configuring availability.
         */
        "calendars"?: Calendar[];
        /**
          * The current logged in user.
         */
        "currentUser"?: User;
        /**
          * The default require session auth flag to used to set the default value for the requireSessionAuth property when creating a configuration. If set to true, then a session token must be provided to the <nylas-scheduling/> component. If set to false, then a session token is not required and the configuration id can passed to the <nylas-scheduling/> component instead.
         */
        "defaultRequiresSessionAuth": boolean;
        /**
          * The mode of the editor. - `app`: The editor is used as a standalone app. - `composable`: The editor is used as a composable component.
         */
        "mode"?: 'app' | 'composable';
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use a placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink": string;
        /**
          * The selected configuration to use in the editor when editing an existing configuration or creating a new one.
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-description` component is a form input for the description of an event.
     */
    interface NylasEventDescription {
        /**
          * The event description stored in the configuration
         */
        "eventDescription"?: string;
        /**
          * The name of the event description input.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-duration` component is a form input for the duration of an event.
     */
    interface NylasEventDuration {
        /**
          * The event duration in minutes as set in the configuration.
         */
        "eventDurationMinutes"?: number;
        /**
          * The name of the event duration. Default is 'duration'.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-info` component is a input form for the event information.
     */
    interface NylasEventInfo {
    }
    /**
     * The `nylas-event-limits` component is a input form for the event information.
     */
    interface NylasEventLimits {
    }
    /**
     * The `nylas-event-title` component is a form input for the title of an event.
     */
    interface NylasEventTitle {
        /**
          * The title of the event from the cofiguration.
         */
        "eventTitle"?: string;
        /**
          * The name attribute of this component.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-form-card` component is a card that can be used to display a form. It is a simple wrapper around a card with a header and content area.
     */
    interface NylasFormCard {
    }
    interface NylasIfState {
        "getStore"?: <K extends keyof Stores>(name: K) => Stores[K];
        /**
          * If true, then the component will render if the state is true. This prop is used with the `state` prop.
         */
        "isBoolean"?: boolean;
        /**
          * If true, then the component will render if the state is set (empty or not set). This prop is used with the `state` prop.
         */
        "isStateSet"?: boolean;
        /**
          * The name of the state to watch.
         */
        "state"?: string;
        "transition": Transitions;
    }
    /**
     * The `nylas-limit-future-bookings` component is a form input for the description of an event.
     */
    interface NylasLimitFutureBookings {
        /**
          * The number of days into the future that invitees will see availability, as set in the configuration.
         */
        "availableDaysInFuture"?: number;
        /**
          * The name of the limit future bookings input.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-list-configurations` component displays a list of scheduling pages.
     */
    interface NylasListConfigurations {
        /**
          * The list of configurations to display.
         */
        "configurations": Configuration[];
        "getState": () => Promise<"loading" | "error" | "loaded">;
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use a placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink": string;
        "setError": (error: string) => Promise<void>;
        "setState": (state: 'loading' | 'loaded' | 'error') => Promise<void>;
    }
    interface NylasListFolders {
        "folders"?: Folder[];
        "selectedFolder"?: string;
    }
    interface NylasListThreads {
        "isAuthenticated": boolean;
        "showCheckbox": boolean;
        "state": DataState;
        "threads": Thread[];
        "tokenInfo"?: TokenInfo;
    }
    /**
     * The `nylas-locale-switch` component is a UI component that allows users to select a timezone and language.
     */
    interface NylasLocaleSwitch {
        /**
          * The selected language.
         */
        "selectedLanguage": string;
        /**
          * The selected timezone.
         */
        "selectedTimezone": string;
    }
    /**
     * The `nylas-location-component` component is a form input for the description of an event.
     */
    interface NylasLocationComponent {
        /**
          * The event location stored in the configuration
         */
        "eventLocation"?: string;
        /**
          * The name of the event location input.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    interface NylasLogin {
        "buttonText": string;
        "companyName": string;
        "isAuthenticated": boolean;
        "loginMethod": 'redirect' | 'emebded';
        "logoUrl": string;
        "logoWidth"?: string;
        "nylasConnector"?: NylasAuthConnectorInterface;
        "providers"?: string;
        "scopes"?: string[];
    }
    interface NylasLogo {
        "height": string;
        "width": string;
    }
    /**
     * The Nylas Mailbox component.
     * This component is used as a provider for all other Nylas Mailbox components.
     * It is responsible for managing the NylasAuth and NylasMailboxConnector instances.
     * It also manages the state of the NylasAuth and NylasMailboxStore instances.
     * @example <nylas-mailbox
     *  auth-config={{
     *  clientId: 'YOUR_CLIENT_ID',
     *  }}
     * default-auth-store-state={{
     * threadQueryParams: {
     *  limit: 10,
     * }}
     * >
     *  <nylas-mailbox-thread-list></nylas-mailbox-thread-list>
     * </nylas-mailbox>
     */
    interface NylasMailbox {
        /**
          * The Nylas Auth configuration. Used to manage all things authentication with Nylas.
         */
        "authConfig"?: AuthConfig;
        /**
          * Automatically register components that have the `@RegisterComponent` decorator. If this is set to false, you will need to manually register components using the `registerComponent` method.
         */
        "automaticComponentRegistration": boolean;
        /**
          * The default auth store state. Used to set the initial state of the auth store.
         */
        "defaultAuthStoreState"?: NylasAuthStoreState;
        /**
          * The default mailbox store state. Used to set the initial state of the mailbox store.
         */
        "defaultMailboxStoreState"?: NylasMailboxStoreState;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides": EventOverride<Exclude<typeof this.nylasMailboxConnector, undefined>>;
        /**
          * This method is used to retrieve the authStore instance
          * @returns The authStore instance
         */
        "getAuthStore": () => Promise<NylasAuthStoreType | undefined>;
        /**
          * This method is used to retrieve the mailboxStore instance
          * @returns The mailboxStore instance
         */
        "getMailboxStore": () => Promise<NylasMailboxStoreType | undefined>;
        /**
          * This method is used to retrieve the NylasAuth instance
          * @returns The NylasAuth instance
         */
        "getNylasAuth": () => Promise<NylasAuthType | undefined>;
        /**
          * This method is used to retrieve the NylasMailboxConnector instance
          * @returns The NylasMailboxConnector instance
         */
        "getNylasMailboxConnector": () => Promise<NylasMailboxConnector | undefined>;
    }
    interface NylasMailboxPagination {
        /**
          * @description Whether or not the mailbox has a next or previous page of threads
         */
        "hasNextPage": boolean;
        /**
          * @description Whether or not the mailbox has a previous page of threads
         */
        "hasPreviousPage": boolean;
        /**
          * @description Whether or not the infinity scroll should only be enabled on mobile devices
         */
        "mobileOnlyInfiniteScroll": boolean;
        /**
          * @description The width of the mobile viewport
         */
        "mobileViewPortWidth": number;
        /**
          * @description Go to the next page of threads
         */
        "nextPage": () => Promise<void>;
        /**
          * @description Go to the previous page of threads
         */
        "previousPage": () => Promise<void>;
        /**
          * @description Whether or not the mailbox has a next or previous page of threads
         */
        "scrollTarget": 'container' | 'page';
        /**
          * @description The state of the mailbox
         */
        "state": 'ready' | 'loading' | 'error';
    }
    interface NylasMailboxToolbarButton {
        /**
          * The value of the state to compare against to check if the data is loading, error, or ready.
         */
        "dataState"?: string;
        /**
          * If true, then the component will render the icon only.
         */
        "iconOnly": boolean;
        /**
          * If true, then the component will render if the state is true. This prop is used with the `state` prop.
         */
        "mailboxConnector"?: NylasMailboxConnectorInterface;
        /**
          * The name of the mailbox connector method to call.
         */
        "method": MethodsOfNylasMailboxConnector;
    }
    /**
     * The `nylas-min-cancellation-notice` component is a form input for the description of an event.
     */
    interface NylasMinCancellationNotice {
        /**
          * The minimum cancellation notice stored in the configuration
         */
        "minCancellationNotice"?: number;
        /**
          * The name of the min cancellation notice input.
         */
        "name": string;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-notification` component is a UI component that displays notifications.
     */
    interface NylasNotification {
        "allowedCategories": string[];
        /**
          * The time-to-live for notifications in milliseconds. Set to 'none' to disable auto-dismissal.
         */
        "ttl": number | 'none';
    }
    /**
     * The Nylas Provider component.
     * This component is used to manage the Nylas Provider.
     * It is used to manage the Nylas Auth instance, the Nylas Connector instance,
     * and the Nylas Store instance.
     */
    interface NylasProvider {
        /**
          * The Nylas Auth configuration. Used to manage all things authentication with Nylas.
         */
        "authConfig"?: AuthConfig;
        /**
          * Automatically register components that have the `@RegisterComponent` decorator. If this is set to false, you will need to manually register components using the `registerComponent` method.
          * @default true
         */
        "automaticComponentRegistration": boolean;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides": EventOverride<Exclude<typeof this.nylasConnector, undefined>>;
        /**
          * This method is used to retrieve the authStore instance
          * @returns The authStore instance
         */
        "getAuthStore": () => Promise<NylasAuthStoreType | undefined>;
        /**
          * This method is used to retrieve the mailboxStore instance
          * @returns The mailboxStore instance
         */
        "getMailboxStore": () => Promise<NylasMailboxStoreType | undefined>;
        /**
          * This method is used to retrieve the NylasAuth instance
          * @returns The NylasAuth instance
         */
        "getNylasAuth": () => Promise<NylasAuthType | undefined>;
        /**
          * This method is used to retrieve the NylasConnector instance
          * @returns The NylasConnector instance
         */
        "getNylasConnector": () => Promise<NylasConnector | undefined>;
        /**
          * This method is used to retrieve the NylasSchedulerConfig instance
          * @returns The NylasSchedulerConfig instance
         */
        "getNylasSchedulerConfigStore": () => Promise<NylasSchedulerConfigStoreType | undefined>;
        /**
          * This method is used to retrieve the NylasScheduler instance
          * @returns The NylasScheduler instance
         */
        "getNylasSchedulerStore": () => Promise<NylasSchedulerStoreType | undefined>;
    }
    /**
     * The `nylas-scheduler-editor` component is a form that allows users to configure the settings for the Nylas Scheduler.
     */
    interface NylasSchedulerEditor {
        /**
          * * The configuration id to use for the scheduler editor. If provided, then the scheduler editor will try and fetch the configuration with the provided id. If found, it will automatically load the editor with the configuration settings for editing.
         */
        "configurationId"?: string;
        /**
          * The default authentication arguments to use when authenticating a user.
         */
        "defaultAuthArgs"?: AuthArgs;
        /**
          * The default requires_session_auth flag to use to set the default value for the requireSessionAuth property when creating a configuration. If set to true, a session token must be provided to the <nylas-scheduling/> component. If set to false, then a session token is not required, and the configuration id can be passed to the <nylas-scheduling/> component instead.
         */
        "defaultRequiresSessionAuth": boolean;
        /**
          * The default scheduler config store state. Used to set the initial state of the scheduler config store. This state can be used to pass defaults to newly created configurations.
         */
        "defaultSchedulerConfigState"?: Partial<NylasSchedulerConfigStoreState>;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides": SchedulerEditorEventOverride;
        /**
          * This is used to set the mode for the scheduler config. The mode can be 'app' or 'composable'. The default mode is 'app'.
         */
        "mode": 'app' | 'composable';
        /**
          * The Nylas Api Request instance. Used to make requests to the Nylas API.
         */
        "nylasApiRequest"?: NylasApiRequest;
        /**
          * The Nylas Sessions configuration. Used to configure the Nylas Sessions instance.
         */
        "nylasSessionsConfig"?: Config;
        /**
          * This method is used to get the NylasSchedulerConfigConnector instance. You can use this instance to make requests to the Nylas API.
          * @returns Promise<NylasSchedulerConfigConnector | undefined>
         */
        "schedulerConnector": () => Promise<NylasSchedulerConfigConnector | undefined>;
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use the placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink": string;
        /**
          * This method is used to get the NylasSchedulerConfigStore instance. You can use this instance to update or get the state of the store.
          * @returns Promise<NylasSchedulerConfigStoreType | undefined>
         */
        "store": () => Promise<NylasSchedulerConfigStoreType | undefined>;
    }
    /**
     * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.
     */
    interface NylasScheduling {
        /**
          * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation. When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately invokes the handler after booking.
         */
        "bookingInfo"?: NylasSchedulerBookingData1;
        /**
          * Booking Id required for cancelling flow.
         */
        "cancelBookingId"?: string;
        /**
          * The config ID for the Nylas Scheduler. This should be passed in when using a public config, in which case the sessionId is not required.
         */
        "configurationId"?: string;
        /**
          * The default scheduler store state. Used to set the initial state of the scheduler store.
         */
        "defaultSchedulerState"?: Partial<NylasSchedulerStoreState>;
        /**
          * This provides an easy way to override the default function of the event emitter. An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like: ```html <nylas-scheduling eventOverride={{"timeslotConfirmed": (event, nylasConnector) => { console.log("Timeslot confirmed event fired!"); } }} /> ```
         */
        "eventOverrides": SchedulerEventOverride;
        /**
          * This method is used to retrieve the NylasConnector instance
          * @returns The NylasConnector instance
         */
        "getNylasSchedulerConnector": () => Promise<NylasSchedulerConnector | undefined>;
        /**
          * This method is used to retrieve the NylasScheduler instance
          * @returns The NylasScheduler instance
         */
        "getNylasSchedulerStore": () => Promise<NylasSchedulerStoreType | undefined>;
        "getRef": () => Promise<HTMLNylasSchedulingElement>;
        /**
          * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.
         */
        "isLoading"?: boolean;
        /**
          * This is used to set the mode for the Nylas Scheduler. The mode can be either `app` or `composable`. The default mode is `app`. - `app`: This mode is used to show the default Nylas Scheduler UI. - `composable`: This mode is used to show the composable Nylas Scheduler UI    by passing the individual scheduler components as children.
         */
        "mode": 'app' | 'composable';
        /**
          * This prop lets you hide the Nylas branding. Default is true.
         */
        "nylasBranding"?: boolean;
        /**
          * Booking Id required for rescheduling flow.
         */
        "rescheduleBookingId"?: string;
        /**
          * The URL for the Nylas Scheduler API. (staging or production URL)
         */
        "schedulerApiUrl": string;
        /**
          * The session ID for the Nylas Scheduler. This is used to authenticate the user.
         */
        "sessionId"?: string;
        "showNotification"?: boolean;
        /**
          * Theme config, used to automatically generate a theme with color palette and CSS variables to customize the look and feel of the Nylas Scheduler.
         */
        "themeConfig"?: ThemeConfig;
    }
    /**
     * The `nylas-selected-event-card` component is a UI component that displays the selected event card.
     */
    interface NylasSelectedEventCard {
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
        /**
          * The selected time.
         */
        "selectedTimeslot"?: Timeslot;
        /**
          * * The selected timezone.
         */
        "selectedTimezone": string;
    }
    interface NylasSummarizeMessageButton {
        /**
          * The message to summarize
         */
        "message"?: Message;
        /**
          * Play audio
          * @param ttsResponseBody Text to speech response body
          * @param audioRef Audio element
         */
        "playAudio": (ttsResponseBody: Promise<ReadableStream<Uint8Array> | null>) => Promise<void>;
        /**
          * Update the state of the summarize button
          * @param state The new state
          * @returns Promise<void>
         */
        "updateState": (state: 'loading' | 'playing' | 'stopped') => Promise<void>;
    }
    interface NylasThreadsRefresh {
        "updateState": (state: 'ready' | 'loading' | 'error') => Promise<void>;
    }
    interface NylasThreadsSearch {
        /**
          * The query to search for threads
         */
        "query": string;
    }
    /**
     * The `nylas-time-window-picker` component is a time picker that can be used to select a time.
     */
    interface NylasTimeWindowPicker {
        /**
          * This sets the error state of the input.
         */
        "hasError": boolean;
        /**
          * This is the start time value if one is set by the parent component. It is useful if this component is used to render an end time which should not be before the start time, defining the earliest selectable time.
         */
        "minimumStartTime": string | null;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder text for the input.
         */
        "placeholder": string;
        /**
          * The time to display in the input. This is passed by the parent component and can be updated using the setTime prop function provided by the parent component.
         */
        "time": string;
    }
    /**
     * The `nylas-timeslot-picker` component is a UI component that allows users to select a timeslot from a list of available timeslots.
     */
    interface NylasTimeslotPicker {
        /**
          * The available timeslots.
         */
        "availability"?: AvailabilityTimeslot[];
        /**
          * The loading state prop. Used to display loading state when fetching availability.
         */
        "isLoading"?: boolean;
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
        /**
          * The selected timeslot.
         */
        "selectedTimeslot"?: Timeslot;
        /**
          * The selected timezone.
         */
        "selectedTimezone": string;
    }
    interface NylasViewEmail {
        "attachments": InternalAttachment[];
        "detectDarkMode": boolean;
        "message"?: Message;
        "parent"?: HTMLElement;
    }
    interface NylasViewThread {
        /**
          * Attachments for each message within the thread
         */
        "attachments": InternalAttachment[];
        /**
          * The draft message to display
         */
        "draft"?: Message;
        /**
          * Messages within the thread to display
         */
        "messages": Message[];
        /**
          * Thread to display
         */
        "thread"?: Thread;
    }
    interface PeopleIcon {
        "height": string;
        "width": string;
    }
    interface PlayIcon {
        "height": string;
        "width": string;
    }
    interface RefreshIcon {
        "height": string;
        "width": string;
    }
    interface ReplyAllIcon {
        "height": string;
        "width": string;
    }
    interface ReplyIcon {
        "height": string;
        "width": string;
    }
    interface SearchIcon {
        "height": string;
        "width": string;
    }
    /**
     * The `select-dropdown` component is a dropdown that allows users to select an option from a list of options.
     */
    interface SelectDropdown {
        /**
          * The default selected option
         */
        "defaultSelectedOption"?: DropdownOption;
        /**
          * The name of the dropdown
         */
        "name": string;
        /**
          * The options to display in the dropdown
         */
        "options": DropdownOption[];
        /**
          * Show pluralized label for the selected option. This is s tring that is appended to the selected option label as a suffix.
         */
        "pluralizedLabel": string;
        /**
          * Should show search input
         */
        "withSearch": boolean;
    }
    interface SentIcon {
        "height": string;
        "width": string;
    }
    interface SpamIcon {
        "height": string;
        "width": string;
    }
    interface StarIcon {
        "height": string;
        "width": string;
    }
    interface StopIcon {
        "height": string;
        "width": string;
    }
    interface TimePeriodSelector {
        /**
          * The default selected number.
         */
        "defaultSelectedNumber": number;
        /**
          * The default selected time period.
         */
        "defaultSelectedPeriod": string;
        "timePeriods": string[];
    }
    interface TooltipComponent {
        /**
          * The position of the tooltip.
         */
        "position": 'top' | 'bottom' | 'left' | 'right';
    }
    interface TranslateIcon {
        "height": string;
        "width": string;
    }
    interface TrashIcon {
        "height": string;
        "width": string;
    }
    interface UnderlineIcon {
        "height": string;
        "width": string;
    }
    interface WarningIcon {
        "height": string;
        "width": string;
    }
}
export interface MultiSelectDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMultiSelectDropdownElement;
}
export interface NylasAvailabilityPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasAvailabilityPickerElement;
}
export interface NylasBookedEventCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasBookedEventCardElement;
}
export interface NylasBookingCalendarPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasBookingCalendarPickerElement;
}
export interface NylasBookingFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasBookingFormElement;
}
export interface NylasBufferTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasBufferTimeElement;
}
export interface NylasCalendarPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasCalendarPickerElement;
}
export interface NylasCancelBookingFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasCancelBookingFormElement;
}
export interface NylasCancelledEventCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasCancelledEventCardElement;
}
export interface NylasComposerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasComposerElement;
}
export interface NylasCustomBookingFlowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasCustomBookingFlowElement;
}
export interface NylasDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasDatePickerElement;
}
export interface NylasEditorTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasEditorTabsElement;
}
export interface NylasEventDescriptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasEventDescriptionElement;
}
export interface NylasEventDurationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasEventDurationElement;
}
export interface NylasEventTitleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasEventTitleElement;
}
export interface NylasLimitFutureBookingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasLimitFutureBookingsElement;
}
export interface NylasListConfigurationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasListConfigurationsElement;
}
export interface NylasListFoldersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasListFoldersElement;
}
export interface NylasListThreadsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasListThreadsElement;
}
export interface NylasLocaleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasLocaleSwitchElement;
}
export interface NylasLocationComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasLocationComponentElement;
}
export interface NylasLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasLoginElement;
}
export interface NylasMailboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasMailboxElement;
}
export interface NylasMailboxPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasMailboxPaginationElement;
}
export interface NylasMinCancellationNoticeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasMinCancellationNoticeElement;
}
export interface NylasProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasProviderElement;
}
export interface NylasSchedulerEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasSchedulerEditorElement;
}
export interface NylasSchedulingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasSchedulingElement;
}
export interface NylasSummarizeMessageButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasSummarizeMessageButtonElement;
}
export interface NylasThreadsRefreshCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasThreadsRefreshElement;
}
export interface NylasThreadsSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasThreadsSearchElement;
}
export interface NylasTimeWindowPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasTimeWindowPickerElement;
}
export interface NylasTimeslotPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasTimeslotPickerElement;
}
export interface NylasViewThreadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNylasViewThreadElement;
}
export interface SelectDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSelectDropdownElement;
}
export interface TimePeriodSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTimePeriodSelectorElement;
}
declare global {
    interface HTMLAddCircleIconElement extends Components.AddCircleIcon, HTMLStencilElement {
    }
    var HTMLAddCircleIconElement: {
        prototype: HTMLAddCircleIconElement;
        new (): HTMLAddCircleIconElement;
    };
    interface HTMLArchiveIconElement extends Components.ArchiveIcon, HTMLStencilElement {
    }
    var HTMLArchiveIconElement: {
        prototype: HTMLArchiveIconElement;
        new (): HTMLArchiveIconElement;
    };
    interface HTMLArrowIconElement extends Components.ArrowIcon, HTMLStencilElement {
    }
    var HTMLArrowIconElement: {
        prototype: HTMLArrowIconElement;
        new (): HTMLArrowIconElement;
    };
    interface HTMLBoldIconElement extends Components.BoldIcon, HTMLStencilElement {
    }
    var HTMLBoldIconElement: {
        prototype: HTMLBoldIconElement;
        new (): HTMLBoldIconElement;
    };
    interface HTMLButtonComponentElement extends Components.ButtonComponent, HTMLStencilElement {
    }
    var HTMLButtonComponentElement: {
        prototype: HTMLButtonComponentElement;
        new (): HTMLButtonComponentElement;
    };
    interface HTMLCalendarCancelIconElement extends Components.CalendarCancelIcon, HTMLStencilElement {
    }
    var HTMLCalendarCancelIconElement: {
        prototype: HTMLCalendarCancelIconElement;
        new (): HTMLCalendarCancelIconElement;
    };
    interface HTMLCalendarCheckIconElement extends Components.CalendarCheckIcon, HTMLStencilElement {
    }
    var HTMLCalendarCheckIconElement: {
        prototype: HTMLCalendarCheckIconElement;
        new (): HTMLCalendarCheckIconElement;
    };
    interface HTMLCalendarIconElement extends Components.CalendarIcon, HTMLStencilElement {
    }
    var HTMLCalendarIconElement: {
        prototype: HTMLCalendarIconElement;
        new (): HTMLCalendarIconElement;
    };
    interface HTMLCalendarInfoIconElement extends Components.CalendarInfoIcon, HTMLStencilElement {
    }
    var HTMLCalendarInfoIconElement: {
        prototype: HTMLCalendarInfoIconElement;
        new (): HTMLCalendarInfoIconElement;
    };
    interface HTMLCalendarPatternsIconElement extends Components.CalendarPatternsIcon, HTMLStencilElement {
    }
    var HTMLCalendarPatternsIconElement: {
        prototype: HTMLCalendarPatternsIconElement;
        new (): HTMLCalendarPatternsIconElement;
    };
    interface HTMLCheckmarkCircleIconElement extends Components.CheckmarkCircleIcon, HTMLStencilElement {
    }
    var HTMLCheckmarkCircleIconElement: {
        prototype: HTMLCheckmarkCircleIconElement;
        new (): HTMLCheckmarkCircleIconElement;
    };
    interface HTMLChevronIconElement extends Components.ChevronIcon, HTMLStencilElement {
    }
    var HTMLChevronIconElement: {
        prototype: HTMLChevronIconElement;
        new (): HTMLChevronIconElement;
    };
    interface HTMLCloseIconElement extends Components.CloseIcon, HTMLStencilElement {
    }
    var HTMLCloseIconElement: {
        prototype: HTMLCloseIconElement;
        new (): HTMLCloseIconElement;
    };
    interface HTMLDocumentRefreshIconElement extends Components.DocumentRefreshIcon, HTMLStencilElement {
    }
    var HTMLDocumentRefreshIconElement: {
        prototype: HTMLDocumentRefreshIconElement;
        new (): HTMLDocumentRefreshIconElement;
    };
    interface HTMLFlowIconElement extends Components.FlowIcon, HTMLStencilElement {
    }
    var HTMLFlowIconElement: {
        prototype: HTMLFlowIconElement;
        new (): HTMLFlowIconElement;
    };
    interface HTMLFolderIconElement extends Components.FolderIcon, HTMLStencilElement {
    }
    var HTMLFolderIconElement: {
        prototype: HTMLFolderIconElement;
        new (): HTMLFolderIconElement;
    };
    interface HTMLForwardIconElement extends Components.ForwardIcon, HTMLStencilElement {
    }
    var HTMLForwardIconElement: {
        prototype: HTMLForwardIconElement;
        new (): HTMLForwardIconElement;
    };
    interface HTMLGlobeIconElement extends Components.GlobeIcon, HTMLStencilElement {
    }
    var HTMLGlobeIconElement: {
        prototype: HTMLGlobeIconElement;
        new (): HTMLGlobeIconElement;
    };
    interface HTMLGoogleLogoIconElement extends Components.GoogleLogoIcon, HTMLStencilElement {
    }
    var HTMLGoogleLogoIconElement: {
        prototype: HTMLGoogleLogoIconElement;
        new (): HTMLGoogleLogoIconElement;
    };
    interface HTMLInboxIconElement extends Components.InboxIcon, HTMLStencilElement {
    }
    var HTMLInboxIconElement: {
        prototype: HTMLInboxIconElement;
        new (): HTMLInboxIconElement;
    };
    interface HTMLInfoIconElement extends Components.InfoIcon, HTMLStencilElement {
    }
    var HTMLInfoIconElement: {
        prototype: HTMLInfoIconElement;
        new (): HTMLInfoIconElement;
    };
    interface HTMLItalicIconElement extends Components.ItalicIcon, HTMLStencilElement {
    }
    var HTMLItalicIconElement: {
        prototype: HTMLItalicIconElement;
        new (): HTMLItalicIconElement;
    };
    interface HTMLLoadingIconElement extends Components.LoadingIcon, HTMLStencilElement {
    }
    var HTMLLoadingIconElement: {
        prototype: HTMLLoadingIconElement;
        new (): HTMLLoadingIconElement;
    };
    interface HTMLLocationIconElement extends Components.LocationIcon, HTMLStencilElement {
    }
    var HTMLLocationIconElement: {
        prototype: HTMLLocationIconElement;
        new (): HTMLLocationIconElement;
    };
    interface HTMLLocationOffIconElement extends Components.LocationOffIcon, HTMLStencilElement {
    }
    var HTMLLocationOffIconElement: {
        prototype: HTMLLocationOffIconElement;
        new (): HTMLLocationOffIconElement;
    };
    interface HTMLMicrosoftLogoIconElement extends Components.MicrosoftLogoIcon, HTMLStencilElement {
    }
    var HTMLMicrosoftLogoIconElement: {
        prototype: HTMLMicrosoftLogoIconElement;
        new (): HTMLMicrosoftLogoIconElement;
    };
    interface HTMLMultiSelectDropdownElementEventMap {
        "selectedOptionsChanged": {
    value: string[];
    name: string;
  };
    }
    interface HTMLMultiSelectDropdownElement extends Components.MultiSelectDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMultiSelectDropdownElementEventMap>(type: K, listener: (this: HTMLMultiSelectDropdownElement, ev: MultiSelectDropdownCustomEvent<HTMLMultiSelectDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMultiSelectDropdownElementEventMap>(type: K, listener: (this: HTMLMultiSelectDropdownElement, ev: MultiSelectDropdownCustomEvent<HTMLMultiSelectDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMultiSelectDropdownElement: {
        prototype: HTMLMultiSelectDropdownElement;
        new (): HTMLMultiSelectDropdownElement;
    };
    /**
     * The `nylas-additional-participants` component is a form input for adding additional participants to an event.
     */
    interface HTMLNylasAdditionalParticipantsElement extends Components.NylasAdditionalParticipants, HTMLStencilElement {
    }
    var HTMLNylasAdditionalParticipantsElement: {
        prototype: HTMLNylasAdditionalParticipantsElement;
        new (): HTMLNylasAdditionalParticipantsElement;
    };
    interface HTMLNylasAvailabilityPickerElementEventMap {
        "valueChanged": {
    value: {
      openHours: OpenHours[];
      timezone: string;
    };
    name: string;
  };
    }
    /**
     * The `nylas-availability-picker` component is a form input for selecting availability (open hours).
     */
    interface HTMLNylasAvailabilityPickerElement extends Components.NylasAvailabilityPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasAvailabilityPickerElementEventMap>(type: K, listener: (this: HTMLNylasAvailabilityPickerElement, ev: NylasAvailabilityPickerCustomEvent<HTMLNylasAvailabilityPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasAvailabilityPickerElementEventMap>(type: K, listener: (this: HTMLNylasAvailabilityPickerElement, ev: NylasAvailabilityPickerCustomEvent<HTMLNylasAvailabilityPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasAvailabilityPickerElement: {
        prototype: HTMLNylasAvailabilityPickerElement;
        new (): HTMLNylasAvailabilityPickerElement;
    };
    interface HTMLNylasBookedEventCardElementEventMap {
        "cancelBookingButtonClicked": { bookingId: string };
        "rescheduleButtonClicked": { bookingId: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void };
        "rescheduleBookedEventError": NylasSchedulerErrorResponse;
        "cancelBookedEventValidationError": {
    error: {
      title: string;
      message: string;
    };
  };
    }
    /**
     * The `nylas-booked-event-card` component is a UI component that displays the booked event card.
     */
    interface HTMLNylasBookedEventCardElement extends Components.NylasBookedEventCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasBookedEventCardElementEventMap>(type: K, listener: (this: HTMLNylasBookedEventCardElement, ev: NylasBookedEventCardCustomEvent<HTMLNylasBookedEventCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasBookedEventCardElementEventMap>(type: K, listener: (this: HTMLNylasBookedEventCardElement, ev: NylasBookedEventCardCustomEvent<HTMLNylasBookedEventCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasBookedEventCardElement: {
        prototype: HTMLNylasBookedEventCardElement;
        new (): HTMLNylasBookedEventCardElement;
    };
    interface HTMLNylasBookingCalendarPickerElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  };
    }
    /**
     * The `nylas-booking-calendar-picker` component is a UI component that displays the booking calendar picker.
     */
    interface HTMLNylasBookingCalendarPickerElement extends Components.NylasBookingCalendarPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasBookingCalendarPickerElementEventMap>(type: K, listener: (this: HTMLNylasBookingCalendarPickerElement, ev: NylasBookingCalendarPickerCustomEvent<HTMLNylasBookingCalendarPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasBookingCalendarPickerElementEventMap>(type: K, listener: (this: HTMLNylasBookingCalendarPickerElement, ev: NylasBookingCalendarPickerCustomEvent<HTMLNylasBookingCalendarPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasBookingCalendarPickerElement: {
        prototype: HTMLNylasBookingCalendarPickerElement;
        new (): HTMLNylasBookingCalendarPickerElement;
    };
    interface HTMLNylasBookingFormElementEventMap {
        "nameChanged": string;
        "emailChanged": string;
        "backButtonClicked": boolean;
        "detailsConfirmed": NylasSchedulerBookingData;
        "bookingFormError": Partial<Notification>;
    }
    /**
     * The `nylas-booking-form` component is a UI component that allows users to book an event.
     * The booking form component.
     */
    interface HTMLNylasBookingFormElement extends Components.NylasBookingForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasBookingFormElementEventMap>(type: K, listener: (this: HTMLNylasBookingFormElement, ev: NylasBookingFormCustomEvent<HTMLNylasBookingFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasBookingFormElementEventMap>(type: K, listener: (this: HTMLNylasBookingFormElement, ev: NylasBookingFormCustomEvent<HTMLNylasBookingFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasBookingFormElement: {
        prototype: HTMLNylasBookingFormElement;
        new (): HTMLNylasBookingFormElement;
    };
    interface HTMLNylasBufferTimeElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  };
    }
    /**
     * The `nylas-buffer-time` component is a UI component that displays the booking calendar picker.
     */
    interface HTMLNylasBufferTimeElement extends Components.NylasBufferTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasBufferTimeElementEventMap>(type: K, listener: (this: HTMLNylasBufferTimeElement, ev: NylasBufferTimeCustomEvent<HTMLNylasBufferTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasBufferTimeElementEventMap>(type: K, listener: (this: HTMLNylasBufferTimeElement, ev: NylasBufferTimeCustomEvent<HTMLNylasBufferTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasBufferTimeElement: {
        prototype: HTMLNylasBufferTimeElement;
        new (): HTMLNylasBufferTimeElement;
    };
    interface HTMLNylasCalendarPickerElementEventMap {
        "valueChanged": {
    value: string[];
    name: string;
    valueChangedHandler?: (event: CustomEvent<{ value: string[]; name: string }>) => void;
  };
    }
    /**
     * The `nylas-calendar-picker` component is a form input for selecting calendars.
     */
    interface HTMLNylasCalendarPickerElement extends Components.NylasCalendarPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasCalendarPickerElementEventMap>(type: K, listener: (this: HTMLNylasCalendarPickerElement, ev: NylasCalendarPickerCustomEvent<HTMLNylasCalendarPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasCalendarPickerElementEventMap>(type: K, listener: (this: HTMLNylasCalendarPickerElement, ev: NylasCalendarPickerCustomEvent<HTMLNylasCalendarPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasCalendarPickerElement: {
        prototype: HTMLNylasCalendarPickerElement;
        new (): HTMLNylasCalendarPickerElement;
    };
    interface HTMLNylasCancelBookingFormElementEventMap {
        "goBackButtonClicked": void;
        "cancelBookingFormSubmitted": { bookingId: string; reason: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void };
        "cancelBookedEventError": NylasSchedulerErrorResponse;
        "cancelBookingFormError": Partial<Notification>;
    }
    /**
     * The `nylas-cancel-booking-form` component is a UI component that allows users to cancel a booking.
     */
    interface HTMLNylasCancelBookingFormElement extends Components.NylasCancelBookingForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasCancelBookingFormElementEventMap>(type: K, listener: (this: HTMLNylasCancelBookingFormElement, ev: NylasCancelBookingFormCustomEvent<HTMLNylasCancelBookingFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasCancelBookingFormElementEventMap>(type: K, listener: (this: HTMLNylasCancelBookingFormElement, ev: NylasCancelBookingFormCustomEvent<HTMLNylasCancelBookingFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasCancelBookingFormElement: {
        prototype: HTMLNylasCancelBookingFormElement;
        new (): HTMLNylasCancelBookingFormElement;
    };
    interface HTMLNylasCancelledEventCardElementEventMap {
        "closeCancelEventCardClicked": { errorHandler?: (error: NylasSchedulerErrorResponse1) => void };
        "cancelledEventCardError": NylasSchedulerErrorResponse1;
    }
    /**
     * The `nylas-cancelled-event-card` component is a UI component that displays the cancelled event card.
     */
    interface HTMLNylasCancelledEventCardElement extends Components.NylasCancelledEventCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasCancelledEventCardElementEventMap>(type: K, listener: (this: HTMLNylasCancelledEventCardElement, ev: NylasCancelledEventCardCustomEvent<HTMLNylasCancelledEventCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasCancelledEventCardElementEventMap>(type: K, listener: (this: HTMLNylasCancelledEventCardElement, ev: NylasCancelledEventCardCustomEvent<HTMLNylasCancelledEventCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasCancelledEventCardElement: {
        prototype: HTMLNylasCancelledEventCardElement;
        new (): HTMLNylasCancelledEventCardElement;
    };
    interface HTMLNylasComposerElementEventMap {
        "close": MouseEvent;
        "send": {
    message: Message;
    replyBody: string;
  };
    }
    interface HTMLNylasComposerElement extends Components.NylasComposer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasComposerElementEventMap>(type: K, listener: (this: HTMLNylasComposerElement, ev: NylasComposerCustomEvent<HTMLNylasComposerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasComposerElementEventMap>(type: K, listener: (this: HTMLNylasComposerElement, ev: NylasComposerCustomEvent<HTMLNylasComposerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasComposerElement: {
        prototype: HTMLNylasComposerElement;
        new (): HTMLNylasComposerElement;
    };
    interface HTMLNylasCustomBookingFlowElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  };
    }
    /**
     * The `nylas-custom-booking-flow` component is a UI component that displays the booking calendar picker.
     */
    interface HTMLNylasCustomBookingFlowElement extends Components.NylasCustomBookingFlow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasCustomBookingFlowElementEventMap>(type: K, listener: (this: HTMLNylasCustomBookingFlowElement, ev: NylasCustomBookingFlowCustomEvent<HTMLNylasCustomBookingFlowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasCustomBookingFlowElementEventMap>(type: K, listener: (this: HTMLNylasCustomBookingFlowElement, ev: NylasCustomBookingFlowCustomEvent<HTMLNylasCustomBookingFlowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasCustomBookingFlowElement: {
        prototype: HTMLNylasCustomBookingFlowElement;
        new (): HTMLNylasCustomBookingFlowElement;
    };
    interface HTMLNylasDatePickerElementEventMap {
        "dateSelected": Date;
        "monthChanged": Date;
    }
    /**
     * The `nylas-date-picker` component is a UI component that allows users to select a date.
     */
    interface HTMLNylasDatePickerElement extends Components.NylasDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasDatePickerElementEventMap>(type: K, listener: (this: HTMLNylasDatePickerElement, ev: NylasDatePickerCustomEvent<HTMLNylasDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasDatePickerElementEventMap>(type: K, listener: (this: HTMLNylasDatePickerElement, ev: NylasDatePickerCustomEvent<HTMLNylasDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasDatePickerElement: {
        prototype: HTMLNylasDatePickerElement;
        new (): HTMLNylasDatePickerElement;
    };
    interface HTMLNylasEditorTabsElementEventMap {
        "schedulerConfigChanged": SchedulerEventDetail;
        "cancelButtonClick": void;
        "formSubmitted": void;
        "previewButtonClicked": HTMLNylasEditorTabsElement;
    }
    /**
     * The `nylas-editor-tabs` component is a UI component that displays the editor tabs for the scheduler editor.
     */
    interface HTMLNylasEditorTabsElement extends Components.NylasEditorTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasEditorTabsElementEventMap>(type: K, listener: (this: HTMLNylasEditorTabsElement, ev: NylasEditorTabsCustomEvent<HTMLNylasEditorTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasEditorTabsElementEventMap>(type: K, listener: (this: HTMLNylasEditorTabsElement, ev: NylasEditorTabsCustomEvent<HTMLNylasEditorTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasEditorTabsElement: {
        prototype: HTMLNylasEditorTabsElement;
        new (): HTMLNylasEditorTabsElement;
    };
    interface HTMLNylasEventDescriptionElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-event-description` component is a form input for the description of an event.
     */
    interface HTMLNylasEventDescriptionElement extends Components.NylasEventDescription, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasEventDescriptionElementEventMap>(type: K, listener: (this: HTMLNylasEventDescriptionElement, ev: NylasEventDescriptionCustomEvent<HTMLNylasEventDescriptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasEventDescriptionElementEventMap>(type: K, listener: (this: HTMLNylasEventDescriptionElement, ev: NylasEventDescriptionCustomEvent<HTMLNylasEventDescriptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasEventDescriptionElement: {
        prototype: HTMLNylasEventDescriptionElement;
        new (): HTMLNylasEventDescriptionElement;
    };
    interface HTMLNylasEventDurationElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-event-duration` component is a form input for the duration of an event.
     */
    interface HTMLNylasEventDurationElement extends Components.NylasEventDuration, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasEventDurationElementEventMap>(type: K, listener: (this: HTMLNylasEventDurationElement, ev: NylasEventDurationCustomEvent<HTMLNylasEventDurationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasEventDurationElementEventMap>(type: K, listener: (this: HTMLNylasEventDurationElement, ev: NylasEventDurationCustomEvent<HTMLNylasEventDurationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasEventDurationElement: {
        prototype: HTMLNylasEventDurationElement;
        new (): HTMLNylasEventDurationElement;
    };
    /**
     * The `nylas-event-info` component is a input form for the event information.
     */
    interface HTMLNylasEventInfoElement extends Components.NylasEventInfo, HTMLStencilElement {
    }
    var HTMLNylasEventInfoElement: {
        prototype: HTMLNylasEventInfoElement;
        new (): HTMLNylasEventInfoElement;
    };
    /**
     * The `nylas-event-limits` component is a input form for the event information.
     */
    interface HTMLNylasEventLimitsElement extends Components.NylasEventLimits, HTMLStencilElement {
    }
    var HTMLNylasEventLimitsElement: {
        prototype: HTMLNylasEventLimitsElement;
        new (): HTMLNylasEventLimitsElement;
    };
    interface HTMLNylasEventTitleElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-event-title` component is a form input for the title of an event.
     */
    interface HTMLNylasEventTitleElement extends Components.NylasEventTitle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasEventTitleElementEventMap>(type: K, listener: (this: HTMLNylasEventTitleElement, ev: NylasEventTitleCustomEvent<HTMLNylasEventTitleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasEventTitleElementEventMap>(type: K, listener: (this: HTMLNylasEventTitleElement, ev: NylasEventTitleCustomEvent<HTMLNylasEventTitleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasEventTitleElement: {
        prototype: HTMLNylasEventTitleElement;
        new (): HTMLNylasEventTitleElement;
    };
    /**
     * The `nylas-form-card` component is a card that can be used to display a form. It is a simple wrapper around a card with a header and content area.
     */
    interface HTMLNylasFormCardElement extends Components.NylasFormCard, HTMLStencilElement {
    }
    var HTMLNylasFormCardElement: {
        prototype: HTMLNylasFormCardElement;
        new (): HTMLNylasFormCardElement;
    };
    interface HTMLNylasIfStateElement extends Components.NylasIfState, HTMLStencilElement {
    }
    var HTMLNylasIfStateElement: {
        prototype: HTMLNylasIfStateElement;
        new (): HTMLNylasIfStateElement;
    };
    interface HTMLNylasLimitFutureBookingsElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-limit-future-bookings` component is a form input for the description of an event.
     */
    interface HTMLNylasLimitFutureBookingsElement extends Components.NylasLimitFutureBookings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasLimitFutureBookingsElementEventMap>(type: K, listener: (this: HTMLNylasLimitFutureBookingsElement, ev: NylasLimitFutureBookingsCustomEvent<HTMLNylasLimitFutureBookingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasLimitFutureBookingsElementEventMap>(type: K, listener: (this: HTMLNylasLimitFutureBookingsElement, ev: NylasLimitFutureBookingsCustomEvent<HTMLNylasLimitFutureBookingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasLimitFutureBookingsElement: {
        prototype: HTMLNylasLimitFutureBookingsElement;
        new (): HTMLNylasLimitFutureBookingsElement;
    };
    interface HTMLNylasListConfigurationsElementEventMap {
        "initListConfigurations": HTMLNylasListConfigurationsElement;
        "createButtonClick": HTMLNylasListConfigurationsElement;
        "editButtonClick": {
    host: HTMLNylasListConfigurationsElement;
    configuration: Configuration;
  };
        "deleteButtonClick": {
    host: HTMLNylasListConfigurationsElement;
    configuration: Configuration;
  };
    }
    /**
     * The `nylas-list-configurations` component displays a list of scheduling pages.
     */
    interface HTMLNylasListConfigurationsElement extends Components.NylasListConfigurations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasListConfigurationsElementEventMap>(type: K, listener: (this: HTMLNylasListConfigurationsElement, ev: NylasListConfigurationsCustomEvent<HTMLNylasListConfigurationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasListConfigurationsElementEventMap>(type: K, listener: (this: HTMLNylasListConfigurationsElement, ev: NylasListConfigurationsCustomEvent<HTMLNylasListConfigurationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasListConfigurationsElement: {
        prototype: HTMLNylasListConfigurationsElement;
        new (): HTMLNylasListConfigurationsElement;
    };
    interface HTMLNylasListFoldersElementEventMap {
        "folderSelected": Folder;
    }
    interface HTMLNylasListFoldersElement extends Components.NylasListFolders, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasListFoldersElementEventMap>(type: K, listener: (this: HTMLNylasListFoldersElement, ev: NylasListFoldersCustomEvent<HTMLNylasListFoldersElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasListFoldersElementEventMap>(type: K, listener: (this: HTMLNylasListFoldersElement, ev: NylasListFoldersCustomEvent<HTMLNylasListFoldersElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasListFoldersElement: {
        prototype: HTMLNylasListFoldersElement;
        new (): HTMLNylasListFoldersElement;
    };
    interface HTMLNylasListThreadsElementEventMap {
        "threadSelected": Thread;
    }
    interface HTMLNylasListThreadsElement extends Components.NylasListThreads, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasListThreadsElementEventMap>(type: K, listener: (this: HTMLNylasListThreadsElement, ev: NylasListThreadsCustomEvent<HTMLNylasListThreadsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasListThreadsElementEventMap>(type: K, listener: (this: HTMLNylasListThreadsElement, ev: NylasListThreadsCustomEvent<HTMLNylasListThreadsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasListThreadsElement: {
        prototype: HTMLNylasListThreadsElement;
        new (): HTMLNylasListThreadsElement;
    };
    interface HTMLNylasLocaleSwitchElementEventMap {
        "timezoneChanged": string;
        "languageChanged": string;
    }
    /**
     * The `nylas-locale-switch` component is a UI component that allows users to select a timezone and language.
     */
    interface HTMLNylasLocaleSwitchElement extends Components.NylasLocaleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasLocaleSwitchElementEventMap>(type: K, listener: (this: HTMLNylasLocaleSwitchElement, ev: NylasLocaleSwitchCustomEvent<HTMLNylasLocaleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasLocaleSwitchElementEventMap>(type: K, listener: (this: HTMLNylasLocaleSwitchElement, ev: NylasLocaleSwitchCustomEvent<HTMLNylasLocaleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasLocaleSwitchElement: {
        prototype: HTMLNylasLocaleSwitchElement;
        new (): HTMLNylasLocaleSwitchElement;
    };
    interface HTMLNylasLocationComponentElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-location-component` component is a form input for the description of an event.
     */
    interface HTMLNylasLocationComponentElement extends Components.NylasLocationComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasLocationComponentElementEventMap>(type: K, listener: (this: HTMLNylasLocationComponentElement, ev: NylasLocationComponentCustomEvent<HTMLNylasLocationComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasLocationComponentElementEventMap>(type: K, listener: (this: HTMLNylasLocationComponentElement, ev: NylasLocationComponentCustomEvent<HTMLNylasLocationComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasLocationComponentElement: {
        prototype: HTMLNylasLocationComponentElement;
        new (): HTMLNylasLocationComponentElement;
    };
    interface HTMLNylasLoginElementEventMap {
        "buttonClick": { url?: string };
    }
    interface HTMLNylasLoginElement extends Components.NylasLogin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasLoginElementEventMap>(type: K, listener: (this: HTMLNylasLoginElement, ev: NylasLoginCustomEvent<HTMLNylasLoginElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasLoginElementEventMap>(type: K, listener: (this: HTMLNylasLoginElement, ev: NylasLoginCustomEvent<HTMLNylasLoginElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasLoginElement: {
        prototype: HTMLNylasLoginElement;
        new (): HTMLNylasLoginElement;
    };
    interface HTMLNylasLogoElement extends Components.NylasLogo, HTMLStencilElement {
    }
    var HTMLNylasLogoElement: {
        prototype: HTMLNylasLogoElement;
        new (): HTMLNylasLogoElement;
    };
    interface HTMLNylasMailboxElementEventMap {
        "init": HTMLNylasMailboxElement;
        "loggedIn": HTMLNylasMailboxElement;
        "loggedOut": HTMLNylasMailboxElement;
    }
    /**
     * The Nylas Mailbox component.
     * This component is used as a provider for all other Nylas Mailbox components.
     * It is responsible for managing the NylasAuth and NylasMailboxConnector instances.
     * It also manages the state of the NylasAuth and NylasMailboxStore instances.
     * @example <nylas-mailbox
     *  auth-config={{
     *  clientId: 'YOUR_CLIENT_ID',
     *  }}
     * default-auth-store-state={{
     * threadQueryParams: {
     *  limit: 10,
     * }}
     * >
     *  <nylas-mailbox-thread-list></nylas-mailbox-thread-list>
     * </nylas-mailbox>
     */
    interface HTMLNylasMailboxElement extends Components.NylasMailbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasMailboxElementEventMap>(type: K, listener: (this: HTMLNylasMailboxElement, ev: NylasMailboxCustomEvent<HTMLNylasMailboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasMailboxElementEventMap>(type: K, listener: (this: HTMLNylasMailboxElement, ev: NylasMailboxCustomEvent<HTMLNylasMailboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasMailboxElement: {
        prototype: HTMLNylasMailboxElement;
        new (): HTMLNylasMailboxElement;
    };
    interface HTMLNylasMailboxPaginationElementEventMap {
        "next": PaginationEvent;
        "previous": PaginationEvent;
    }
    interface HTMLNylasMailboxPaginationElement extends Components.NylasMailboxPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasMailboxPaginationElementEventMap>(type: K, listener: (this: HTMLNylasMailboxPaginationElement, ev: NylasMailboxPaginationCustomEvent<HTMLNylasMailboxPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasMailboxPaginationElementEventMap>(type: K, listener: (this: HTMLNylasMailboxPaginationElement, ev: NylasMailboxPaginationCustomEvent<HTMLNylasMailboxPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasMailboxPaginationElement: {
        prototype: HTMLNylasMailboxPaginationElement;
        new (): HTMLNylasMailboxPaginationElement;
    };
    interface HTMLNylasMailboxToolbarButtonElement extends Components.NylasMailboxToolbarButton, HTMLStencilElement {
    }
    var HTMLNylasMailboxToolbarButtonElement: {
        prototype: HTMLNylasMailboxToolbarButtonElement;
        new (): HTMLNylasMailboxToolbarButtonElement;
    };
    interface HTMLNylasMinCancellationNoticeElementEventMap {
        "valueChanged": {
    value: string;
    name: string;
  };
    }
    /**
     * The `nylas-min-cancellation-notice` component is a form input for the description of an event.
     */
    interface HTMLNylasMinCancellationNoticeElement extends Components.NylasMinCancellationNotice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasMinCancellationNoticeElementEventMap>(type: K, listener: (this: HTMLNylasMinCancellationNoticeElement, ev: NylasMinCancellationNoticeCustomEvent<HTMLNylasMinCancellationNoticeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasMinCancellationNoticeElementEventMap>(type: K, listener: (this: HTMLNylasMinCancellationNoticeElement, ev: NylasMinCancellationNoticeCustomEvent<HTMLNylasMinCancellationNoticeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasMinCancellationNoticeElement: {
        prototype: HTMLNylasMinCancellationNoticeElement;
        new (): HTMLNylasMinCancellationNoticeElement;
    };
    /**
     * The `nylas-notification` component is a UI component that displays notifications.
     */
    interface HTMLNylasNotificationElement extends Components.NylasNotification, HTMLStencilElement {
    }
    var HTMLNylasNotificationElement: {
        prototype: HTMLNylasNotificationElement;
        new (): HTMLNylasNotificationElement;
    };
    interface HTMLNylasProviderElementEventMap {
        "init": HTMLNylasProviderElement;
        "loggedIn": HTMLNylasProviderElement;
        "loggedOut": HTMLNylasProviderElement;
    }
    /**
     * The Nylas Provider component.
     * This component is used to manage the Nylas Provider.
     * It is used to manage the Nylas Auth instance, the Nylas Connector instance,
     * and the Nylas Store instance.
     */
    interface HTMLNylasProviderElement extends Components.NylasProvider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasProviderElementEventMap>(type: K, listener: (this: HTMLNylasProviderElement, ev: NylasProviderCustomEvent<HTMLNylasProviderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasProviderElementEventMap>(type: K, listener: (this: HTMLNylasProviderElement, ev: NylasProviderCustomEvent<HTMLNylasProviderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasProviderElement: {
        prototype: HTMLNylasProviderElement;
        new (): HTMLNylasProviderElement;
    };
    interface HTMLNylasSchedulerEditorElementEventMap {
        "init": HTMLNylasSchedulerEditorElement;
        "loggedIn": HTMLNylasSchedulerEditorElement;
        "loggedOut": HTMLNylasSchedulerEditorElement;
        "schedulerConfigCloseClicked": HTMLNylasSchedulerEditorElement;
    }
    /**
     * The `nylas-scheduler-editor` component is a form that allows users to configure the settings for the Nylas Scheduler.
     */
    interface HTMLNylasSchedulerEditorElement extends Components.NylasSchedulerEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasSchedulerEditorElementEventMap>(type: K, listener: (this: HTMLNylasSchedulerEditorElement, ev: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasSchedulerEditorElementEventMap>(type: K, listener: (this: HTMLNylasSchedulerEditorElement, ev: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasSchedulerEditorElement: {
        prototype: HTMLNylasSchedulerEditorElement;
        new (): HTMLNylasSchedulerEditorElement;
    };
    interface HTMLNylasSchedulingElementEventMap {
        "init": HTMLNylasSchedulingElement;
        "schedulerWillLoad": HTMLNylasSchedulingElement;
        "schedulerDidLoad": HTMLNylasSchedulingElement;
        "nylasSchedulerError": Notification;
    }
    /**
     * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.
     */
    interface HTMLNylasSchedulingElement extends Components.NylasScheduling, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasSchedulingElementEventMap>(type: K, listener: (this: HTMLNylasSchedulingElement, ev: NylasSchedulingCustomEvent<HTMLNylasSchedulingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasSchedulingElementEventMap>(type: K, listener: (this: HTMLNylasSchedulingElement, ev: NylasSchedulingCustomEvent<HTMLNylasSchedulingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasSchedulingElement: {
        prototype: HTMLNylasSchedulingElement;
        new (): HTMLNylasSchedulingElement;
    };
    /**
     * The `nylas-selected-event-card` component is a UI component that displays the selected event card.
     */
    interface HTMLNylasSelectedEventCardElement extends Components.NylasSelectedEventCard, HTMLStencilElement {
    }
    var HTMLNylasSelectedEventCardElement: {
        prototype: HTMLNylasSelectedEventCardElement;
        new (): HTMLNylasSelectedEventCardElement;
    };
    interface HTMLNylasSummarizeMessageButtonElementEventMap {
        "summarize": SummarizeEvent;
    }
    interface HTMLNylasSummarizeMessageButtonElement extends Components.NylasSummarizeMessageButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasSummarizeMessageButtonElementEventMap>(type: K, listener: (this: HTMLNylasSummarizeMessageButtonElement, ev: NylasSummarizeMessageButtonCustomEvent<HTMLNylasSummarizeMessageButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasSummarizeMessageButtonElementEventMap>(type: K, listener: (this: HTMLNylasSummarizeMessageButtonElement, ev: NylasSummarizeMessageButtonCustomEvent<HTMLNylasSummarizeMessageButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasSummarizeMessageButtonElement: {
        prototype: HTMLNylasSummarizeMessageButtonElement;
        new (): HTMLNylasSummarizeMessageButtonElement;
    };
    interface HTMLNylasThreadsRefreshElementEventMap {
        "refresh": RefreshEvent;
    }
    interface HTMLNylasThreadsRefreshElement extends Components.NylasThreadsRefresh, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasThreadsRefreshElementEventMap>(type: K, listener: (this: HTMLNylasThreadsRefreshElement, ev: NylasThreadsRefreshCustomEvent<HTMLNylasThreadsRefreshElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasThreadsRefreshElementEventMap>(type: K, listener: (this: HTMLNylasThreadsRefreshElement, ev: NylasThreadsRefreshCustomEvent<HTMLNylasThreadsRefreshElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasThreadsRefreshElement: {
        prototype: HTMLNylasThreadsRefreshElement;
        new (): HTMLNylasThreadsRefreshElement;
    };
    interface HTMLNylasThreadsSearchElementEventMap {
        "search": string;
    }
    interface HTMLNylasThreadsSearchElement extends Components.NylasThreadsSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasThreadsSearchElementEventMap>(type: K, listener: (this: HTMLNylasThreadsSearchElement, ev: NylasThreadsSearchCustomEvent<HTMLNylasThreadsSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasThreadsSearchElementEventMap>(type: K, listener: (this: HTMLNylasThreadsSearchElement, ev: NylasThreadsSearchCustomEvent<HTMLNylasThreadsSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasThreadsSearchElement: {
        prototype: HTMLNylasThreadsSearchElement;
        new (): HTMLNylasThreadsSearchElement;
    };
    interface HTMLNylasTimeWindowPickerElementEventMap {
        "timeChange": {
    key: string;
    value: string;
  };
        "formError": {
    key: string;
    message: string;
  };
    }
    /**
     * The `nylas-time-window-picker` component is a time picker that can be used to select a time.
     */
    interface HTMLNylasTimeWindowPickerElement extends Components.NylasTimeWindowPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasTimeWindowPickerElementEventMap>(type: K, listener: (this: HTMLNylasTimeWindowPickerElement, ev: NylasTimeWindowPickerCustomEvent<HTMLNylasTimeWindowPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasTimeWindowPickerElementEventMap>(type: K, listener: (this: HTMLNylasTimeWindowPickerElement, ev: NylasTimeWindowPickerCustomEvent<HTMLNylasTimeWindowPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasTimeWindowPickerElement: {
        prototype: HTMLNylasTimeWindowPickerElement;
        new (): HTMLNylasTimeWindowPickerElement;
    };
    interface HTMLNylasTimeslotPickerElementEventMap {
        "timeslotSelected": Timeslot;
        "timeslotConfirmed": Timeslot;
    }
    /**
     * The `nylas-timeslot-picker` component is a UI component that allows users to select a timeslot from a list of available timeslots.
     */
    interface HTMLNylasTimeslotPickerElement extends Components.NylasTimeslotPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasTimeslotPickerElementEventMap>(type: K, listener: (this: HTMLNylasTimeslotPickerElement, ev: NylasTimeslotPickerCustomEvent<HTMLNylasTimeslotPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasTimeslotPickerElementEventMap>(type: K, listener: (this: HTMLNylasTimeslotPickerElement, ev: NylasTimeslotPickerCustomEvent<HTMLNylasTimeslotPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasTimeslotPickerElement: {
        prototype: HTMLNylasTimeslotPickerElement;
        new (): HTMLNylasTimeslotPickerElement;
    };
    interface HTMLNylasViewEmailElement extends Components.NylasViewEmail, HTMLStencilElement {
    }
    var HTMLNylasViewEmailElement: {
        prototype: HTMLNylasViewEmailElement;
        new (): HTMLNylasViewEmailElement;
    };
    interface HTMLNylasViewThreadElementEventMap {
        "threadSelected": Thread;
        "showContactDataClicked": Message;
        "messageClicked": Message;
    }
    interface HTMLNylasViewThreadElement extends Components.NylasViewThread, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNylasViewThreadElementEventMap>(type: K, listener: (this: HTMLNylasViewThreadElement, ev: NylasViewThreadCustomEvent<HTMLNylasViewThreadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNylasViewThreadElementEventMap>(type: K, listener: (this: HTMLNylasViewThreadElement, ev: NylasViewThreadCustomEvent<HTMLNylasViewThreadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNylasViewThreadElement: {
        prototype: HTMLNylasViewThreadElement;
        new (): HTMLNylasViewThreadElement;
    };
    interface HTMLPeopleIconElement extends Components.PeopleIcon, HTMLStencilElement {
    }
    var HTMLPeopleIconElement: {
        prototype: HTMLPeopleIconElement;
        new (): HTMLPeopleIconElement;
    };
    interface HTMLPlayIconElement extends Components.PlayIcon, HTMLStencilElement {
    }
    var HTMLPlayIconElement: {
        prototype: HTMLPlayIconElement;
        new (): HTMLPlayIconElement;
    };
    interface HTMLRefreshIconElement extends Components.RefreshIcon, HTMLStencilElement {
    }
    var HTMLRefreshIconElement: {
        prototype: HTMLRefreshIconElement;
        new (): HTMLRefreshIconElement;
    };
    interface HTMLReplyAllIconElement extends Components.ReplyAllIcon, HTMLStencilElement {
    }
    var HTMLReplyAllIconElement: {
        prototype: HTMLReplyAllIconElement;
        new (): HTMLReplyAllIconElement;
    };
    interface HTMLReplyIconElement extends Components.ReplyIcon, HTMLStencilElement {
    }
    var HTMLReplyIconElement: {
        prototype: HTMLReplyIconElement;
        new (): HTMLReplyIconElement;
    };
    interface HTMLSearchIconElement extends Components.SearchIcon, HTMLStencilElement {
    }
    var HTMLSearchIconElement: {
        prototype: HTMLSearchIconElement;
        new (): HTMLSearchIconElement;
    };
    interface HTMLSelectDropdownElementEventMap {
        "selectedOptionChanged": {
    value: DropdownOption['value'];
    name: string;
  };
    }
    /**
     * The `select-dropdown` component is a dropdown that allows users to select an option from a list of options.
     */
    interface HTMLSelectDropdownElement extends Components.SelectDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSelectDropdownElementEventMap>(type: K, listener: (this: HTMLSelectDropdownElement, ev: SelectDropdownCustomEvent<HTMLSelectDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSelectDropdownElementEventMap>(type: K, listener: (this: HTMLSelectDropdownElement, ev: SelectDropdownCustomEvent<HTMLSelectDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSelectDropdownElement: {
        prototype: HTMLSelectDropdownElement;
        new (): HTMLSelectDropdownElement;
    };
    interface HTMLSentIconElement extends Components.SentIcon, HTMLStencilElement {
    }
    var HTMLSentIconElement: {
        prototype: HTMLSentIconElement;
        new (): HTMLSentIconElement;
    };
    interface HTMLSpamIconElement extends Components.SpamIcon, HTMLStencilElement {
    }
    var HTMLSpamIconElement: {
        prototype: HTMLSpamIconElement;
        new (): HTMLSpamIconElement;
    };
    interface HTMLStarIconElement extends Components.StarIcon, HTMLStencilElement {
    }
    var HTMLStarIconElement: {
        prototype: HTMLStarIconElement;
        new (): HTMLStarIconElement;
    };
    interface HTMLStopIconElement extends Components.StopIcon, HTMLStencilElement {
    }
    var HTMLStopIconElement: {
        prototype: HTMLStopIconElement;
        new (): HTMLStopIconElement;
    };
    interface HTMLTimePeriodSelectorElementEventMap {
        "timePeriodChanged": { number: number; period: string };
    }
    interface HTMLTimePeriodSelectorElement extends Components.TimePeriodSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTimePeriodSelectorElementEventMap>(type: K, listener: (this: HTMLTimePeriodSelectorElement, ev: TimePeriodSelectorCustomEvent<HTMLTimePeriodSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTimePeriodSelectorElementEventMap>(type: K, listener: (this: HTMLTimePeriodSelectorElement, ev: TimePeriodSelectorCustomEvent<HTMLTimePeriodSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTimePeriodSelectorElement: {
        prototype: HTMLTimePeriodSelectorElement;
        new (): HTMLTimePeriodSelectorElement;
    };
    interface HTMLTooltipComponentElement extends Components.TooltipComponent, HTMLStencilElement {
    }
    var HTMLTooltipComponentElement: {
        prototype: HTMLTooltipComponentElement;
        new (): HTMLTooltipComponentElement;
    };
    interface HTMLTranslateIconElement extends Components.TranslateIcon, HTMLStencilElement {
    }
    var HTMLTranslateIconElement: {
        prototype: HTMLTranslateIconElement;
        new (): HTMLTranslateIconElement;
    };
    interface HTMLTrashIconElement extends Components.TrashIcon, HTMLStencilElement {
    }
    var HTMLTrashIconElement: {
        prototype: HTMLTrashIconElement;
        new (): HTMLTrashIconElement;
    };
    interface HTMLUnderlineIconElement extends Components.UnderlineIcon, HTMLStencilElement {
    }
    var HTMLUnderlineIconElement: {
        prototype: HTMLUnderlineIconElement;
        new (): HTMLUnderlineIconElement;
    };
    interface HTMLWarningIconElement extends Components.WarningIcon, HTMLStencilElement {
    }
    var HTMLWarningIconElement: {
        prototype: HTMLWarningIconElement;
        new (): HTMLWarningIconElement;
    };
    interface HTMLElementTagNameMap {
        "add-circle-icon": HTMLAddCircleIconElement;
        "archive-icon": HTMLArchiveIconElement;
        "arrow-icon": HTMLArrowIconElement;
        "bold-icon": HTMLBoldIconElement;
        "button-component": HTMLButtonComponentElement;
        "calendar-cancel-icon": HTMLCalendarCancelIconElement;
        "calendar-check-icon": HTMLCalendarCheckIconElement;
        "calendar-icon": HTMLCalendarIconElement;
        "calendar-info-icon": HTMLCalendarInfoIconElement;
        "calendar-patterns-icon": HTMLCalendarPatternsIconElement;
        "checkmark-circle-icon": HTMLCheckmarkCircleIconElement;
        "chevron-icon": HTMLChevronIconElement;
        "close-icon": HTMLCloseIconElement;
        "document-refresh-icon": HTMLDocumentRefreshIconElement;
        "flow-icon": HTMLFlowIconElement;
        "folder-icon": HTMLFolderIconElement;
        "forward-icon": HTMLForwardIconElement;
        "globe-icon": HTMLGlobeIconElement;
        "google-logo-icon": HTMLGoogleLogoIconElement;
        "inbox-icon": HTMLInboxIconElement;
        "info-icon": HTMLInfoIconElement;
        "italic-icon": HTMLItalicIconElement;
        "loading-icon": HTMLLoadingIconElement;
        "location-icon": HTMLLocationIconElement;
        "location-off-icon": HTMLLocationOffIconElement;
        "microsoft-logo-icon": HTMLMicrosoftLogoIconElement;
        "multi-select-dropdown": HTMLMultiSelectDropdownElement;
        "nylas-additional-participants": HTMLNylasAdditionalParticipantsElement;
        "nylas-availability-picker": HTMLNylasAvailabilityPickerElement;
        "nylas-booked-event-card": HTMLNylasBookedEventCardElement;
        "nylas-booking-calendar-picker": HTMLNylasBookingCalendarPickerElement;
        "nylas-booking-form": HTMLNylasBookingFormElement;
        "nylas-buffer-time": HTMLNylasBufferTimeElement;
        "nylas-calendar-picker": HTMLNylasCalendarPickerElement;
        "nylas-cancel-booking-form": HTMLNylasCancelBookingFormElement;
        "nylas-cancelled-event-card": HTMLNylasCancelledEventCardElement;
        "nylas-composer": HTMLNylasComposerElement;
        "nylas-custom-booking-flow": HTMLNylasCustomBookingFlowElement;
        "nylas-date-picker": HTMLNylasDatePickerElement;
        "nylas-editor-tabs": HTMLNylasEditorTabsElement;
        "nylas-event-description": HTMLNylasEventDescriptionElement;
        "nylas-event-duration": HTMLNylasEventDurationElement;
        "nylas-event-info": HTMLNylasEventInfoElement;
        "nylas-event-limits": HTMLNylasEventLimitsElement;
        "nylas-event-title": HTMLNylasEventTitleElement;
        "nylas-form-card": HTMLNylasFormCardElement;
        "nylas-if-state": HTMLNylasIfStateElement;
        "nylas-limit-future-bookings": HTMLNylasLimitFutureBookingsElement;
        "nylas-list-configurations": HTMLNylasListConfigurationsElement;
        "nylas-list-folders": HTMLNylasListFoldersElement;
        "nylas-list-threads": HTMLNylasListThreadsElement;
        "nylas-locale-switch": HTMLNylasLocaleSwitchElement;
        "nylas-location-component": HTMLNylasLocationComponentElement;
        "nylas-login": HTMLNylasLoginElement;
        "nylas-logo": HTMLNylasLogoElement;
        "nylas-mailbox": HTMLNylasMailboxElement;
        "nylas-mailbox-pagination": HTMLNylasMailboxPaginationElement;
        "nylas-mailbox-toolbar-button": HTMLNylasMailboxToolbarButtonElement;
        "nylas-min-cancellation-notice": HTMLNylasMinCancellationNoticeElement;
        "nylas-notification": HTMLNylasNotificationElement;
        "nylas-provider": HTMLNylasProviderElement;
        "nylas-scheduler-editor": HTMLNylasSchedulerEditorElement;
        "nylas-scheduling": HTMLNylasSchedulingElement;
        "nylas-selected-event-card": HTMLNylasSelectedEventCardElement;
        "nylas-summarize-message-button": HTMLNylasSummarizeMessageButtonElement;
        "nylas-threads-refresh": HTMLNylasThreadsRefreshElement;
        "nylas-threads-search": HTMLNylasThreadsSearchElement;
        "nylas-time-window-picker": HTMLNylasTimeWindowPickerElement;
        "nylas-timeslot-picker": HTMLNylasTimeslotPickerElement;
        "nylas-view-email": HTMLNylasViewEmailElement;
        "nylas-view-thread": HTMLNylasViewThreadElement;
        "people-icon": HTMLPeopleIconElement;
        "play-icon": HTMLPlayIconElement;
        "refresh-icon": HTMLRefreshIconElement;
        "reply-all-icon": HTMLReplyAllIconElement;
        "reply-icon": HTMLReplyIconElement;
        "search-icon": HTMLSearchIconElement;
        "select-dropdown": HTMLSelectDropdownElement;
        "sent-icon": HTMLSentIconElement;
        "spam-icon": HTMLSpamIconElement;
        "star-icon": HTMLStarIconElement;
        "stop-icon": HTMLStopIconElement;
        "time-period-selector": HTMLTimePeriodSelectorElement;
        "tooltip-component": HTMLTooltipComponentElement;
        "translate-icon": HTMLTranslateIconElement;
        "trash-icon": HTMLTrashIconElement;
        "underline-icon": HTMLUnderlineIconElement;
        "warning-icon": HTMLWarningIconElement;
    }
}
declare namespace LocalJSX {
    interface AddCircleIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ArchiveIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ArrowIcon {
        "height"?: string;
        "width"?: string;
    }
    interface BoldIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ButtonComponent {
        "blurHandler"?: (event: FocusEvent) => void;
        "clickHandler"?: (event: MouseEvent) => void;
        "disabled"?: boolean;
        "focusHandler"?: (event: FocusEvent) => void;
        "mouseOutHandler"?: (event: MouseEvent) => void;
        "mouseOverHandler"?: (event: MouseEvent) => void;
        "type"?: string;
        "variant"?: ButtonType;
    }
    interface CalendarCancelIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CalendarCheckIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CalendarIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CalendarInfoIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CalendarPatternsIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CheckmarkCircleIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ChevronIcon {
        "height"?: string;
        "width"?: string;
    }
    interface CloseIcon {
        "height"?: string;
        "width"?: string;
    }
    interface DocumentRefreshIcon {
        "height"?: string;
        "width"?: string;
    }
    interface FlowIcon {
        "height"?: string;
        "width"?: string;
    }
    interface FolderIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ForwardIcon {
        "height"?: string;
        "width"?: string;
    }
    interface GlobeIcon {
        "height"?: string;
        "width"?: string;
    }
    interface GoogleLogoIcon {
        "height"?: string;
        "width"?: string;
    }
    interface InboxIcon {
        "height"?: string;
        "width"?: string;
    }
    interface InfoIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ItalicIcon {
        "height"?: string;
        "width"?: string;
    }
    interface LoadingIcon {
        "height"?: string;
        "width"?: string;
    }
    interface LocationIcon {
        "height"?: string;
        "width"?: string;
    }
    interface LocationOffIcon {
        "height"?: string;
        "width"?: string;
    }
    interface MicrosoftLogoIcon {
        "height"?: string;
        "width"?: string;
    }
    interface MultiSelectDropdown {
        /**
          * The label of the dropdown
         */
        "label"?: string;
        /**
          * The name of the dropdown
         */
        "name": string;
        /**
          * This event is fired when the selected options are changed
         */
        "onSelectedOptionsChanged"?: (event: MultiSelectDropdownCustomEvent<{
    value: string[];
    name: string;
  }>) => void;
        /**
          * The options to display in the dropdown
         */
        "options"?: DropdownOption[];
    }
    /**
     * The `nylas-additional-participants` component is a form input for adding additional participants to an event.
     */
    interface NylasAdditionalParticipants {
        "eventParticipants"?: Participant[];
        "name"?: string;
    }
    /**
     * The `nylas-availability-picker` component is a form input for selecting availability (open hours).
     */
    interface NylasAvailabilityPicker {
        "defaultTimezone"?: string;
        /**
          * The name of the availability picker.
         */
        "name"?: string;
        /**
          * This event is fired when the selected availability / open hours change.
         */
        "onValueChanged"?: (event: NylasAvailabilityPickerCustomEvent<{
    value: {
      openHours: OpenHours[];
      timezone: string;
    };
    name: string;
  }>) => void;
        /**
          * The open hours to display.
         */
        "openHours"?: OpenHours[];
        /**
          * The selected configuration.
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-booked-event-card` component is a UI component that displays the booked event card.
     */
    interface NylasBookedEventCard {
        /**
          * The booking info used to book / reschedule the event.
         */
        "bookingInfo"?: NylasSchedulerBookingData;
        /**
          * The config settings for the scheduler.
         */
        "configSettings"?: ConfigSettings;
        /**
          * The booked event.
         */
        "eventInfo": NylasEvent;
        /**
          * This event is fired when an error occurs while cancelling the booking.
         */
        "onCancelBookedEventValidationError"?: (event: NylasBookedEventCardCustomEvent<{
    error: {
      title: string;
      message: string;
    };
  }>) => void;
        /**
          * Cancel booking button clicked event.
         */
        "onCancelBookingButtonClicked"?: (event: NylasBookedEventCardCustomEvent<{ bookingId: string }>) => void;
        /**
          * This event is fired when an error occurs while rescheduling the booking.
         */
        "onRescheduleBookedEventError"?: (event: NylasBookedEventCardCustomEvent<NylasSchedulerErrorResponse>) => void;
        /**
          * Reschedule button clicked event.
         */
        "onRescheduleButtonClicked"?: (event: NylasBookedEventCardCustomEvent<{ bookingId: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void }>) => void;
        /**
          * Booking flow type.
         */
        "rescheduleBookingId"?: string;
        /**
          * The selected timeslot.
         */
        "selectedTimeslot": Timeslot;
        /**
          * The selected timezone.
         */
        "selectedTimezone"?: string;
    }
    /**
     * The `nylas-booking-calendar-picker` component is a UI component that displays the booking calendar picker.
     */
    interface NylasBookingCalendarPicker {
        /**
          * The calendars to choose from.
         */
        "calendars"?: Calendar[];
        /**
          * The current logged in user.
         */
        "currentUser"?: User;
        /**
          * The default selected calendar.
         */
        "defaultBookingCalendar"?: string;
        /**
          * The name of the calendar picker.
         */
        "name"?: string;
        /**
          * This event is fired when the selected calendars change.
         */
        "onValueChanged"?: (event: NylasBookingCalendarPickerCustomEvent<{
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  }>) => void;
    }
    /**
     * The `nylas-booking-form` component is a UI component that allows users to book an event.
     * The booking form component.
     */
    interface NylasBookingForm {
        /**
          * The booking info.
         */
        "bookingInfo"?: NylasSchedulerBookingData;
        /**
          * The booked event (Used to track if a booking is created in an eventOverride).
         */
        "eventInfo"?: NylasEvent1;
        /**
          * The loading state.
         */
        "isLoading"?: boolean;
        /**
          * This event is fired when the cancel button is clicked.
         */
        "onBackButtonClicked"?: (event: NylasBookingFormCustomEvent<boolean>) => void;
        /**
          * This event is fired when an error occurs in the booking form.
         */
        "onBookingFormError"?: (event: NylasBookingFormCustomEvent<Partial<Notification>>) => void;
        /**
          * This event is fired when the book button is clicked.
         */
        "onDetailsConfirmed"?: (event: NylasBookingFormCustomEvent<NylasSchedulerBookingData>) => void;
        /**
          * This event is fired when the email is changed.
         */
        "onEmailChanged"?: (event: NylasBookingFormCustomEvent<string>) => void;
        /**
          * This event is fired when the name is changed.
         */
        "onNameChanged"?: (event: NylasBookingFormCustomEvent<string>) => void;
    }
    /**
     * The `nylas-buffer-time` component is a UI component that displays the booking calendar picker.
     */
    interface NylasBufferTime {
        /**
          * The buffer time
         */
        "buffer"?: { before: number; after: number };
        /**
          * The name of the calendar picker.
         */
        "name"?: string;
        /**
          * This event is fired when the selected calendars change.
         */
        "onValueChanged"?: (event: NylasBufferTimeCustomEvent<{
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  }>) => void;
    }
    /**
     * The `nylas-calendar-picker` component is a form input for selecting calendars.
     */
    interface NylasCalendarPicker {
        /**
          * The calendars to choose from.
         */
        "calendars"?: Calendar[];
        /**
          * The logged in user.
         */
        "currentUser"?: User;
        /**
          * The default selected calendars.
         */
        "defaultSelectedCalendars"?: string[];
        /**
          * The name of the calendar picker.
         */
        "name"?: string;
        /**
          * This event is fired when the selected calendars change.
         */
        "onValueChanged"?: (event: NylasCalendarPickerCustomEvent<{
    value: string[];
    name: string;
    valueChangedHandler?: (event: CustomEvent<{ value: string[]; name: string }>) => void;
  }>) => void;
    }
    /**
     * The `nylas-cancel-booking-form` component is a UI component that allows users to cancel a booking.
     */
    interface NylasCancelBookingForm {
        /**
          * The booking ID to cancel.
         */
        "cancelBookingId": string;
        /**
          * This event is fired when an error occurs while cancelling the booking.
         */
        "onCancelBookedEventError"?: (event: NylasCancelBookingFormCustomEvent<NylasSchedulerErrorResponse>) => void;
        /**
          * This event is fired when an error occurs in the booking form.
         */
        "onCancelBookingFormError"?: (event: NylasCancelBookingFormCustomEvent<Partial<Notification>>) => void;
        /**
          * This event is fired when the cancel booking form is submitted.
         */
        "onCancelBookingFormSubmitted"?: (event: NylasCancelBookingFormCustomEvent<{ bookingId: string; reason: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void }>) => void;
        /**
          * This event is fired when the Go back button is clicked on the cancel booking form.
         */
        "onGoBackButtonClicked"?: (event: NylasCancelBookingFormCustomEvent<void>) => void;
    }
    /**
     * The `nylas-cancelled-event-card` component is a UI component that displays the cancelled event card.
     */
    interface NylasCancelledEventCard {
        /**
          * The participant's name who booked the event / is logged in.
         */
        "cancelledEventInfo": Partial<NylasEvent1>;
        /**
          * The config settings for the scheduler.
         */
        "configSettings"?: ConfigSettings;
        /**
          * This event is fired when an error occurs.
         */
        "onCancelledEventCardError"?: (event: NylasCancelledEventCardCustomEvent<NylasSchedulerErrorResponse1>) => void;
        /**
          * This event is fired when the close button is clicked on the cancelled event card.
         */
        "onCloseCancelEventCardClicked"?: (event: NylasCancelledEventCardCustomEvent<{ errorHandler?: (error: NylasSchedulerErrorResponse1) => void }>) => void;
    }
    interface NylasComposer {
        /**
          * The message to reply to or forward
         */
        "message"?: Message;
        /**
          * Fired when the composer is closed
         */
        "onClose"?: (event: NylasComposerCustomEvent<MouseEvent>) => void;
        /**
          * Fired when the send button is clicked
         */
        "onSend"?: (event: NylasComposerCustomEvent<{
    message: Message;
    replyBody: string;
  }>) => void;
        /**
          * The view email element
         */
        "viewEmailElement"?: HTMLNylasViewEmailElement | null;
    }
    /**
     * The `nylas-custom-booking-flow` component is a UI component that displays the booking calendar picker.
     */
    interface NylasCustomBookingFlow {
        /**
          * The booking type.
         */
        "bookingType"?: string;
        /**
          * The name of the calendar picker.
         */
        "name"?: string;
        /**
          * This event is fired when the selected bookingType changes.
         */
        "onValueChanged"?: (event: NylasCustomBookingFlowCustomEvent<{
    value: string;
    name: string;
    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-date-picker` component is a UI component that allows users to select a date.
     */
    interface NylasDatePicker {
        /**
          * The config settings.
         */
        "configSettings"?: ConfigSettings;
        /**
          * The loading state.
         */
        "isLoading"?: boolean;
        /**
          * This event is fired when a date is selected.
         */
        "onDateSelected"?: (event: NylasDatePickerCustomEvent<Date>) => void;
        /**
          * This event is fired when the month is changed.
         */
        "onMonthChanged"?: (event: NylasDatePickerCustomEvent<Date>) => void;
        /**
          * The dates that are selectable.
         */
        "selectableDates"?: Date[];
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
    }
    /**
     * The `nylas-editor-tabs` component is a UI component that displays the editor tabs for the scheduler editor.
     */
    interface NylasEditorTabs {
        /**
          * The list of calendars to use in the editor when configuring availability.
         */
        "calendars"?: Calendar[];
        /**
          * The current logged in user.
         */
        "currentUser"?: User;
        /**
          * The default require session auth flag to used to set the default value for the requireSessionAuth property when creating a configuration. If set to true, then a session token must be provided to the <nylas-scheduling/> component. If set to false, then a session token is not required and the configuration id can passed to the <nylas-scheduling/> component instead.
         */
        "defaultRequiresSessionAuth"?: boolean;
        /**
          * The mode of the editor. - `app`: The editor is used as a standalone app. - `composable`: The editor is used as a composable component.
         */
        "mode"?: 'app' | 'composable';
        /**
          * Event emitted when the user clicks the cancel button.
         */
        "onCancelButtonClick"?: (event: NylasEditorTabsCustomEvent<void>) => void;
        /**
          * Event emitted on form submission.
         */
        "onFormSubmitted"?: (event: NylasEditorTabsCustomEvent<void>) => void;
        /**
          * Event emitted when the user clicks the cancel button.
         */
        "onPreviewButtonClicked"?: (event: NylasEditorTabsCustomEvent<HTMLNylasEditorTabsElement>) => void;
        /**
          * Event emitted when the configuration is changed.
         */
        "onSchedulerConfigChanged"?: (event: NylasEditorTabsCustomEvent<SchedulerEventDetail>) => void;
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use a placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink"?: string;
        /**
          * The selected configuration to use in the editor when editing an existing configuration or creating a new one.
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-description` component is a form input for the description of an event.
     */
    interface NylasEventDescription {
        /**
          * The event description stored in the configuration
         */
        "eventDescription"?: string;
        /**
          * The name of the event description input.
         */
        "name"?: string;
        /**
          * Event emitted when the event description changes.
         */
        "onValueChanged"?: (event: NylasEventDescriptionCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-duration` component is a form input for the duration of an event.
     */
    interface NylasEventDuration {
        /**
          * The event duration in minutes as set in the configuration.
         */
        "eventDurationMinutes"?: number;
        /**
          * The name of the event duration. Default is 'duration'.
         */
        "name"?: string;
        /**
          * Event emitted when the event duration changes.
         */
        "onValueChanged"?: (event: NylasEventDurationCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-event-info` component is a input form for the event information.
     */
    interface NylasEventInfo {
    }
    /**
     * The `nylas-event-limits` component is a input form for the event information.
     */
    interface NylasEventLimits {
    }
    /**
     * The `nylas-event-title` component is a form input for the title of an event.
     */
    interface NylasEventTitle {
        /**
          * The title of the event from the cofiguration.
         */
        "eventTitle"?: string;
        /**
          * The name attribute of this component.
         */
        "name"?: string;
        /**
          * This event is fired when the value of the event title changes.
         */
        "onValueChanged"?: (event: NylasEventTitleCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-form-card` component is a card that can be used to display a form. It is a simple wrapper around a card with a header and content area.
     */
    interface NylasFormCard {
    }
    interface NylasIfState {
        "getStore"?: <K extends keyof Stores>(name: K) => Stores[K];
        /**
          * If true, then the component will render if the state is true. This prop is used with the `state` prop.
         */
        "isBoolean"?: boolean;
        /**
          * If true, then the component will render if the state is set (empty or not set). This prop is used with the `state` prop.
         */
        "isStateSet"?: boolean;
        /**
          * The name of the state to watch.
         */
        "state"?: string;
        "transition"?: Transitions;
    }
    /**
     * The `nylas-limit-future-bookings` component is a form input for the description of an event.
     */
    interface NylasLimitFutureBookings {
        /**
          * The number of days into the future that invitees will see availability, as set in the configuration.
         */
        "availableDaysInFuture"?: number;
        /**
          * The name of the limit future bookings input.
         */
        "name"?: string;
        /**
          * Event emitted when the future booking limit changes.
         */
        "onValueChanged"?: (event: NylasLimitFutureBookingsCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-list-configurations` component displays a list of scheduling pages.
     */
    interface NylasListConfigurations {
        /**
          * The list of configurations to display.
         */
        "configurations"?: Configuration[];
        /**
          * Event emitted when the user clicks the create event button.
         */
        "onCreateButtonClick"?: (event: NylasListConfigurationsCustomEvent<HTMLNylasListConfigurationsElement>) => void;
        /**
          * Event emitted when the user clicks the delete event button.
         */
        "onDeleteButtonClick"?: (event: NylasListConfigurationsCustomEvent<{
    host: HTMLNylasListConfigurationsElement;
    configuration: Configuration;
  }>) => void;
        /**
          * Event emitted when the user clicks the edit event button.
         */
        "onEditButtonClick"?: (event: NylasListConfigurationsCustomEvent<{
    host: HTMLNylasListConfigurationsElement;
    configuration: Configuration;
  }>) => void;
        /**
          * Event emitted when the component is initialized.
         */
        "onInitListConfigurations"?: (event: NylasListConfigurationsCustomEvent<HTMLNylasListConfigurationsElement>) => void;
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use a placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink"?: string;
    }
    interface NylasListFolders {
        "folders"?: Folder[];
        "onFolderSelected"?: (event: NylasListFoldersCustomEvent<Folder>) => void;
        "selectedFolder"?: string;
    }
    interface NylasListThreads {
        "isAuthenticated"?: boolean;
        "onThreadSelected"?: (event: NylasListThreadsCustomEvent<Thread>) => void;
        "showCheckbox"?: boolean;
        "state"?: DataState;
        "threads"?: Thread[];
        "tokenInfo"?: TokenInfo;
    }
    /**
     * The `nylas-locale-switch` component is a UI component that allows users to select a timezone and language.
     */
    interface NylasLocaleSwitch {
        /**
          * This event is fired when the language is changed.
         */
        "onLanguageChanged"?: (event: NylasLocaleSwitchCustomEvent<string>) => void;
        /**
          * This event is fired when the timezone is changed.
         */
        "onTimezoneChanged"?: (event: NylasLocaleSwitchCustomEvent<string>) => void;
        /**
          * The selected language.
         */
        "selectedLanguage"?: string;
        /**
          * The selected timezone.
         */
        "selectedTimezone"?: string;
    }
    /**
     * The `nylas-location-component` component is a form input for the description of an event.
     */
    interface NylasLocationComponent {
        /**
          * The event location stored in the configuration
         */
        "eventLocation"?: string;
        /**
          * The name of the event location input.
         */
        "name"?: string;
        "onValueChanged"?: (event: NylasLocationComponentCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    interface NylasLogin {
        "buttonText"?: string;
        "companyName"?: string;
        "isAuthenticated"?: boolean;
        "loginMethod"?: 'redirect' | 'emebded';
        "logoUrl"?: string;
        "logoWidth"?: string;
        "nylasConnector"?: NylasAuthConnectorInterface;
        "onButtonClick"?: (event: NylasLoginCustomEvent<{ url?: string }>) => void;
        "providers"?: string;
        "scopes"?: string[];
    }
    interface NylasLogo {
        "height"?: string;
        "width"?: string;
    }
    /**
     * The Nylas Mailbox component.
     * This component is used as a provider for all other Nylas Mailbox components.
     * It is responsible for managing the NylasAuth and NylasMailboxConnector instances.
     * It also manages the state of the NylasAuth and NylasMailboxStore instances.
     * @example <nylas-mailbox
     *  auth-config={{
     *  clientId: 'YOUR_CLIENT_ID',
     *  }}
     * default-auth-store-state={{
     * threadQueryParams: {
     *  limit: 10,
     * }}
     * >
     *  <nylas-mailbox-thread-list></nylas-mailbox-thread-list>
     * </nylas-mailbox>
     */
    interface NylasMailbox {
        /**
          * The Nylas Auth configuration. Used to manage all things authentication with Nylas.
         */
        "authConfig"?: AuthConfig;
        /**
          * Automatically register components that have the `@RegisterComponent` decorator. If this is set to false, you will need to manually register components using the `registerComponent` method.
         */
        "automaticComponentRegistration"?: boolean;
        /**
          * The default auth store state. Used to set the initial state of the auth store.
         */
        "defaultAuthStoreState"?: NylasAuthStoreState;
        /**
          * The default mailbox store state. Used to set the initial state of the mailbox store.
         */
        "defaultMailboxStoreState"?: NylasMailboxStoreState;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides"?: EventOverride<Exclude<typeof this.nylasMailboxConnector, undefined>>;
        /**
          * This event is fired when the provider is initialized. It can be used to set the initial state of the provider, or to prevent the provider from firing some default behavior.
         */
        "onInit"?: (event: NylasMailboxCustomEvent<HTMLNylasMailboxElement>) => void;
        /**
          * This event is fired when the the NyalsAuth isAuthenticated state changes to true.
         */
        "onLoggedIn"?: (event: NylasMailboxCustomEvent<HTMLNylasMailboxElement>) => void;
        /**
          * This event is fired when the the NyalsAuth isAuthenticated state changes to true.
         */
        "onLoggedOut"?: (event: NylasMailboxCustomEvent<HTMLNylasMailboxElement>) => void;
    }
    interface NylasMailboxPagination {
        /**
          * @description Whether or not the mailbox has a next or previous page of threads
         */
        "hasNextPage"?: boolean;
        /**
          * @description Whether or not the mailbox has a previous page of threads
         */
        "hasPreviousPage"?: boolean;
        /**
          * @description Whether or not the infinity scroll should only be enabled on mobile devices
         */
        "mobileOnlyInfiniteScroll"?: boolean;
        /**
          * @description The width of the mobile viewport
         */
        "mobileViewPortWidth"?: number;
        /**
          * @description An event that is fired when the user scrolls to the bottom of the page
         */
        "onNext"?: (event: NylasMailboxPaginationCustomEvent<PaginationEvent>) => void;
        /**
          * @description An event that is fired when the user scrolls to the top of the page
         */
        "onPrevious"?: (event: NylasMailboxPaginationCustomEvent<PaginationEvent>) => void;
        /**
          * @description Whether or not the mailbox has a next or previous page of threads
         */
        "scrollTarget"?: 'container' | 'page';
        /**
          * @description The state of the mailbox
         */
        "state"?: 'ready' | 'loading' | 'error';
    }
    interface NylasMailboxToolbarButton {
        /**
          * The value of the state to compare against to check if the data is loading, error, or ready.
         */
        "dataState"?: string;
        /**
          * If true, then the component will render the icon only.
         */
        "iconOnly"?: boolean;
        /**
          * If true, then the component will render if the state is true. This prop is used with the `state` prop.
         */
        "mailboxConnector"?: NylasMailboxConnectorInterface;
        /**
          * The name of the mailbox connector method to call.
         */
        "method": MethodsOfNylasMailboxConnector;
    }
    /**
     * The `nylas-min-cancellation-notice` component is a form input for the description of an event.
     */
    interface NylasMinCancellationNotice {
        /**
          * The minimum cancellation notice stored in the configuration
         */
        "minCancellationNotice"?: number;
        /**
          * The name of the min cancellation notice input.
         */
        "name"?: string;
        "onValueChanged"?: (event: NylasMinCancellationNoticeCustomEvent<{
    value: string;
    name: string;
  }>) => void;
        /**
          * The selected config
         */
        "selectedConfiguration"?: Configuration;
    }
    /**
     * The `nylas-notification` component is a UI component that displays notifications.
     */
    interface NylasNotification {
        "allowedCategories"?: string[];
        /**
          * The time-to-live for notifications in milliseconds. Set to 'none' to disable auto-dismissal.
         */
        "ttl"?: number | 'none';
    }
    /**
     * The Nylas Provider component.
     * This component is used to manage the Nylas Provider.
     * It is used to manage the Nylas Auth instance, the Nylas Connector instance,
     * and the Nylas Store instance.
     */
    interface NylasProvider {
        /**
          * The Nylas Auth configuration. Used to manage all things authentication with Nylas.
         */
        "authConfig"?: AuthConfig;
        /**
          * Automatically register components that have the `@RegisterComponent` decorator. If this is set to false, you will need to manually register components using the `registerComponent` method.
          * @default true
         */
        "automaticComponentRegistration"?: boolean;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides"?: EventOverride<Exclude<typeof this.nylasConnector, undefined>>;
        /**
          * This event is fired when the provider is initialized. It can be used to set the initial state of the provider, or to prevent the provider from firing some default behavior.
         */
        "onInit"?: (event: NylasProviderCustomEvent<HTMLNylasProviderElement>) => void;
        /**
          * This event is fired when the the NyalsAuth isAuthenticated state changes to true.
         */
        "onLoggedIn"?: (event: NylasProviderCustomEvent<HTMLNylasProviderElement>) => void;
        /**
          * This event is fired when the the NyalsAuth isAuthenticated state changes to true.
         */
        "onLoggedOut"?: (event: NylasProviderCustomEvent<HTMLNylasProviderElement>) => void;
    }
    /**
     * The `nylas-scheduler-editor` component is a form that allows users to configure the settings for the Nylas Scheduler.
     */
    interface NylasSchedulerEditor {
        /**
          * * The configuration id to use for the scheduler editor. If provided, then the scheduler editor will try and fetch the configuration with the provided id. If found, it will automatically load the editor with the configuration settings for editing.
         */
        "configurationId"?: string;
        /**
          * The default authentication arguments to use when authenticating a user.
         */
        "defaultAuthArgs"?: AuthArgs;
        /**
          * The default requires_session_auth flag to use to set the default value for the requireSessionAuth property when creating a configuration. If set to true, a session token must be provided to the <nylas-scheduling/> component. If set to false, then a session token is not required, and the configuration id can be passed to the <nylas-scheduling/> component instead.
         */
        "defaultRequiresSessionAuth"?: boolean;
        /**
          * The default scheduler config store state. Used to set the initial state of the scheduler config store. This state can be used to pass defaults to newly created configurations.
         */
        "defaultSchedulerConfigState"?: Partial<NylasSchedulerConfigStoreState>;
        /**
          * This provides a way to override the default event handlers.
         */
        "eventOverrides"?: SchedulerEditorEventOverride;
        /**
          * This is used to set the mode for the scheduler config. The mode can be 'app' or 'composable'. The default mode is 'app'.
         */
        "mode"?: 'app' | 'composable';
        /**
          * The Nylas Api Request instance. Used to make requests to the Nylas API.
         */
        "nylasApiRequest"?: NylasApiRequest;
        /**
          * The Nylas Sessions configuration. Used to configure the Nylas Sessions instance.
         */
        "nylasSessionsConfig"?: Config;
        /**
          * This event is fired when the provider is initialized. By default, this event handles determining if the user is logged in or not. In addition, it fetches the provided configuration if a valid configuration id is provided.
         */
        "onInit"?: (event: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElement>) => void;
        /**
          * This event is fired when the the NylasAuth isAuthenticated state changes to true.
         */
        "onLoggedIn"?: (event: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElement>) => void;
        /**
          * This event is fired when the the NylasAuth isAuthenticated state changes to true.
         */
        "onLoggedOut"?: (event: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElement>) => void;
        /**
          * This event is fired when the close button on scheduler config is clicked.
         */
        "onSchedulerConfigCloseClicked"?: (event: NylasSchedulerEditorCustomEvent<HTMLNylasSchedulerEditorElement>) => void;
        /**
          * The scheduler preview link to use when the user clicks on the preview button. You can use the placeholder `{config.id}` to replace the configuration id anywhere in the link.
         */
        "schedulerPreviewLink"?: string;
    }
    /**
     * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.
     */
    interface NylasScheduling {
        /**
          * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation. When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately invokes the handler after booking.
         */
        "bookingInfo"?: NylasSchedulerBookingData1;
        /**
          * Booking Id required for cancelling flow.
         */
        "cancelBookingId"?: string;
        /**
          * The config ID for the Nylas Scheduler. This should be passed in when using a public config, in which case the sessionId is not required.
         */
        "configurationId"?: string;
        /**
          * The default scheduler store state. Used to set the initial state of the scheduler store.
         */
        "defaultSchedulerState"?: Partial<NylasSchedulerStoreState>;
        /**
          * This provides an easy way to override the default function of the event emitter. An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like: ```html <nylas-scheduling eventOverride={{"timeslotConfirmed": (event, nylasConnector) => { console.log("Timeslot confirmed event fired!"); } }} /> ```
         */
        "eventOverrides"?: SchedulerEventOverride;
        /**
          * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.
         */
        "isLoading"?: boolean;
        /**
          * This is used to set the mode for the Nylas Scheduler. The mode can be either `app` or `composable`. The default mode is `app`. - `app`: This mode is used to show the default Nylas Scheduler UI. - `composable`: This mode is used to show the composable Nylas Scheduler UI    by passing the individual scheduler components as children.
         */
        "mode"?: 'app' | 'composable';
        /**
          * This prop lets you hide the Nylas branding. Default is true.
         */
        "nylasBranding"?: boolean;
        /**
          * This event is fired when the provider is initialized. It can be used to set the initial state of the provider, or to prevent the provider from firing some default behavior.
         */
        "onInit"?: (event: NylasSchedulingCustomEvent<HTMLNylasSchedulingElement>) => void;
        "onNylasSchedulerError"?: (event: NylasSchedulingCustomEvent<Notification>) => void;
        /**
          * This event is fired when the scheduler component enters componentDidLoad lifecycle.
         */
        "onSchedulerDidLoad"?: (event: NylasSchedulingCustomEvent<HTMLNylasSchedulingElement>) => void;
        /**
          * This event is fired when the scheduler component enters componentWillLoad lifecycle.
         */
        "onSchedulerWillLoad"?: (event: NylasSchedulingCustomEvent<HTMLNylasSchedulingElement>) => void;
        /**
          * Booking Id required for rescheduling flow.
         */
        "rescheduleBookingId"?: string;
        /**
          * The URL for the Nylas Scheduler API. (staging or production URL)
         */
        "schedulerApiUrl"?: string;
        /**
          * The session ID for the Nylas Scheduler. This is used to authenticate the user.
         */
        "sessionId"?: string;
        "showNotification"?: boolean;
        /**
          * Theme config, used to automatically generate a theme with color palette and CSS variables to customize the look and feel of the Nylas Scheduler.
         */
        "themeConfig"?: ThemeConfig;
    }
    /**
     * The `nylas-selected-event-card` component is a UI component that displays the selected event card.
     */
    interface NylasSelectedEventCard {
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
        /**
          * The selected time.
         */
        "selectedTimeslot"?: Timeslot;
        /**
          * * The selected timezone.
         */
        "selectedTimezone"?: string;
    }
    interface NylasSummarizeMessageButton {
        /**
          * The message to summarize
         */
        "message"?: Message;
        /**
          * The on summarize event handler
         */
        "onSummarize"?: (event: NylasSummarizeMessageButtonCustomEvent<SummarizeEvent>) => void;
    }
    interface NylasThreadsRefresh {
        "onRefresh"?: (event: NylasThreadsRefreshCustomEvent<RefreshEvent>) => void;
    }
    interface NylasThreadsSearch {
        /**
          * Event emitted when the query changes
         */
        "onSearch"?: (event: NylasThreadsSearchCustomEvent<string>) => void;
        /**
          * The query to search for threads
         */
        "query"?: string;
    }
    /**
     * The `nylas-time-window-picker` component is a time picker that can be used to select a time.
     */
    interface NylasTimeWindowPicker {
        /**
          * This sets the error state of the input.
         */
        "hasError"?: boolean;
        /**
          * This is the start time value if one is set by the parent component. It is useful if this component is used to render an end time which should not be before the start time, defining the earliest selectable time.
         */
        "minimumStartTime"?: string | null;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * This event is fired when the form has an error. The parent component can listen for this event and display an error message or set form validity.
         */
        "onFormError"?: (event: NylasTimeWindowPickerCustomEvent<{
    key: string;
    message: string;
  }>) => void;
        /**
          * This event is fired when the time is changed.
         */
        "onTimeChange"?: (event: NylasTimeWindowPickerCustomEvent<{
    key: string;
    value: string;
  }>) => void;
        /**
          * The placeholder text for the input.
         */
        "placeholder"?: string;
        /**
          * The time to display in the input. This is passed by the parent component and can be updated using the setTime prop function provided by the parent component.
         */
        "time": string;
    }
    /**
     * The `nylas-timeslot-picker` component is a UI component that allows users to select a timeslot from a list of available timeslots.
     */
    interface NylasTimeslotPicker {
        /**
          * The available timeslots.
         */
        "availability"?: AvailabilityTimeslot[];
        /**
          * The loading state prop. Used to display loading state when fetching availability.
         */
        "isLoading"?: boolean;
        /**
          * This event is fired when a timeslot is confirmed. By default, this will proceed to the booking form page.
         */
        "onTimeslotConfirmed"?: (event: NylasTimeslotPickerCustomEvent<Timeslot>) => void;
        /**
          * This event is fired when a timeslot is selected.
         */
        "onTimeslotSelected"?: (event: NylasTimeslotPickerCustomEvent<Timeslot>) => void;
        /**
          * The selected date.
         */
        "selectedDate"?: Date;
        /**
          * The selected timeslot.
         */
        "selectedTimeslot"?: Timeslot;
        /**
          * The selected timezone.
         */
        "selectedTimezone"?: string;
    }
    interface NylasViewEmail {
        "attachments"?: InternalAttachment[];
        "detectDarkMode"?: boolean;
        "message"?: Message;
        "parent"?: HTMLElement;
    }
    interface NylasViewThread {
        /**
          * Attachments for each message within the thread
         */
        "attachments"?: InternalAttachment[];
        /**
          * The draft message to display
         */
        "draft"?: Message;
        /**
          * Messages within the thread to display
         */
        "messages"?: Message[];
        /**
          * Event emitted when a message is clicked
         */
        "onMessageClicked"?: (event: NylasViewThreadCustomEvent<Message>) => void;
        /**
          * Event emitted when a message contact data is clicked
         */
        "onShowContactDataClicked"?: (event: NylasViewThreadCustomEvent<Message>) => void;
        /**
          * Event emitted when a thread is selected
         */
        "onThreadSelected"?: (event: NylasViewThreadCustomEvent<Thread>) => void;
        /**
          * Thread to display
         */
        "thread"?: Thread;
    }
    interface PeopleIcon {
        "height"?: string;
        "width"?: string;
    }
    interface PlayIcon {
        "height"?: string;
        "width"?: string;
    }
    interface RefreshIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ReplyAllIcon {
        "height"?: string;
        "width"?: string;
    }
    interface ReplyIcon {
        "height"?: string;
        "width"?: string;
    }
    interface SearchIcon {
        "height"?: string;
        "width"?: string;
    }
    /**
     * The `select-dropdown` component is a dropdown that allows users to select an option from a list of options.
     */
    interface SelectDropdown {
        /**
          * The default selected option
         */
        "defaultSelectedOption"?: DropdownOption;
        /**
          * The name of the dropdown
         */
        "name": string;
        /**
          * This event is fired when the selected option is changed
         */
        "onSelectedOptionChanged"?: (event: SelectDropdownCustomEvent<{
    value: DropdownOption['value'];
    name: string;
  }>) => void;
        /**
          * The options to display in the dropdown
         */
        "options"?: DropdownOption[];
        /**
          * Show pluralized label for the selected option. This is s tring that is appended to the selected option label as a suffix.
         */
        "pluralizedLabel"?: string;
        /**
          * Should show search input
         */
        "withSearch"?: boolean;
    }
    interface SentIcon {
        "height"?: string;
        "width"?: string;
    }
    interface SpamIcon {
        "height"?: string;
        "width"?: string;
    }
    interface StarIcon {
        "height"?: string;
        "width"?: string;
    }
    interface StopIcon {
        "height"?: string;
        "width"?: string;
    }
    interface TimePeriodSelector {
        /**
          * The default selected number.
         */
        "defaultSelectedNumber"?: number;
        /**
          * The default selected time period.
         */
        "defaultSelectedPeriod"?: string;
        "onTimePeriodChanged"?: (event: TimePeriodSelectorCustomEvent<{ number: number; period: string }>) => void;
        "timePeriods"?: string[];
    }
    interface TooltipComponent {
        /**
          * The position of the tooltip.
         */
        "position"?: 'top' | 'bottom' | 'left' | 'right';
    }
    interface TranslateIcon {
        "height"?: string;
        "width"?: string;
    }
    interface TrashIcon {
        "height"?: string;
        "width"?: string;
    }
    interface UnderlineIcon {
        "height"?: string;
        "width"?: string;
    }
    interface WarningIcon {
        "height"?: string;
        "width"?: string;
    }
    interface IntrinsicElements {
        "add-circle-icon": AddCircleIcon;
        "archive-icon": ArchiveIcon;
        "arrow-icon": ArrowIcon;
        "bold-icon": BoldIcon;
        "button-component": ButtonComponent;
        "calendar-cancel-icon": CalendarCancelIcon;
        "calendar-check-icon": CalendarCheckIcon;
        "calendar-icon": CalendarIcon;
        "calendar-info-icon": CalendarInfoIcon;
        "calendar-patterns-icon": CalendarPatternsIcon;
        "checkmark-circle-icon": CheckmarkCircleIcon;
        "chevron-icon": ChevronIcon;
        "close-icon": CloseIcon;
        "document-refresh-icon": DocumentRefreshIcon;
        "flow-icon": FlowIcon;
        "folder-icon": FolderIcon;
        "forward-icon": ForwardIcon;
        "globe-icon": GlobeIcon;
        "google-logo-icon": GoogleLogoIcon;
        "inbox-icon": InboxIcon;
        "info-icon": InfoIcon;
        "italic-icon": ItalicIcon;
        "loading-icon": LoadingIcon;
        "location-icon": LocationIcon;
        "location-off-icon": LocationOffIcon;
        "microsoft-logo-icon": MicrosoftLogoIcon;
        "multi-select-dropdown": MultiSelectDropdown;
        "nylas-additional-participants": NylasAdditionalParticipants;
        "nylas-availability-picker": NylasAvailabilityPicker;
        "nylas-booked-event-card": NylasBookedEventCard;
        "nylas-booking-calendar-picker": NylasBookingCalendarPicker;
        "nylas-booking-form": NylasBookingForm;
        "nylas-buffer-time": NylasBufferTime;
        "nylas-calendar-picker": NylasCalendarPicker;
        "nylas-cancel-booking-form": NylasCancelBookingForm;
        "nylas-cancelled-event-card": NylasCancelledEventCard;
        "nylas-composer": NylasComposer;
        "nylas-custom-booking-flow": NylasCustomBookingFlow;
        "nylas-date-picker": NylasDatePicker;
        "nylas-editor-tabs": NylasEditorTabs;
        "nylas-event-description": NylasEventDescription;
        "nylas-event-duration": NylasEventDuration;
        "nylas-event-info": NylasEventInfo;
        "nylas-event-limits": NylasEventLimits;
        "nylas-event-title": NylasEventTitle;
        "nylas-form-card": NylasFormCard;
        "nylas-if-state": NylasIfState;
        "nylas-limit-future-bookings": NylasLimitFutureBookings;
        "nylas-list-configurations": NylasListConfigurations;
        "nylas-list-folders": NylasListFolders;
        "nylas-list-threads": NylasListThreads;
        "nylas-locale-switch": NylasLocaleSwitch;
        "nylas-location-component": NylasLocationComponent;
        "nylas-login": NylasLogin;
        "nylas-logo": NylasLogo;
        "nylas-mailbox": NylasMailbox;
        "nylas-mailbox-pagination": NylasMailboxPagination;
        "nylas-mailbox-toolbar-button": NylasMailboxToolbarButton;
        "nylas-min-cancellation-notice": NylasMinCancellationNotice;
        "nylas-notification": NylasNotification;
        "nylas-provider": NylasProvider;
        "nylas-scheduler-editor": NylasSchedulerEditor;
        "nylas-scheduling": NylasScheduling;
        "nylas-selected-event-card": NylasSelectedEventCard;
        "nylas-summarize-message-button": NylasSummarizeMessageButton;
        "nylas-threads-refresh": NylasThreadsRefresh;
        "nylas-threads-search": NylasThreadsSearch;
        "nylas-time-window-picker": NylasTimeWindowPicker;
        "nylas-timeslot-picker": NylasTimeslotPicker;
        "nylas-view-email": NylasViewEmail;
        "nylas-view-thread": NylasViewThread;
        "people-icon": PeopleIcon;
        "play-icon": PlayIcon;
        "refresh-icon": RefreshIcon;
        "reply-all-icon": ReplyAllIcon;
        "reply-icon": ReplyIcon;
        "search-icon": SearchIcon;
        "select-dropdown": SelectDropdown;
        "sent-icon": SentIcon;
        "spam-icon": SpamIcon;
        "star-icon": StarIcon;
        "stop-icon": StopIcon;
        "time-period-selector": TimePeriodSelector;
        "tooltip-component": TooltipComponent;
        "translate-icon": TranslateIcon;
        "trash-icon": TrashIcon;
        "underline-icon": UnderlineIcon;
        "warning-icon": WarningIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-circle-icon": LocalJSX.AddCircleIcon & JSXBase.HTMLAttributes<HTMLAddCircleIconElement>;
            "archive-icon": LocalJSX.ArchiveIcon & JSXBase.HTMLAttributes<HTMLArchiveIconElement>;
            "arrow-icon": LocalJSX.ArrowIcon & JSXBase.HTMLAttributes<HTMLArrowIconElement>;
            "bold-icon": LocalJSX.BoldIcon & JSXBase.HTMLAttributes<HTMLBoldIconElement>;
            "button-component": LocalJSX.ButtonComponent & JSXBase.HTMLAttributes<HTMLButtonComponentElement>;
            "calendar-cancel-icon": LocalJSX.CalendarCancelIcon & JSXBase.HTMLAttributes<HTMLCalendarCancelIconElement>;
            "calendar-check-icon": LocalJSX.CalendarCheckIcon & JSXBase.HTMLAttributes<HTMLCalendarCheckIconElement>;
            "calendar-icon": LocalJSX.CalendarIcon & JSXBase.HTMLAttributes<HTMLCalendarIconElement>;
            "calendar-info-icon": LocalJSX.CalendarInfoIcon & JSXBase.HTMLAttributes<HTMLCalendarInfoIconElement>;
            "calendar-patterns-icon": LocalJSX.CalendarPatternsIcon & JSXBase.HTMLAttributes<HTMLCalendarPatternsIconElement>;
            "checkmark-circle-icon": LocalJSX.CheckmarkCircleIcon & JSXBase.HTMLAttributes<HTMLCheckmarkCircleIconElement>;
            "chevron-icon": LocalJSX.ChevronIcon & JSXBase.HTMLAttributes<HTMLChevronIconElement>;
            "close-icon": LocalJSX.CloseIcon & JSXBase.HTMLAttributes<HTMLCloseIconElement>;
            "document-refresh-icon": LocalJSX.DocumentRefreshIcon & JSXBase.HTMLAttributes<HTMLDocumentRefreshIconElement>;
            "flow-icon": LocalJSX.FlowIcon & JSXBase.HTMLAttributes<HTMLFlowIconElement>;
            "folder-icon": LocalJSX.FolderIcon & JSXBase.HTMLAttributes<HTMLFolderIconElement>;
            "forward-icon": LocalJSX.ForwardIcon & JSXBase.HTMLAttributes<HTMLForwardIconElement>;
            "globe-icon": LocalJSX.GlobeIcon & JSXBase.HTMLAttributes<HTMLGlobeIconElement>;
            "google-logo-icon": LocalJSX.GoogleLogoIcon & JSXBase.HTMLAttributes<HTMLGoogleLogoIconElement>;
            "inbox-icon": LocalJSX.InboxIcon & JSXBase.HTMLAttributes<HTMLInboxIconElement>;
            "info-icon": LocalJSX.InfoIcon & JSXBase.HTMLAttributes<HTMLInfoIconElement>;
            "italic-icon": LocalJSX.ItalicIcon & JSXBase.HTMLAttributes<HTMLItalicIconElement>;
            "loading-icon": LocalJSX.LoadingIcon & JSXBase.HTMLAttributes<HTMLLoadingIconElement>;
            "location-icon": LocalJSX.LocationIcon & JSXBase.HTMLAttributes<HTMLLocationIconElement>;
            "location-off-icon": LocalJSX.LocationOffIcon & JSXBase.HTMLAttributes<HTMLLocationOffIconElement>;
            "microsoft-logo-icon": LocalJSX.MicrosoftLogoIcon & JSXBase.HTMLAttributes<HTMLMicrosoftLogoIconElement>;
            "multi-select-dropdown": LocalJSX.MultiSelectDropdown & JSXBase.HTMLAttributes<HTMLMultiSelectDropdownElement>;
            /**
             * The `nylas-additional-participants` component is a form input for adding additional participants to an event.
             */
            "nylas-additional-participants": LocalJSX.NylasAdditionalParticipants & JSXBase.HTMLAttributes<HTMLNylasAdditionalParticipantsElement>;
            /**
             * The `nylas-availability-picker` component is a form input for selecting availability (open hours).
             */
            "nylas-availability-picker": LocalJSX.NylasAvailabilityPicker & JSXBase.HTMLAttributes<HTMLNylasAvailabilityPickerElement>;
            /**
             * The `nylas-booked-event-card` component is a UI component that displays the booked event card.
             */
            "nylas-booked-event-card": LocalJSX.NylasBookedEventCard & JSXBase.HTMLAttributes<HTMLNylasBookedEventCardElement>;
            /**
             * The `nylas-booking-calendar-picker` component is a UI component that displays the booking calendar picker.
             */
            "nylas-booking-calendar-picker": LocalJSX.NylasBookingCalendarPicker & JSXBase.HTMLAttributes<HTMLNylasBookingCalendarPickerElement>;
            /**
             * The `nylas-booking-form` component is a UI component that allows users to book an event.
             * The booking form component.
             */
            "nylas-booking-form": LocalJSX.NylasBookingForm & JSXBase.HTMLAttributes<HTMLNylasBookingFormElement>;
            /**
             * The `nylas-buffer-time` component is a UI component that displays the booking calendar picker.
             */
            "nylas-buffer-time": LocalJSX.NylasBufferTime & JSXBase.HTMLAttributes<HTMLNylasBufferTimeElement>;
            /**
             * The `nylas-calendar-picker` component is a form input for selecting calendars.
             */
            "nylas-calendar-picker": LocalJSX.NylasCalendarPicker & JSXBase.HTMLAttributes<HTMLNylasCalendarPickerElement>;
            /**
             * The `nylas-cancel-booking-form` component is a UI component that allows users to cancel a booking.
             */
            "nylas-cancel-booking-form": LocalJSX.NylasCancelBookingForm & JSXBase.HTMLAttributes<HTMLNylasCancelBookingFormElement>;
            /**
             * The `nylas-cancelled-event-card` component is a UI component that displays the cancelled event card.
             */
            "nylas-cancelled-event-card": LocalJSX.NylasCancelledEventCard & JSXBase.HTMLAttributes<HTMLNylasCancelledEventCardElement>;
            "nylas-composer": LocalJSX.NylasComposer & JSXBase.HTMLAttributes<HTMLNylasComposerElement>;
            /**
             * The `nylas-custom-booking-flow` component is a UI component that displays the booking calendar picker.
             */
            "nylas-custom-booking-flow": LocalJSX.NylasCustomBookingFlow & JSXBase.HTMLAttributes<HTMLNylasCustomBookingFlowElement>;
            /**
             * The `nylas-date-picker` component is a UI component that allows users to select a date.
             */
            "nylas-date-picker": LocalJSX.NylasDatePicker & JSXBase.HTMLAttributes<HTMLNylasDatePickerElement>;
            /**
             * The `nylas-editor-tabs` component is a UI component that displays the editor tabs for the scheduler editor.
             */
            "nylas-editor-tabs": LocalJSX.NylasEditorTabs & JSXBase.HTMLAttributes<HTMLNylasEditorTabsElement>;
            /**
             * The `nylas-event-description` component is a form input for the description of an event.
             */
            "nylas-event-description": LocalJSX.NylasEventDescription & JSXBase.HTMLAttributes<HTMLNylasEventDescriptionElement>;
            /**
             * The `nylas-event-duration` component is a form input for the duration of an event.
             */
            "nylas-event-duration": LocalJSX.NylasEventDuration & JSXBase.HTMLAttributes<HTMLNylasEventDurationElement>;
            /**
             * The `nylas-event-info` component is a input form for the event information.
             */
            "nylas-event-info": LocalJSX.NylasEventInfo & JSXBase.HTMLAttributes<HTMLNylasEventInfoElement>;
            /**
             * The `nylas-event-limits` component is a input form for the event information.
             */
            "nylas-event-limits": LocalJSX.NylasEventLimits & JSXBase.HTMLAttributes<HTMLNylasEventLimitsElement>;
            /**
             * The `nylas-event-title` component is a form input for the title of an event.
             */
            "nylas-event-title": LocalJSX.NylasEventTitle & JSXBase.HTMLAttributes<HTMLNylasEventTitleElement>;
            /**
             * The `nylas-form-card` component is a card that can be used to display a form. It is a simple wrapper around a card with a header and content area.
             */
            "nylas-form-card": LocalJSX.NylasFormCard & JSXBase.HTMLAttributes<HTMLNylasFormCardElement>;
            "nylas-if-state": LocalJSX.NylasIfState & JSXBase.HTMLAttributes<HTMLNylasIfStateElement>;
            /**
             * The `nylas-limit-future-bookings` component is a form input for the description of an event.
             */
            "nylas-limit-future-bookings": LocalJSX.NylasLimitFutureBookings & JSXBase.HTMLAttributes<HTMLNylasLimitFutureBookingsElement>;
            /**
             * The `nylas-list-configurations` component displays a list of scheduling pages.
             */
            "nylas-list-configurations": LocalJSX.NylasListConfigurations & JSXBase.HTMLAttributes<HTMLNylasListConfigurationsElement>;
            "nylas-list-folders": LocalJSX.NylasListFolders & JSXBase.HTMLAttributes<HTMLNylasListFoldersElement>;
            "nylas-list-threads": LocalJSX.NylasListThreads & JSXBase.HTMLAttributes<HTMLNylasListThreadsElement>;
            /**
             * The `nylas-locale-switch` component is a UI component that allows users to select a timezone and language.
             */
            "nylas-locale-switch": LocalJSX.NylasLocaleSwitch & JSXBase.HTMLAttributes<HTMLNylasLocaleSwitchElement>;
            /**
             * The `nylas-location-component` component is a form input for the description of an event.
             */
            "nylas-location-component": LocalJSX.NylasLocationComponent & JSXBase.HTMLAttributes<HTMLNylasLocationComponentElement>;
            "nylas-login": LocalJSX.NylasLogin & JSXBase.HTMLAttributes<HTMLNylasLoginElement>;
            "nylas-logo": LocalJSX.NylasLogo & JSXBase.HTMLAttributes<HTMLNylasLogoElement>;
            /**
             * The Nylas Mailbox component.
             * This component is used as a provider for all other Nylas Mailbox components.
             * It is responsible for managing the NylasAuth and NylasMailboxConnector instances.
             * It also manages the state of the NylasAuth and NylasMailboxStore instances.
             * @example <nylas-mailbox
             *  auth-config={{
             *  clientId: 'YOUR_CLIENT_ID',
             *  }}
             * default-auth-store-state={{
             * threadQueryParams: {
             *  limit: 10,
             * }}
             * >
             *  <nylas-mailbox-thread-list></nylas-mailbox-thread-list>
             * </nylas-mailbox>
             */
            "nylas-mailbox": LocalJSX.NylasMailbox & JSXBase.HTMLAttributes<HTMLNylasMailboxElement>;
            "nylas-mailbox-pagination": LocalJSX.NylasMailboxPagination & JSXBase.HTMLAttributes<HTMLNylasMailboxPaginationElement>;
            "nylas-mailbox-toolbar-button": LocalJSX.NylasMailboxToolbarButton & JSXBase.HTMLAttributes<HTMLNylasMailboxToolbarButtonElement>;
            /**
             * The `nylas-min-cancellation-notice` component is a form input for the description of an event.
             */
            "nylas-min-cancellation-notice": LocalJSX.NylasMinCancellationNotice & JSXBase.HTMLAttributes<HTMLNylasMinCancellationNoticeElement>;
            /**
             * The `nylas-notification` component is a UI component that displays notifications.
             */
            "nylas-notification": LocalJSX.NylasNotification & JSXBase.HTMLAttributes<HTMLNylasNotificationElement>;
            /**
             * The Nylas Provider component.
             * This component is used to manage the Nylas Provider.
             * It is used to manage the Nylas Auth instance, the Nylas Connector instance,
             * and the Nylas Store instance.
             */
            "nylas-provider": LocalJSX.NylasProvider & JSXBase.HTMLAttributes<HTMLNylasProviderElement>;
            /**
             * The `nylas-scheduler-editor` component is a form that allows users to configure the settings for the Nylas Scheduler.
             */
            "nylas-scheduler-editor": LocalJSX.NylasSchedulerEditor & JSXBase.HTMLAttributes<HTMLNylasSchedulerEditorElement>;
            /**
             * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.
             */
            "nylas-scheduling": LocalJSX.NylasScheduling & JSXBase.HTMLAttributes<HTMLNylasSchedulingElement>;
            /**
             * The `nylas-selected-event-card` component is a UI component that displays the selected event card.
             */
            "nylas-selected-event-card": LocalJSX.NylasSelectedEventCard & JSXBase.HTMLAttributes<HTMLNylasSelectedEventCardElement>;
            "nylas-summarize-message-button": LocalJSX.NylasSummarizeMessageButton & JSXBase.HTMLAttributes<HTMLNylasSummarizeMessageButtonElement>;
            "nylas-threads-refresh": LocalJSX.NylasThreadsRefresh & JSXBase.HTMLAttributes<HTMLNylasThreadsRefreshElement>;
            "nylas-threads-search": LocalJSX.NylasThreadsSearch & JSXBase.HTMLAttributes<HTMLNylasThreadsSearchElement>;
            /**
             * The `nylas-time-window-picker` component is a time picker that can be used to select a time.
             */
            "nylas-time-window-picker": LocalJSX.NylasTimeWindowPicker & JSXBase.HTMLAttributes<HTMLNylasTimeWindowPickerElement>;
            /**
             * The `nylas-timeslot-picker` component is a UI component that allows users to select a timeslot from a list of available timeslots.
             */
            "nylas-timeslot-picker": LocalJSX.NylasTimeslotPicker & JSXBase.HTMLAttributes<HTMLNylasTimeslotPickerElement>;
            "nylas-view-email": LocalJSX.NylasViewEmail & JSXBase.HTMLAttributes<HTMLNylasViewEmailElement>;
            "nylas-view-thread": LocalJSX.NylasViewThread & JSXBase.HTMLAttributes<HTMLNylasViewThreadElement>;
            "people-icon": LocalJSX.PeopleIcon & JSXBase.HTMLAttributes<HTMLPeopleIconElement>;
            "play-icon": LocalJSX.PlayIcon & JSXBase.HTMLAttributes<HTMLPlayIconElement>;
            "refresh-icon": LocalJSX.RefreshIcon & JSXBase.HTMLAttributes<HTMLRefreshIconElement>;
            "reply-all-icon": LocalJSX.ReplyAllIcon & JSXBase.HTMLAttributes<HTMLReplyAllIconElement>;
            "reply-icon": LocalJSX.ReplyIcon & JSXBase.HTMLAttributes<HTMLReplyIconElement>;
            "search-icon": LocalJSX.SearchIcon & JSXBase.HTMLAttributes<HTMLSearchIconElement>;
            /**
             * The `select-dropdown` component is a dropdown that allows users to select an option from a list of options.
             */
            "select-dropdown": LocalJSX.SelectDropdown & JSXBase.HTMLAttributes<HTMLSelectDropdownElement>;
            "sent-icon": LocalJSX.SentIcon & JSXBase.HTMLAttributes<HTMLSentIconElement>;
            "spam-icon": LocalJSX.SpamIcon & JSXBase.HTMLAttributes<HTMLSpamIconElement>;
            "star-icon": LocalJSX.StarIcon & JSXBase.HTMLAttributes<HTMLStarIconElement>;
            "stop-icon": LocalJSX.StopIcon & JSXBase.HTMLAttributes<HTMLStopIconElement>;
            "time-period-selector": LocalJSX.TimePeriodSelector & JSXBase.HTMLAttributes<HTMLTimePeriodSelectorElement>;
            "tooltip-component": LocalJSX.TooltipComponent & JSXBase.HTMLAttributes<HTMLTooltipComponentElement>;
            "translate-icon": LocalJSX.TranslateIcon & JSXBase.HTMLAttributes<HTMLTranslateIconElement>;
            "trash-icon": LocalJSX.TrashIcon & JSXBase.HTMLAttributes<HTMLTrashIconElement>;
            "underline-icon": LocalJSX.UnderlineIcon & JSXBase.HTMLAttributes<HTMLUnderlineIconElement>;
            "warning-icon": LocalJSX.WarningIcon & JSXBase.HTMLAttributes<HTMLWarningIconElement>;
        }
    }
}
