import { NylasApiRequest } from "../../../common/nylas-api-request";
import { NylasSchedulerConfigStoreType } from "../../../stores/scheduler-config-store";
import { Calendar, Configuration } from '@nylas/core';
type NylasSchedulerConfigAPIConnectorOptions = {
    nylasApiRequest?: NylasApiRequest;
    nylasSchedulerConfigStore: NylasSchedulerConfigStoreType;
};
export declare class NylasSchedulerConfigAPIConnector {
    private nylasApiRequest?;
    private nylasSchedulerConfigStore;
    constructor({ nylasApiRequest, nylasSchedulerConfigStore }: NylasSchedulerConfigAPIConnectorOptions);
    currentUser(): Promise<import("@/common/nylas-api-request").User | null>;
    getCalendars(): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Calendar[], null]>;
    getConfigurationById(configurationId: string, forceFetch?: boolean): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Configuration, null]>;
    getConfigurations(): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Configuration[], null]>;
    createConfiguration(configuration: Omit<Partial<Configuration>, 'id'>): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Configuration, null]>;
    updateConfiguration(configuration: Partial<Configuration>): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Configuration, null]>;
    deleteConfiguration(configurationId: string): Promise<[null, {
        type?: string | undefined;
        code?: string | number | undefined;
        title?: string | undefined;
        message?: string | undefined;
        provider_error?: Record<string, never> | undefined;
    }] | [null, null] | [Configuration, null]>;
}
export {};
