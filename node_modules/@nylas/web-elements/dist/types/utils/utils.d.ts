import { DataResponseError, DataResponseReturnType } from "../common/types";
import { Configuration, EmailName, Message } from '@nylas/core';
import dayjs from 'dayjs';
export declare function format(first: string, middle: string, last: string): string;
export declare function removeUndefined(obj: any): {
    [key: string]: any;
};
export declare function debug(...args: any[]): void;
export declare function error(...args: any[]): void;
export declare function uniqueID(): string;
export declare function formatEventName(propKey: string): string;
export declare function formatDateTime(dateTimestamp: number): string;
export declare function formatRecipient(recipient: EmailName): string | undefined;
export declare function formatParticipants(participants: EmailName[], meEmail?: string, messageCount?: number, max?: number): string;
export declare const formatTimeAgo: (date: Date) => string | undefined;
export declare function getLastDayOfMonth(date: Date): Date;
export declare function getFirstDayOfMonth(date: Date): Date;
export declare function getFirstHourOfDay(date: Date): Date;
export declare function isSameDay(date1: Date, date2: Date): boolean;
export declare function isSameMonth(date1: Date, date2: Date): boolean;
export declare function toTitleCase(str: string): string;
export declare function formatFolderName(folderName: string): string;
export declare function detectHTMLOrPlainText(html: string): "html" | "plain";
export declare function detectIfMessageIsHTML(message: Message): boolean;
export declare function parsePlainTextToHTML(text: string): string;
export declare function htmlToPlainText(html: string): string;
export declare function getStartHourOfDay(date: Date): Date;
export declare function getEndHourOfDay(date: Date): Date;
export declare function get24HourTime(date: Date): string;
export declare function getUserTimezone(): string;
export declare const getEventRecurrence: (recurrence: any) => string | null;
export declare const validateTimeFormatInput: (text: any) => boolean;
export declare const validateExactTimeFormat: (input: any) => boolean;
export declare function roundToNearest15Minutes(time?: dayjs.Dayjs | null): any;
export declare function autocompleteTimeFormat(input: any): string;
export declare function formatTime(time: string): dayjs.Dayjs;
export declare function convertTo12HourFormat(timeStr: string): string;
export declare function convertTo24HourFormat(timeStr: string): string;
export declare function timeToMinutes(time: any): number;
export declare function minutesToTime(minutes: any): string;
export declare function getBrowser(): "Edge (Chromium)" | "Chrome" | "Safari" | "Firefox" | "Internet Explorer" | "Edge (Legacy)" | "Unknown";
export declare function dataResponse<T = any>(data: T, error?: DataResponseError | null): DataResponseReturnType<T>;
export declare function parsePreviewLink(link: string, config?: Partial<Configuration>): string;
export declare function isNonPrintableKey(event: any): boolean;
export declare function addDaysToCurrentDate(startDate: any, days: any): Date;
export declare function addMinutesToCurrentTime(startDate: any, minutes: any): Date;
export declare function isObject(item: any): any;
export declare function mergeDeep(target: any, source: any): any;
