export type RoutePath = string;
export type RouteParams<Path extends string> = Path extends `${infer _Start}:${infer Param}/${infer Rest}` ? {
    [key in Param | keyof RouteParams<Rest>]: string;
} : Path extends `${infer _Start}:${infer Param}` ? {
    [key in Param]: string;
} : {};
export type RouteListener<Path extends string> = (route: Path, path: string, routeParams: RouteParams<Path>) => Promise<void>;
export interface RouterInterface {
    init(): void;
    addRouteChangeListener<Path extends RoutePath>(route: Path, listener: RouteListener<Path>): void;
    setRoute(route: string): void;
    navigate(route: string, shallow: boolean): void;
    getRoute(): string;
    getBasePath(): string;
    matchRoute(route: string, path: string): boolean;
}
