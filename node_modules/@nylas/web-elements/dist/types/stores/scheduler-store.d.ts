import { DataState, NylasEvent } from "../common/types";
import { NylasSchedulerBookingData, Timeslot } from '@nylas/core';
export type AvailabilityTimeslot = {
    emails: string[];
    start_time: Date;
    end_time: Date;
};
export type LoadingState = {
    api: 'availability' | 'createBooking' | 'cancelBooking' | 'rescheduleBooking';
};
export type ConfigSettings = {
    scheduler: {
        available_days_in_future: number;
        min_cancellation_notice: number;
    };
    organizer: {
        name: string;
        email: string;
    };
};
export interface NylasSchedulerStoreState {
    selectedDate: Date | null;
    selectedLanguage: string;
    selectedTimezone: string;
    selectedTimeslot: Timeslot | null;
    showBookingForm: boolean;
    selectableDates: Date[] | null;
    availability: AvailabilityTimeslot[];
    state: DataState;
    eventInfo: NylasEvent | null;
    cancelledEventInfo: Partial<NylasEvent> | null;
    bookingInfo?: NylasSchedulerBookingData;
    rescheduleBookingId?: string;
    cancelBookingId?: string;
    isLoading: boolean;
    nylasBranding?: boolean;
    configSettings?: ConfigSettings;
}
export type NylasSchedulerStoreType = ReturnType<typeof CreateNylasSchedulerStore>;
export declare function CreateNylasSchedulerStore(defaultState?: Partial<NylasSchedulerStoreState>): import("@stencil/store").ObservableMap<NylasSchedulerStoreState>;
