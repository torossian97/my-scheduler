import { dataResponse } from "../../../utils/utils";
import { isNylasErrorResponse } from "@nylas/core";
export class NylasSchedulerConfigAPIConnector {
    constructor({ nylasApiRequest, nylasSchedulerConfigStore }) {
        this.nylasApiRequest = nylasApiRequest;
        this.nylasSchedulerConfigStore = nylasSchedulerConfigStore;
    }
    async currentUser() {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return null;
        }
        return this.nylasApiRequest.currentUser();
    }
    async getCalendars() {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error fetching calendars: Nylas API Request is not initialized',
            });
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'GET',
            path: `calendars`,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error fetching calendars: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error fetching calendars: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.calendars = response.data;
        return dataResponse(response.data);
    }
    async getConfigurationById(configurationId, forceFetch = false) {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error fetching configuration: Nylas API Request is not initialized',
            });
        }
        if (!forceFetch) {
            const existingConfig = this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configurationId);
            if (existingConfig) {
                this.nylasSchedulerConfigStore.state.selectedConfiguration = existingConfig;
                return dataResponse(existingConfig);
            }
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'GET',
            path: `scheduling/configurations/${configurationId}`,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error fetching configuration: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error fetching configuration: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;
        if (this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configurationId)) {
            this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.map(c => (c.id === configurationId ? response.data : c));
        }
        else {
            this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];
        }
        return dataResponse(response.data);
    }
    async getConfigurations() {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error fetching configurations: Nylas API Request is not initialized',
            });
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'GET',
            path: `scheduling/configurations`,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error fetching configurations: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error fetching configurations: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.configurations = response.data;
        return dataResponse(response.data);
    }
    async createConfiguration(configuration) {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error creating configuration: Nylas API Request is not initialized',
            });
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'POST',
            path: `scheduling/configurations`,
            body: configuration,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error creating configuration: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error creating configuration: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;
        this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];
        return dataResponse(response.data);
    }
    async updateConfiguration(configuration) {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error updating configuration: Nylas API Request is not initialized',
            });
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'PUT',
            path: `scheduling/configurations/${configuration.id}`,
            body: configuration,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error updating configuration: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error updating configuration: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;
        if (this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configuration.id)) {
            this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.map(c => (c.id === configuration.id ? response.data : c));
        }
        else {
            this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];
        }
        return dataResponse(response.data);
    }
    async deleteConfiguration(configurationId) {
        if (!this.nylasApiRequest) {
            console.warn('Nylas API Request is not initialized');
            return dataResponse(null, {
                message: 'Error deleting configuration: Nylas API Request is not initialized',
            });
        }
        const [response, error] = await this.nylasApiRequest.request({
            method: 'DELETE',
            path: `scheduling/configurations/${configurationId}`,
        });
        if (error) {
            return dataResponse(null, {
                message: 'Error deleting configuration: ' + error.message,
            });
        }
        if (isNylasErrorResponse(response)) {
            return dataResponse(null, {
                message: 'Error deleting configuration: ' + response.error?.message,
            });
        }
        this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.filter(c => c.id !== configurationId);
        if (this.nylasSchedulerConfigStore.state.selectedConfiguration?.id === configurationId) {
            this.nylasSchedulerConfigStore.resetSelectedConfiguration();
        }
        return dataResponse(response.data);
    }
}
//# sourceMappingURL=scheduler-config.js.map
