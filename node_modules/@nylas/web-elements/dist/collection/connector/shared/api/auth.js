import { debug } from "../../../utils/utils";
export class NylasAuthConnector {
    constructor(nylasAuth, nylasAuthStore) {
        this.nylasAuth = nylasAuth;
        this.nylasAuthStore = nylasAuthStore;
    }
    async validateSession() {
        const isAuthenticated = await this.isAccessTokenValid();
        if (!isAuthenticated) {
            this.logout();
        }
        else {
            let tokenInfo = await this.nylasAuth.getTokenInfo();
            if (tokenInfo) {
                const expireTimeCheck = 5 * 60 * 1000;
                const currentTimeInSeconds = Math.floor(Date.now() / 1000);
                if (tokenInfo.expires_in && tokenInfo.expires_in - currentTimeInSeconds < expireTimeCheck) {
                    debug('[NylasAuthConnectorMixin] Refreshing access token');
                    tokenInfo = await this.nylasAuth.refreshAccessToken();
                    if (!tokenInfo) {
                        debug('[NylasAuthConnectorMixin] Token is expired and could not be refreshed. Logging out.');
                        this.logout();
                        return;
                    }
                }
                this.nylasAuthStore.state.tokenInfo = tokenInfo;
            }
        }
        this.nylasAuthStore.state.isAuthenticated = isAuthenticated;
    }
    async isAuthenticated() {
        return this.nylasAuth.isAuthenticated();
    }
    async getTokenInfo() {
        return this.nylasAuth.getTokenInfo();
    }
    async isAccessTokenValid() {
        return this.nylasAuth.isAccessTokenValid();
    }
    async logout() {
        await this.nylasAuth.logout();
    }
    async getHostedAuthRedirectURL(scopes, email, provider) {
        return this.nylasAuth.getHostedAuthRedirectURL(scopes, email, provider);
    }
    async manageHostedAuthCodeExchange(currentUrl) {
        const url = new URL(currentUrl);
        const code = url.searchParams.get('code');
        if (code) {
            const tokenInfo = await this.nylasAuth.exchangeAuthCodeForTokenInfo(code);
            if (tokenInfo) {
                this.nylasAuthStore.state.tokenInfo = tokenInfo;
                this.nylasAuthStore.state.isAuthenticated = true;
                return tokenInfo;
            }
        }
        return null;
    }
}
//# sourceMappingURL=auth.js.map
