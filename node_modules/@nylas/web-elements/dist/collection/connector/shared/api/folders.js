import { NylasAPIError, isNylasErrorResponse } from "@nylas/core";
export class NylasFoldersConnector {
    constructor(nylasAuth, nylasAuthStore, nylasMailboxStore) {
        this.nylasAuth = nylasAuth;
        this.nylasAuthStore = nylasAuthStore;
        this.nylasMailboxStore = nylasMailboxStore;
    }
    async getFolders() {
        if (!this.nylasAuthStore.state.isAuthenticated) {
            throw new Error('Not authenticated');
        }
        if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {
            throw new Error('Missing thread:read-only scope');
        }
        this.nylasMailboxStore.state.state = 'loading';
        const path = `/v3/grants/me/folders`;
        const response = await this.nylasAuth.nylasAPIRequest(path);
        if (isNylasErrorResponse(response)) {
            throw new NylasAPIError(response.error);
        }
        const folders = response.data;
        this.nylasMailboxStore.state.folders = folders;
        this.nylasMailboxStore.state.state = 'ready';
        return folders;
    }
    async selectFolder(folder) {
        this.nylasMailboxStore.state.threadsQueryParams = {
            in: folder.id,
            ...(this.nylasMailboxStore.state.threadsQueryParams || {}),
        };
    }
}
//# sourceMappingURL=folders.js.map
