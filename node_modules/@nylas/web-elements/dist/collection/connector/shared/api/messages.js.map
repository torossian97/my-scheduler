{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../../src/connector/shared/api/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, NylasAPIError, NylasAuthType, NylasResponse, isNylasErrorResponse } from '@nylas/core';\nimport { NylasAuthStoreType, NylasMailboxStoreType } from '../../../components';\n\nexport class NylasMessagesConnector {\n  private nylasAuth: NylasAuthType;\n  private nylasAuthStore: NylasAuthStoreType;\n  private nylasMailboxStore: NylasMailboxStoreType;\n\n  constructor(nylasAuth: NylasAuthType, nylasAuthStore: NylasAuthStoreType, nylasMailboxStore: NylasMailboxStoreType) {\n    this.nylasAuth = nylasAuth;\n    this.nylasAuthStore = nylasAuthStore;\n    this.nylasMailboxStore = nylasMailboxStore;\n  }\n\n  /**\n   * Returns the list of messages.\n   * @returns {Promise<Message[]>}\n   */\n  public async getMessages(): Promise<Message[]> {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing message:read-only scope');\n    }\n\n    // Set the state to loading.\n    this.nylasMailboxStore.state.state = 'loading';\n\n    // Get the message query parameters from the store.\n    const queryParams = this.nylasMailboxStore.state.messgeQueryParams;\n\n    // Build the URLSearchParams object.\n    const params = new URLSearchParams();\n    for (const key in queryParams) {\n      const value = queryParams[key as keyof typeof queryParams]?.toString();\n      if (value) {\n        params.append(key, value);\n      }\n    }\n\n    // Build the URL with the query parameters\n    const path = `/v3/grants/me/messages?${params.toString()}`;\n\n    // Make the API request.\n    const response = await this.nylasAuth.nylasAPIRequest<NylasResponse<Message[]>>(path);\n    if (isNylasErrorResponse(response)) {\n      throw new NylasAPIError(response.error);\n    }\n\n    // Set the messages in the store.\n    const messages = response.data;\n    this.nylasMailboxStore.state.messages = messages;\n\n    // Set the state to ready.\n    this.nylasMailboxStore.state.state = 'ready';\n\n    return messages;\n  }\n\n  /**\n   * Returns the list of messages for a given thread.\n   * @param {string} threadId The thread ID.\n   * @returns {Promise<Message[]>}\n   * @throws {NylasAPIError}\n   */\n  public async getThreadMessages(threadId: string): Promise<Message[]> {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing message:read-only scope');\n    }\n\n    const response = await this.nylasAuth.nylasAPIRequest<NylasResponse<Message[]>>(`/v3/grants/me/messages?thread_id=${threadId}&fields=include_headers`);\n    if (isNylasErrorResponse(response)) {\n      throw new NylasAPIError(response.error);\n    }\n\n    const messages = response.data;\n    this.nylasMailboxStore.state.messages = messages;\n\n    return messages;\n  }\n\n  /**\n   * Downloads the attachments for a given message.\n   * @param message The message to download attachments for.\n   * @returns {Promise<Blob>[]} An array of promises that will resolve to a Blob.\n   */\n  public downloadMessageAttachments(message: Message): Promise<Blob>[] {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing message:read-only scope');\n    }\n\n    // We'll go through each attachment and download it.\n    const blobPromises: Promise<Blob>[] = [];\n    const attachments = message.attachments || [];\n    for (const attachment of attachments) {\n      const blob = this.nylasAuth.nylasDownloadFileRequest(`/v3/grants/me/attachments/${attachment.id}?message_id=${message.id}`);\n      blobPromises.push(blob);\n    }\n\n    return blobPromises;\n  }\n\n  /**\n   * Returns a summarized version of the given text.\n   * @param text The non-HTML text to summarize.\n   * @returns {Promise<string>} The summarized text.\n   */\n  public async summarizeText(text: string): Promise<string> {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing message:read-only scope');\n    }\n\n    const response = await this.nylasAuth.nylasAPIRequest<NylasResponse<{ summary: string }>>(\n      `/v3/grants/me/mailbox/summarize`,\n      'POST',\n      {\n        message: {\n          body: text,\n        },\n      },\n      true,\n      this.nylasAuth.config.elementsApiUri,\n    );\n\n    if (isNylasErrorResponse(response)) {\n      throw new NylasAPIError(response.error);\n    }\n\n    return response.data.summary;\n  }\n\n  /**\n   * Returns a summarized version of the given message.\n   * @param message The message to summarize.\n   * @returns {Promise<ReadableStream<Uint8Array> | null>} Returns a Fetch API response.\n   */\n  public async textToSpeech(text: string, abortController?: AbortController): Promise<ReadableStream<Uint8Array> | null> {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing message:read-only scope');\n    }\n\n    return this.nylasAuth.nylasAPIRequest(\n      `/v3/grants/me/mailbox/tts`,\n      'POST',\n      {\n        text,\n      },\n      false,\n      this.nylasAuth.config.elementsApiUri,\n      {\n        ...(abortController ? { signal: abortController?.signal } : {}),\n      },\n    );\n  }\n}\n"]}