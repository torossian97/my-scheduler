{"version":3,"file":"scheduler-config.js","sourceRoot":"","sources":["../../../../src/connector/shared/api/scheduler-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { NylasApiRequest } from '@/common/nylas-api-request';\nimport { NylasSchedulerConfigStoreType } from '@/stores/scheduler-config-store';\nimport { dataResponse } from '@/utils/utils';\nimport { Calendar, Configuration, NylasResponse, isNylasErrorResponse } from '@nylas/core';\n\ntype NylasSchedulerConfigAPIConnectorOptions = {\n  nylasApiRequest?: NylasApiRequest;\n  nylasSchedulerConfigStore: NylasSchedulerConfigStoreType;\n};\n\n/**\n * Nylas Scheduler Config API Connector\n * This class is responsible for making API requests to the Nylas API for Scheduler Configurations.\n */\nexport class NylasSchedulerConfigAPIConnector {\n  private nylasApiRequest?: NylasApiRequest;\n  private nylasSchedulerConfigStore: NylasSchedulerConfigStoreType;\n\n  constructor({ nylasApiRequest, nylasSchedulerConfigStore }: NylasSchedulerConfigAPIConnectorOptions) {\n    this.nylasApiRequest = nylasApiRequest;\n    this.nylasSchedulerConfigStore = nylasSchedulerConfigStore;\n  }\n\n  /**\n   * Get the current user.\n   * @returns The current user or null if the request is not initialized.\n   */\n  public async currentUser() {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return null;\n    }\n\n    return this.nylasApiRequest.currentUser();\n  }\n\n  /**\n   * Get the current user's calendars.\n   * @returns The current user's calendars or an error if the request is not initialized.\n   */\n  public async getCalendars() {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error fetching calendars: Nylas API Request is not initialized',\n      });\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Calendar[]>>({\n      method: 'GET',\n      path: `calendars`,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error fetching calendars: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error fetching calendars: ' + response.error?.message,\n      });\n    }\n\n    // Set the new calendars as the current calendars\n    this.nylasSchedulerConfigStore.state.calendars = response.data;\n\n    return dataResponse(response.data);\n  }\n\n  /**\n   * Get a configuration by its ID.\n   * @param configurationId The ID of the configuration to fetch.\n   */\n  public async getConfigurationById(configurationId: string, forceFetch: boolean = false) {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error fetching configuration: Nylas API Request is not initialized',\n      });\n    }\n\n    // If the configuration is already in the store, return it\n    if (!forceFetch) {\n      const existingConfig = this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configurationId);\n      if (existingConfig) {\n        this.nylasSchedulerConfigStore.state.selectedConfiguration = existingConfig;\n        return dataResponse(existingConfig);\n      }\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Configuration>>({\n      method: 'GET',\n      path: `scheduling/configurations/${configurationId}`,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error fetching configuration: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error fetching configuration: ' + response.error?.message,\n      });\n    }\n\n    // Set the new configuration as the current configuration\n    this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;\n\n    // If the configuration was updated, update the list of configurations\n    // If it doesn't exist, add it to the list\n    if (this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configurationId)) {\n      this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.map(c => (c.id === configurationId ? response.data : c));\n    } else {\n      this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];\n    }\n\n    return dataResponse(response.data);\n  }\n\n  /**\n   * Get all configurations.\n   * @returns The list of configurations or an error if the request is not initialized.\n   */\n  public async getConfigurations() {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error fetching configurations: Nylas API Request is not initialized',\n      });\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Configuration[]>>({\n      method: 'GET',\n      path: `scheduling/configurations`,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error fetching configurations: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error fetching configurations: ' + response.error?.message,\n      });\n    }\n\n    // Set the new configuration as the current configuration\n    this.nylasSchedulerConfigStore.state.configurations = response.data;\n\n    return dataResponse(response.data);\n  }\n\n  /**\n   * Create a new configuration.\n   * @param configuration The configuration to create.\n   * @returns The new configuration or an error if the request is not initialized.\n   */\n  public async createConfiguration(configuration: Omit<Partial<Configuration>, 'id'>) {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error creating configuration: Nylas API Request is not initialized',\n      });\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Configuration>>({\n      method: 'POST',\n      path: `scheduling/configurations`,\n      body: configuration,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error creating configuration: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error creating configuration: ' + response.error?.message,\n      });\n    }\n\n    // Set the new configuration as the current configuration\n    this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;\n\n    // Add the new configuration to the list of configurations\n    this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];\n\n    return dataResponse(response.data);\n  }\n\n  /**\n   * Update an existing configuration.\n   * @param configuration The configuration to update.\n   * @returns The updated configuration or an error if the request is not initialized.\n   */\n  public async updateConfiguration(configuration: Partial<Configuration>) {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error updating configuration: Nylas API Request is not initialized',\n      });\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Configuration>>({\n      method: 'PUT',\n      path: `scheduling/configurations/${configuration.id}`,\n      body: configuration,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error updating configuration: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error updating configuration: ' + response.error?.message,\n      });\n    }\n\n    // Set the new configuration as the current configuration\n    this.nylasSchedulerConfigStore.state.selectedConfiguration = response.data;\n\n    // If the configuration was updated, update the list of configurations\n    // If it doesn't exist, add it to the list\n    if (this.nylasSchedulerConfigStore.state.configurations.find(c => c.id === configuration.id)) {\n      this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.map(c => (c.id === configuration.id ? response.data : c));\n    } else {\n      this.nylasSchedulerConfigStore.state.configurations = [...this.nylasSchedulerConfigStore.state.configurations, response.data];\n    }\n\n    return dataResponse(response.data);\n  }\n\n  /**\n   * Delete a configuration by its ID.\n   * @param configurationId The ID of the configuration to delete.\n   * @returns The deleted configuration or an error if the request is not initialized.\n   */\n  public async deleteConfiguration(configurationId: string) {\n    if (!this.nylasApiRequest) {\n      console.warn('Nylas API Request is not initialized');\n      return dataResponse(null, {\n        message: 'Error deleting configuration: Nylas API Request is not initialized',\n      });\n    }\n\n    const [response, error] = await this.nylasApiRequest.request<NylasResponse<Configuration>>({\n      method: 'DELETE',\n      path: `scheduling/configurations/${configurationId}`,\n    });\n\n    if (error) {\n      return dataResponse(null, {\n        message: 'Error deleting configuration: ' + error.message,\n      });\n    }\n\n    if (isNylasErrorResponse(response)) {\n      return dataResponse(null, {\n        message: 'Error deleting configuration: ' + response.error?.message,\n      });\n    }\n\n    // Remove the configuration from the list\n    this.nylasSchedulerConfigStore.state.configurations = this.nylasSchedulerConfigStore.state.configurations.filter(c => c.id !== configurationId);\n\n    // If the deleted configuration was the current configuration, reset it\n    if (this.nylasSchedulerConfigStore.state.selectedConfiguration?.id === configurationId) {\n      this.nylasSchedulerConfigStore.resetSelectedConfiguration();\n    }\n\n    return dataResponse(response.data);\n  }\n}\n"]}