{"version":3,"file":"folders.js","sourceRoot":"","sources":["../../../../src/connector/shared/api/folders.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,aAAa,EAAgC,oBAAoB,EAAE,MAAM,aAAa,CAAC;AAGxG,MAAM,OAAO,qBAAqB;IAKhC,YAAY,SAAwB,EAAE,cAAkC,EAAE,iBAAwC;QAChH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAKM,KAAK,CAAC,UAAU;QACrB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAGD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;YACrE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QAGD,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC;QAG/C,MAAM,IAAI,GAAG,uBAAuB,CAAC;QACrC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAA0B,IAAI,CAAC,CAAC;QACrF,IAAI,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,MAAM,IAAI,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QAGD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAG/C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAE7C,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAc;QACtC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,kBAAkB,GAAG;YAChD,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,kBAAkB,IAAI,EAAE,CAAC;SAC3D,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Folder, NylasAPIError, NylasAuthType, NylasResponse, isNylasErrorResponse } from '@nylas/core';\nimport { NylasAuthStoreType, NylasMailboxStoreType } from '../../../components';\n\nexport class NylasFoldersConnector {\n  private nylasAuth: NylasAuthType;\n  private nylasAuthStore: NylasAuthStoreType;\n  private nylasMailboxStore: NylasMailboxStoreType;\n\n  constructor(nylasAuth: NylasAuthType, nylasAuthStore: NylasAuthStoreType, nylasMailboxStore: NylasMailboxStoreType) {\n    this.nylasAuth = nylasAuth;\n    this.nylasAuthStore = nylasAuthStore;\n    this.nylasMailboxStore = nylasMailboxStore;\n  }\n\n  /**\n   * Returns the list of folders.\n   */\n  public async getFolders(): Promise<Folder[]> {\n    if (!this.nylasAuthStore.state.isAuthenticated) {\n      throw new Error('Not authenticated');\n    }\n\n    // Now make sure we have a read-only or modify scopes\n    if (!this.nylasAuth.hasScopeByType('email', ['read-only', 'modify'])) {\n      throw new Error('Missing thread:read-only scope');\n    }\n\n    // Set the state to loading.\n    this.nylasMailboxStore.state.state = 'loading';\n\n    // Make the API request.\n    const path = `/v3/grants/me/folders`;\n    const response = await this.nylasAuth.nylasAPIRequest<NylasResponse<Folder[]>>(path);\n    if (isNylasErrorResponse(response)) {\n      throw new NylasAPIError(response.error);\n    }\n\n    // Set the threads in the store.\n    const folders = response.data;\n    this.nylasMailboxStore.state.folders = folders;\n\n    // Set the state to ready.\n    this.nylasMailboxStore.state.state = 'ready';\n\n    return folders;\n  }\n\n  public async selectFolder(folder: Folder) {\n    this.nylasMailboxStore.state.threadsQueryParams = {\n      in: folder.id,\n      ...(this.nylasMailboxStore.state.threadsQueryParams || {}),\n    };\n  }\n}\n"]}