{"version":3,"file":"scheduler-store.js","sourceRoot":"","sources":["../../src/stores/scheduler-store.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEtC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AA4C7C,MAAM,UAAU,yBAAyB,CAAC,eAAkD,EAAE;IAC5F,MAAM,sBAAsB,GAA6B;QACvD,YAAY,EAAE,IAAI;QAClB,gBAAgB,EAAE,SAAS,CAAC,QAAQ;QACpC,gBAAgB,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ;QAClE,gBAAgB,EAAE,IAAI;QACtB,eAAe,EAAE,KAAK;QACtB,eAAe,EAAE,IAAI;QACrB,YAAY,EAAE,EAAE;QAChB,KAAK,EAAE,OAAO;QACd,SAAS,EAAE,IAAI;QACf,kBAAkB,EAAE,IAAI;QACxB,SAAS,EAAE,KAAK;QAChB,aAAa,EAAE,IAAI;QACnB,GAAG,YAAY;KAChB,CAAC;IACF,KAAK,CAAC,4BAA4B,EAAE,sBAAsB,CAAC,CAAC;IAC5D,MAAM,KAAK,GAAG,WAAW,CAA2B,sBAAsB,CAAC,CAAC;IAE5E,KAAK,CAAC,QAAQ,CAAC,cAAc,EAAE,YAAY,CAAC,EAAE;QAC5C,KAAK,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;QACxC,MAAM,eAAe,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1E,KAAK,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;QAC9C,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAOH,KAAK,CAAC,KAAK,GAAG,GAAG,EAAE;QACjB,KAAK,MAAM,GAAG,IAAI,sBAAsB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,sBAAsB,CAAC,GAA0C,CAAC,CAAC;YACjF,KAAK,CAAC,GAAG,CAAC,GAAU,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { DataState, NylasEvent } from '@/common/types';\nimport { debug } from '@/utils/utils';\nimport { NylasSchedulerBookingData, Timeslot } from '@nylas/core';\nimport { createStore } from '@stencil/store';\n\nexport type AvailabilityTimeslot = {\n  emails: string[];\n  start_time: Date;\n  end_time: Date;\n};\n\nexport type LoadingState = {\n  api: 'availability' | 'createBooking' | 'cancelBooking' | 'rescheduleBooking';\n};\n\nexport type ConfigSettings = {\n  scheduler: {\n    available_days_in_future: number;\n    min_cancellation_notice: number;\n  };\n  organizer: {\n    name: string;\n    email: string;\n  };\n};\n\nexport interface NylasSchedulerStoreState {\n  selectedDate: Date | null;\n  selectedLanguage: string;\n  selectedTimezone: string;\n  selectedTimeslot: Timeslot | null;\n  showBookingForm: boolean;\n  selectableDates: Date[] | null;\n  availability: AvailabilityTimeslot[];\n  state: DataState;\n  eventInfo: NylasEvent | null;\n  cancelledEventInfo: Partial<NylasEvent> | null;\n  bookingInfo?: NylasSchedulerBookingData;\n  rescheduleBookingId?: string;\n  cancelBookingId?: string;\n  isLoading: boolean;\n  nylasBranding?: boolean;\n  configSettings?: ConfigSettings;\n}\n\nexport type NylasSchedulerStoreType = ReturnType<typeof CreateNylasSchedulerStore>;\n\nexport function CreateNylasSchedulerStore(defaultState: Partial<NylasSchedulerStoreState> = {}) {\n  const defaultNylasStoreState: NylasSchedulerStoreState = {\n    selectedDate: null,\n    selectedLanguage: navigator.language,\n    selectedTimezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    selectedTimeslot: null,\n    showBookingForm: false,\n    selectableDates: null,\n    availability: [],\n    state: 'ready',\n    eventInfo: null,\n    cancelledEventInfo: null,\n    isLoading: false,\n    nylasBranding: true,\n    ...defaultState,\n  };\n  debug(`[defaultNylasStoreState]: `, defaultNylasStoreState);\n  const store = createStore<NylasSchedulerStoreState>(defaultNylasStoreState);\n\n  store.onChange('availability', availability => {\n    debug(`[availability]: `, availability);\n    const selectableDates = availability.map(timeslot => timeslot.start_time);\n    debug(`[selectableDates]: `, selectableDates);\n    store.set('selectableDates', selectableDates);\n  });\n\n  /**\n   * Reset the Nylas store to its default state.\n   * There is something wrong with the stencil/store reset method,\n   * so we have to do it via this hack.\n   */\n  store.reset = () => {\n    for (const key in defaultNylasStoreState) {\n      const value = defaultNylasStoreState[key as keyof typeof defaultNylasStoreState];\n      store.set(key as any, value);\n    }\n  };\n\n  return store;\n}\n"]}