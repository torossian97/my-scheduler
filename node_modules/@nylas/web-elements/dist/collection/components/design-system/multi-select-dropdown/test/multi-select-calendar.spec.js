import { newSpecPage } from "@stencil/core/testing";
import { MultiSelectDropdown } from "../multi-select-dropdown";
import { h } from "@stencil/core";
describe('multi-select-dropdown', () => {
    let element;
    beforeEach(async () => {
        const page = await newSpecPage({
            components: [MultiSelectDropdown],
            html: `<multi-select-dropdown></multi-select-dropdown>`,
            template: () => {
                const options = [
                    { value: '1', label: 'Option 1' },
                    { value: '2', label: 'Option 2' },
                    { value: '3', label: 'Option 3' },
                ];
                return h("multi-select-dropdown", { name: 'calendar', label: "Only schedule meetings when I'm available on", options: options });
            },
        });
        element = page.rootInstance;
    });
    it('should toggle dropdown open and close', async () => {
        expect(element.isOpen).toBeFalsy();
        element.toggleDropdown();
        expect(element.isOpen).toBeTruthy();
        element.toggleDropdown();
        expect(element.isOpen).toBeFalsy();
    });
    it('should handle keyboard events to navigate options', async () => {
        const changedSpy = jest.fn();
        element.selectedOptionsChanged = {
            emit: changedSpy,
        };
        const keyDownEvent = new KeyboardEvent('keydown', { key: 'ArrowDown' });
        element.handleListboxKeydown(keyDownEvent);
        const keyEnterEvent = new KeyboardEvent('keydown', { key: 'Enter' });
        element.handleListboxKeydown(keyEnterEvent);
        expect(changedSpy).toHaveBeenCalled();
    });
    it('should close dropdown when clicking outside', async () => {
        element.isOpen = true;
        const mockEvent = new MouseEvent('click');
        Object.defineProperty(mockEvent, 'composedPath', { value: () => [] });
        element.handleOutsideClick(mockEvent);
        expect(element.isOpen).toBeFalsy();
    });
    it('should select an option and emit selectedOptionsChanged event', async () => {
        const multiSelectDropdown = new MultiSelectDropdown();
        const changedSpy = jest.fn();
        multiSelectDropdown.selectedOptionsChanged = {
            emit: changedSpy,
        };
        multiSelectDropdown.name = 'calendar';
        multiSelectDropdown.options = [{ value: '1', label: 'Primary' }];
        multiSelectDropdown.selectOption({ value: '1', label: 'Primary' });
        expect(changedSpy).toHaveBeenCalled();
    });
});
//# sourceMappingURL=multi-select-calendar.spec.js.map
