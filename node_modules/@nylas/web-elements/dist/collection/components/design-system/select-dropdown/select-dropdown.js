import { h } from "@stencil/core";
export class SelectDropdown {
    constructor() {
        this.name = undefined;
        this.options = [];
        this.defaultSelectedOption = undefined;
        this.withSearch = true;
        this.pluralizedLabel = '';
        this.selectedOption = this.defaultSelectedOption || null;
        this.isOpen = false;
        this.searchValue = '';
        this.filteredOptions = [...this.options];
        this.ariaActivedescendant = '';
    }
    optionsChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = newValue;
    }
    defaultSelectedOptionChangedHandler(newValue, oldValue) {
        if (newValue.label === oldValue.label) {
            return;
        }
        this.selectedOption = newValue;
    }
    componentWillLoad() {
        this.filteredOptions = this.options;
        if (!this.selectedOption && !!this.defaultSelectedOption) {
            this.selectedOption = this.defaultSelectedOption;
        }
        if (!this.selectedOption && this.options.length > 0) {
            this.selectedOption = this.options[0];
        }
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    filterOptions(event) {
        const value = event.target.value;
        this.searchValue = value;
        this.filteredOptions = this.options.filter(option => option.label.toLowerCase().includes(value.toLowerCase()));
    }
    selectOption(option) {
        this.selectedOption = option;
        this.toggleDropdown();
        this.selectedOptionChanged.emit({
            value: option.value,
            name: this.name,
        });
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                this.inputRef?.focus();
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleListboxKeydown(e) {
        const items = this.filteredOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === items.length - 1) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            this.ariaActivedescendant = items[nextIndex].value;
            this.focusOption(nextIndex);
        }
        else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === 0) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            this.ariaActivedescendant = items[prevIndex].value;
            this.focusOption(prevIndex);
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            if (this.ariaActivedescendant) {
                this.selectOption(items[currentIndex]);
            }
        }
        else if (e.key === 'Escape') {
            this.isOpen = false;
        }
    }
    focusOption(index) {
        const option = this.filteredOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    handleComboboxKeyDown(event) {
        if (event.key === 'ArrowDown' || (event.key == 'Tab' && !event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[0].value;
            this.focusOption(0);
        }
        else if (event.key === 'ArrowUp' || (event.key === 'Tab' && event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value;
            this.focusOption(this.filteredOptions.length - 1);
        }
        else if (event.key === 'Escape') {
            this.isOpen = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (h("div", { key: '4b92f2c224e4cb1ec751c8dd46ff5bd16883110a', class: "dropdown", part: "sd_dropdown" }, h("button", { key: 'de1f96fe628dc11b3b7991f65065ec1ae55372fa', part: "sd_dropdown-button", class: { dropbtn: true, open: this.isOpen }, onClick: () => this.toggleDropdown(), "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name, onKeyDown: e => this.handleSelectButtonKeyDown(e) }, h("slot", { key: '05166ff83a6f0cbf3a63d79e257570c996c2972d', name: "select-icon", "aria-hidden": "true" }), h("span", { key: '99d79f6d8969fa6e88092af65ed7438d06c70693', class: "selected-option", part: "sd_dropdown-button-selected-label" }, this.selectedOption?.label ? `${this.selectedOption?.label + this.pluralizedLabel}` : ''), h("span", { key: '220bed22a19b8e73a0b5f420a95169b5593138a3', class: {
                open: this.isOpen,
                closed: !this.isOpen,
                chevron: true,
            }, "aria-hidden": "true" }, h("chevron-icon", { key: '6ed5947377584f0adaa466c5f2c189e4795e72e2', width: "16", height: "16" }))), this.isOpen ? (h("div", { class: "dropdown-content", part: "sd_dropdown-content" }, this.withSearch && (h("div", { class: { 'search-box': true, 'open': this.isOpen } }, h("search-icon", { width: "15", height: "15", class: 'icon' }), h("input", { type: "text", role: "combobox", placeholder: "Search", value: this.searchValue, ref: el => (this.inputRef = el), onInput: event => this.filterOptions(event), onKeyDown: e => this.handleComboboxKeyDown(e) }))), h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.filteredOptions.map(option => (h("li", { tabindex: "0", key: option.value, id: option.value, onClick: () => this.selectOption(option), role: "option" }, option.labelHTML ? option.labelHTML : option.label)))))) : null));
    }
    static get is() { return "select-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["select-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["select-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the dropdown"
                },
                "attribute": "name",
                "reflect": false
            },
            "options": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption[]",
                    "resolved": "DropdownOption[]",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options to display in the dropdown"
                },
                "defaultValue": "[]"
            },
            "defaultSelectedOption": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption",
                    "resolved": "DropdownOption | undefined",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default selected option"
                }
            },
            "withSearch": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Should show search input"
                },
                "attribute": "with-search",
                "reflect": false,
                "defaultValue": "true"
            },
            "pluralizedLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Show pluralized label for the selected option. This is s tring that is appended to the selected option label as a suffix."
                },
                "attribute": "pluralized-label",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "selectedOption": {},
            "isOpen": {},
            "searchValue": {},
            "filteredOptions": {},
            "ariaActivedescendant": {}
        };
    }
    static get events() {
        return [{
                "method": "selectedOptionChanged",
                "name": "selectedOptionChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected option is changed"
                },
                "complexType": {
                    "original": "{\n    value: DropdownOption['value'];\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "optionsChangedHandler"
            }, {
                "propName": "defaultSelectedOption",
                "methodName": "defaultSelectedOptionChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleOutsideClick",
                "target": "document",
                "capture": true,
                "passive": false
            }];
    }
}
//# sourceMappingURL=select-dropdown.js.map
