var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasMailboxPagination {
    constructor() {
        this.state = 'ready';
        this.hasNextPage = false;
        this.hasPreviousPage = false;
        this.scrollTarget = 'container';
        this.mobileOnlyInfiniteScroll = true;
        this.mobileViewPortWidth = 768;
        debug(`[nylas-pagination] Constructed`);
        this.isScrollAtContainerBottom = this.isScrollAtContainerBottom.bind(this);
        this.isScrollAtPageBottom = this.isScrollAtPageBottom.bind(this);
        this.nextPage = this.nextPage.bind(this);
        this.previousPage = this.previousPage.bind(this);
        this.handlePageScroll = this.handlePageScroll.bind(this);
        this.handleContainerScroll = this.handleContainerScroll.bind(this);
    }
    connectedCallback() {
        debug(`[nylas-pagination] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-pagination] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-pagination] Component did load`);
        if (this.containerElement) {
            this.containerElement.addEventListener('scroll', this.handleContainerScroll);
        }
    }
    async componentWillRender() {
        debug(`[nylas-pagination] Component will render`);
    }
    disconnectedCallback() {
        debug(`[nylas-pagination] Component disconnected`);
        if (this.containerElement) {
            this.containerElement.removeEventListener('scroll', this.handleContainerScroll);
        }
    }
    handlePageScroll(_event) {
        if (this.isScrollAtPageBottom() && this.canScroll && this.scrollTarget === 'page') {
            this.nextPage();
        }
    }
    async nextPage() {
        const hasChildren = this.host.children.length > 0;
        this.next.emit({
            hasChildren,
        });
    }
    async previousPage() {
        const hasChildren = this.host.children.length > 0;
        this.previous.emit({
            hasChildren,
        });
    }
    handleContainerScroll(_event) {
        if (this.isScrollAtContainerBottom() && this.canScroll && this.scrollTarget === 'container') {
            this.nextPage();
        }
    }
    isScrollAtContainerBottom() {
        if (!this.containerElement) {
            return false;
        }
        return this.containerElement && this.containerElement.scrollTop + this.containerElement.clientHeight >= this.containerElement.scrollHeight;
    }
    isScrollAtPageBottom() {
        return window.innerHeight + window.scrollY >= document.body.offsetHeight;
    }
    get canScroll() {
        const hasChildren = this.host.children.length > 0;
        return this.state === 'ready' && hasChildren && (!this.mobileOnlyInfiniteScroll || window.innerWidth < this.mobileViewPortWidth);
    }
    render() {
        const hasChildren = this.host.children.length > 0;
        if (hasChildren) {
            return (h(Host, null, h("div", { class: "container", ref: r => (this.containerElement = r) }, h("slot", null), this.canScroll && (h("div", { class: 'pagination' }, h("sp-theme", { scale: "medium", color: "dark" }, this.state === 'ready' && this.hasNextPage && (h("sp-button", { onClick: this.nextPage }, h("div", { slot: "icon" }, h("refresh-icon", { class: 'refres-icon' })), ' ', "Load more..."))))))));
        }
        return (h(Host, null, h("sp-theme", { scale: "medium", color: "dark" }, this.hasPreviousPage && (h("sp-button", { class: 'previous', parr: "previous", onClick: this.previousPage }, h("div", { slot: "icon" }, h("chevron-icon", { class: 'previous-icon' })), ' ', "Previous")), this.hasPreviousPage && this.hasNextPage && ' ', this.hasNextPage && (h("sp-button", { class: 'next', parr: "next", onClick: this.nextPage }, h("div", { slot: "icon" }, h("chevron-icon", { class: 'next-icon' })), ' ', "Next")))));
    }
    static get is() { return "nylas-mailbox-pagination"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-mailbox-pagination.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-mailbox-pagination.css"]
        };
    }
    static get properties() {
        return {
            "state": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'ready' | 'loading' | 'error'",
                    "resolved": "\"error\" | \"loading\" | \"ready\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "The state of the mailbox"
                        }],
                    "text": ""
                },
                "attribute": "state",
                "reflect": false,
                "defaultValue": "'ready'"
            },
            "hasNextPage": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "Whether or not the mailbox has a next or previous page of threads"
                        }],
                    "text": ""
                },
                "attribute": "has-next-page",
                "reflect": false,
                "defaultValue": "false"
            },
            "hasPreviousPage": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "Whether or not the mailbox has a previous page of threads"
                        }],
                    "text": ""
                },
                "attribute": "has-previous-page",
                "reflect": false,
                "defaultValue": "false"
            },
            "scrollTarget": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'container' | 'page'",
                    "resolved": "\"container\" | \"page\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "Whether or not the mailbox has a next or previous page of threads"
                        }],
                    "text": ""
                },
                "attribute": "scroll-target",
                "reflect": false,
                "defaultValue": "'container'"
            },
            "mobileOnlyInfiniteScroll": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "Whether or not the infinity scroll should only be enabled on mobile devices"
                        }],
                    "text": ""
                },
                "attribute": "mobile-only-infinite-scroll",
                "reflect": false,
                "defaultValue": "true"
            },
            "mobileViewPortWidth": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "The width of the mobile viewport"
                        }],
                    "text": ""
                },
                "attribute": "mobile-view-port-width",
                "reflect": false,
                "defaultValue": "768"
            }
        };
    }
    static get events() {
        return [{
                "method": "next",
                "name": "next",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "An event that is fired when the user scrolls to the bottom of the page"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "PaginationEvent",
                    "resolved": "{ hasChildren: boolean; }",
                    "references": {
                        "PaginationEvent": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination.tsx",
                            "id": "src/components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination.tsx::PaginationEvent"
                        }
                    }
                }
            }, {
                "method": "previous",
                "name": "previous",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "description",
                            "text": "An event that is fired when the user scrolls to the top of the page"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "PaginationEvent",
                    "resolved": "{ hasChildren: boolean; }",
                    "references": {
                        "PaginationEvent": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination.tsx",
                            "id": "src/components/mailbox/nylas-mailbox-pagination/nylas-mailbox-pagination.tsx::PaginationEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "nextPage": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "description",
                            "text": "Go to the next page of threads"
                        }]
                }
            },
            "previousPage": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "description",
                            "text": "Go to the previous page of threads"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get listeners() {
        return [{
                "name": "scroll",
                "method": "handlePageScroll",
                "target": "window",
                "capture": false,
                "passive": true
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-pagination',
        stateToProps: new Map([
            ['mailbox.hasNextThreadPage', 'hasNextPage'],
            ['mailbox.hasPreviousThreadPage', 'hasPreviousPage'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            next: async (event, nylasConnector) => {
                debug(`[nylas-pagination] Next page event fired`);
                const { hasChildren } = event.detail;
                await nylasConnector.threads.nextThreadPage(hasChildren ? 'append' : 'overwrite', !hasChildren);
            },
            previous: async (event, nylasConnector) => {
                debug(`[nylas-pagination] Previous page event fired`);
                const { hasChildren } = event.detail;
                await nylasConnector.threads.previousThreadPage(hasChildren ? 'append' : 'overwrite', !hasChildren);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMailboxPagination.prototype, "render", null);
//# sourceMappingURL=nylas-mailbox-pagination.js.map
