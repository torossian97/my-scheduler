var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasMailboxToolbarButton {
    constructor() {
        this.onClick = async () => {
            const method = this.method;
            debug(`[nylas-mailbox-toolbar-button] onClick`, { method, mailboxConnector: this.mailboxConnector });
            if (this.mailboxConnector && method) {
                const methodToCall = this.callMethod(this.mailboxConnector, method);
                if (methodToCall) {
                    await methodToCall();
                }
            }
        };
        this.method = undefined;
        this.dataState = undefined;
        this.iconOnly = false;
        this.mailboxConnector = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-if-state] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-if-state] Component did load`);
    }
    callMethod(obj, accessString) {
        const parts = accessString.split('.');
        let current = obj;
        for (const part of parts.slice(0, -1)) {
            current = current[part];
            if (!current) {
                return undefined;
            }
        }
        const methodName = parts[parts.length - 1];
        const method = current[methodName];
        if (typeof method === 'function') {
            return method.bind(current);
        }
        return undefined;
    }
    renderByState(state) {
        return state ? h("slot", { name: "loading" }, "Loading...") : h("slot", null, "Click");
    }
    hasSlot(name) {
        return !!this.host.querySelector(`[slot="${name}"]`);
    }
    render() {
        let state = false;
        const store = this.mailboxConnector?.nylasMailboxStore;
        if (typeof store !== 'undefined') {
            const storeKey = String(this.dataState);
            state = this.dataState ? store.get(storeKey) === 'loading' : false;
        }
        const key = state ? `state-loading` : 'state-ready';
        return (h(Host, { key: '2454ef2e4270d1642cabe57dacf53908fcdb34e6' }, h("sp-theme", { key: '97d71094fabc3466b87142dfdd1d0bb22659fd32', scale: "medium", color: "dark" }, h("sp-button", { onClick: this.onClick, disabled: state, key: key, "icon-only": this.iconOnly, label: this.renderByState(state) }, this.hasSlot('icon') && (h("div", { slot: "icon", class: 'slot' }, h("slot", { name: "icon" }))), !this.iconOnly && this.renderByState(state)))));
    }
    static get is() { return "nylas-mailbox-toolbar-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-mailbox-toolbar-button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-mailbox-toolbar-button.css"]
        };
    }
    static get properties() {
        return {
            "method": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "MethodsOfNylasMailboxConnector",
                    "resolved": "\"init\" | \"resetStores\" | \"logout\" | \"auth.isAuthenticated\" | \"messages.getMessages\" | \"messages.getThreadMessages\" | \"messages.downloadMessageAttachments\" | \"messages.summarizeText\" | \"messages.textToSpeech\" | \"threads.back\" | \"threads.getThreads\" | \"threads.getThread\" | \"threads.nextThreadPage\" | \"threads.previousThreadPage\" | \"threads.updateThreadQueryParams\" | \"threads.unSelectThread\" | \"threads.selectThread\" | \"threads.markThreadAsRead\" | \"threads.updateThread\" | \"folders.getFolders\" | \"folders.selectFolder\" | \"auth.logout\" | \"auth.validateSession\" | \"auth.getTokenInfo\" | \"auth.isAccessTokenValid\" | \"auth.getHostedAuthRedirectURL\" | \"auth.manageHostedAuthCodeExchange\" | \"nylasAuth.isAuthenticated\" | \"nylasAuth.logout\" | \"nylasAuth.getTokenInfo\" | \"nylasAuth.isAccessTokenValid\" | \"nylasAuth.getHostedAuthRedirectURL\" | \"nylasAuth.nylasAPIRequest\" | \"nylasAuth.exchangeAuthCodeForTokenInfo\" | \"nylasAuth.nylasDownloadFileRequest\" | \"nylasAuth.refreshAccessToken\" | \"nylasAuth.hasScopeByType\" | \"nylasAuth.hasScope\" | `nylasAuth.config.${string}` | \"nylasMailboxStore.set\" | \"nylasMailboxStore.use\" | \"nylasMailboxStore.reset\" | \"nylasMailboxStore.get\" | \"nylasMailboxStore.on\" | \"nylasMailboxStore.onChange\" | \"nylasMailboxStore.dispose\" | \"nylasMailboxStore.forceUpdate\" | `nylasMailboxStore.state.${string}` | \"nylasAuthStore.set\" | \"nylasAuthStore.use\" | \"nylasAuthStore.reset\" | \"nylasAuthStore.get\" | \"nylasAuthStore.on\" | \"nylasAuthStore.onChange\" | \"nylasAuthStore.dispose\" | \"nylasAuthStore.forceUpdate\" | \"nylasAuthStore.state.state.\" | \"nylasAuthStore.state.isAuthenticated.\" | \"nylasAuthStore.state.tokenInfo.\" | \"nylasAuthStore.state.tokenInfo.email.\" | \"nylasAuthStore.state.tokenInfo.grant_id.\" | \"nylasAuthStore.state.tokenInfo.expires_in.\" | \"nylasAuthStore.state.tokenInfo.id_token.\" | \"nylasAuthStore.state.tokenInfo.token_type.\" | \"nylasAuthStore.state.tokenInfo.scope.\" | \"nylasAuthStore.state.tokenInfo.refresh_token.\" | \"router.init\" | \"router.addRouteChangeListener\" | \"router.setRoute\" | \"router.navigate\" | \"router.getRoute\" | \"router.getBasePath\" | \"router.matchRoute\" | \"mailboxStore.set\" | \"mailboxStore.use\" | \"mailboxStore.reset\" | \"mailboxStore.get\" | \"mailboxStore.on\" | \"mailboxStore.onChange\" | \"mailboxStore.dispose\" | \"mailboxStore.forceUpdate\" | `mailboxStore.state.${string}` | \"authStore.set\" | \"authStore.use\" | \"authStore.reset\" | \"authStore.get\" | \"authStore.on\" | \"authStore.onChange\" | \"authStore.dispose\" | \"authStore.forceUpdate\" | \"authStore.state.state.\" | \"authStore.state.isAuthenticated.\" | \"authStore.state.tokenInfo.\" | \"authStore.state.tokenInfo.email.\" | \"authStore.state.tokenInfo.grant_id.\" | \"authStore.state.tokenInfo.expires_in.\" | \"authStore.state.tokenInfo.id_token.\" | \"authStore.state.tokenInfo.token_type.\" | \"authStore.state.tokenInfo.scope.\" | \"authStore.state.tokenInfo.refresh_token.\"",
                    "references": {
                        "MethodsOfNylasMailboxConnector": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button.tsx",
                            "id": "src/components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button.tsx::MethodsOfNylasMailboxConnector"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the mailbox connector method to call."
                },
                "attribute": "method",
                "reflect": false
            },
            "dataState": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The value of the state to compare against to check if the data is loading, error, or ready."
                },
                "attribute": "data-state",
                "reflect": false
            },
            "iconOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If true, then the component will render the icon only."
                },
                "attribute": "icon-only",
                "reflect": false,
                "defaultValue": "false"
            },
            "mailboxConnector": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasMailboxConnectorInterface",
                    "resolved": "NylasMailboxConnectorInterface | undefined",
                    "references": {
                        "NylasMailboxConnectorInterface": {
                            "location": "import",
                            "path": "@/connector/connector-interface",
                            "id": "src/connector/connector-interface.ts::NylasMailboxConnectorInterface"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If true, then the component will render if the state is true.\nThis prop is used with the `state` prop."
                }
            }
        };
    }
    static get elementRef() { return "host"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-mailbox-toolbar-button',
        connectorToProp: 'mailboxConnector',
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMailboxToolbarButton.prototype, "render", null);
//# sourceMappingURL=nylas-mailbox-toolbar-button.js.map
