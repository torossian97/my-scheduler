import { NylasBaseProvider } from "../../../common/abstract-provider";
import { NylasMailboxConnector } from "../../../connector/nylas-mailbox-connector/index";
import { HashRouter } from "../../../routers/hash-router";
import { CreateNylasAuthStore } from "../../../stores/auth-store";
import { CreateNylasMailboxStore } from "../../../stores/mailbox-store";
import { NylasAuth } from "@nylas/core";
import { Host, h } from "@stencil/core";
import { debug } from "../../../utils/utils";
export class NylasMailbox {
    constructor() {
        this.handleAuthChange = async (isAuthenticated) => {
            if (isAuthenticated) {
                this.loggedIn.emit(this.host);
            }
            else {
                const loggedOutEvent = this.loggedOut.emit(this.host);
                if (!loggedOutEvent.defaultPrevented) {
                    await this.nylasMailboxConnector?.logout();
                }
            }
        };
        this.automaticComponentRegistration = true;
        this.eventOverrides = {};
        this.authConfig = undefined;
        this.defaultAuthStoreState = undefined;
        this.defaultMailboxStoreState = undefined;
    }
    connectedCallback() {
        debug('[nylas-mailbox] connectedCallback');
    }
    async componentWillLoad() {
        this.stores = {
            auth: CreateNylasAuthStore(this.defaultAuthStoreState),
            mailbox: CreateNylasMailboxStore(this.defaultMailboxStoreState),
        };
        this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        this.router = new HashRouter();
        this.nylasAuth = NylasAuth({
            apiUri: 'https://api.us.nylas.com',
            elementsApiUri: 'https://elements.us.nylas.com',
            storageType: 'indexeddb',
            clientId: 'YOUR_CLIENT_ID',
            defaultScopes: [],
            redirectURI: '/',
            ...this.authConfig,
        });
        const authStore = this.baseProvider?.getStore('auth');
        if (!authStore) {
            throw new Error('Auth store is not defined');
        }
        const mailboxStore = this.baseProvider?.getStore('mailbox');
        if (!mailboxStore) {
            throw new Error('Mailbox store is not defined');
        }
        this.nylasMailboxConnector = new NylasMailboxConnector(this.router, this.nylasAuth, authStore, mailboxStore);
        const initEvent = this.init.emit(this.host);
        if (!initEvent.defaultPrevented) {
            await this.nylasMailboxConnector?.auth.validateSession();
        }
        this.router?.addRouteChangeListener(`/thread/:threadId`, async (_route, _path, routeParams) => {
            const threadId = routeParams.threadId;
            const thread = await this.nylasMailboxConnector?.threads.getThread(threadId);
            if (thread) {
                this.nylasMailboxConnector?.mailboxStore.set('selectedThread', thread);
            }
        });
        this.router?.addRouteChangeListener(`/`, async (_route, _path, _routeParams) => {
            if (!authStore.state.isAuthenticated) {
                return;
            }
            this.nylasMailboxConnector?.threads.unSelectThread();
            this.nylasMailboxConnector?.folders.getFolders();
            const queryParams = window.location.hash.split('?')[1];
            if (queryParams) {
                const params = new URLSearchParams(queryParams);
                const searchQuery = params.get('query');
                if (searchQuery) {
                    await this.nylasMailboxConnector?.threads.getThreads({
                        search_query_native: searchQuery,
                        page_token: undefined,
                    });
                }
            }
            else {
                this.nylasMailboxConnector?.threads.getThreads();
            }
        });
        this.router?.init();
        this.handleAuthChange(authStore.state.isAuthenticated);
        this.baseProvider?.componentWillLoad(this.nylasMailboxConnector);
    }
    async componentDidLoad() {
        const authStore = this.baseProvider?.getStore('auth');
        if (!authStore) {
            throw new Error('Auth store is not defined');
        }
        authStore.onChange('isAuthenticated', this.handleAuthChange);
        this.baseProvider?.componentDidLoad();
    }
    componentDisconnected() {
        this.baseProvider?.componentDisconnected();
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async getMailboxStore() {
        return this.baseProvider?.getStore('mailbox');
    }
    async getAuthStore() {
        return this.baseProvider?.getStore('auth');
    }
    async getNylasAuth() {
        return this.nylasAuth;
    }
    async getNylasMailboxConnector() {
        return this.nylasMailboxConnector;
    }
    render() {
        return (h(Host, { key: '662c4d3f763c5cf9db31c4d2ba26bcdf47ead164' }, h("slot", { key: '5c2b75a569779dd2af6388648a4304721e82ba76' })));
    }
    static get is() { return "nylas-mailbox"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-mailbox.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-mailbox.css"]
        };
    }
    static get properties() {
        return {
            "automaticComponentRegistration": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Automatically register components that have the `@RegisterComponent` decorator.\nIf this is set to false, you will need to manually register components using the\n`registerComponent` method."
                },
                "attribute": "automatic-component-registration",
                "reflect": false,
                "defaultValue": "true"
            },
            "eventOverrides": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "EventOverride<Exclude<typeof this.nylasMailboxConnector, undefined>>",
                    "resolved": "{ [x: string]: (event: CustomEvent<any>, connector?: NylasMailboxConnector | undefined) => Promise<void>; }",
                    "references": {
                        "EventOverride": {
                            "location": "import",
                            "path": "@/common/component-types",
                            "id": "src/common/component-types.ts::EventOverride"
                        },
                        "Exclude": {
                            "location": "global",
                            "id": "global::Exclude"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This provides a way to override the default event handlers."
                },
                "defaultValue": "{}"
            },
            "authConfig": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AuthConfig",
                    "resolved": "undefined | { apiUri: string; elementsApiUri: string; clientId: string; defaultScopes: string[]; storageType: \"indexeddb\" | \"localstorage\"; redirectURI: string; }",
                    "references": {
                        "AuthConfig": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AuthConfig"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The Nylas Auth configuration.\nUsed to manage all things authentication with Nylas."
                }
            },
            "defaultAuthStoreState": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasAuthStoreState",
                    "resolved": "NylasAuthStoreState | undefined",
                    "references": {
                        "NylasAuthStoreState": {
                            "location": "import",
                            "path": "@/stores/auth-store",
                            "id": "src/stores/auth-store.ts::NylasAuthStoreState"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default auth store state.\nUsed to set the initial state of the auth store."
                }
            },
            "defaultMailboxStoreState": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasMailboxStoreState",
                    "resolved": "NylasMailboxStoreState | undefined",
                    "references": {
                        "NylasMailboxStoreState": {
                            "location": "import",
                            "path": "@/stores/mailbox-store",
                            "id": "src/stores/mailbox-store.ts::NylasMailboxStoreState"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default mailbox store state.\nUsed to set the initial state of the mailbox store."
                }
            }
        };
    }
    static get events() {
        return [{
                "method": "init",
                "name": "init",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the provider is initialized.\nIt can be used to set the initial state of the provider,\nor to prevent the provider from firing some default behavior."
                },
                "complexType": {
                    "original": "HTMLNylasMailboxElement",
                    "resolved": "HTMLNylasMailboxElement",
                    "references": {
                        "HTMLNylasMailboxElement": {
                            "location": "global",
                            "id": "global::HTMLNylasMailboxElement"
                        }
                    }
                }
            }, {
                "method": "loggedIn",
                "name": "loggedIn",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NyalsAuth isAuthenticated state changes\nto true."
                },
                "complexType": {
                    "original": "HTMLNylasMailboxElement",
                    "resolved": "HTMLNylasMailboxElement",
                    "references": {
                        "HTMLNylasMailboxElement": {
                            "location": "global",
                            "id": "global::HTMLNylasMailboxElement"
                        }
                    }
                }
            }, {
                "method": "loggedOut",
                "name": "loggedOut",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NyalsAuth isAuthenticated state changes\nto true."
                },
                "complexType": {
                    "original": "HTMLNylasMailboxElement",
                    "resolved": "HTMLNylasMailboxElement",
                    "references": {
                        "HTMLNylasMailboxElement": {
                            "location": "global",
                            "id": "global::HTMLNylasMailboxElement"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getMailboxStore": {
                "complexType": {
                    "signature": "() => Promise<NylasMailboxStoreType | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasMailboxStoreState": {
                            "location": "import",
                            "path": "@/stores/mailbox-store",
                            "id": "src/stores/mailbox-store.ts::NylasMailboxStoreState"
                        },
                        "NylasMailboxStoreType": {
                            "location": "import",
                            "path": "@/stores/mailbox-store",
                            "id": "src/stores/mailbox-store.ts::NylasMailboxStoreType"
                        }
                    },
                    "return": "Promise<ObservableMap<NylasMailboxStoreState> | undefined>"
                },
                "docs": {
                    "text": "This method is used to retrieve the mailboxStore instance",
                    "tags": [{
                            "name": "returns",
                            "text": "The mailboxStore instance"
                        }]
                }
            },
            "getAuthStore": {
                "complexType": {
                    "signature": "() => Promise<NylasAuthStoreType | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasAuthStoreState": {
                            "location": "import",
                            "path": "@/stores/auth-store",
                            "id": "src/stores/auth-store.ts::NylasAuthStoreState"
                        },
                        "NylasAuthStoreType": {
                            "location": "import",
                            "path": "@/stores/auth-store",
                            "id": "src/stores/auth-store.ts::NylasAuthStoreType"
                        }
                    },
                    "return": "Promise<ObservableMap<NylasAuthStoreState> | undefined>"
                },
                "docs": {
                    "text": "This method is used to retrieve the authStore instance",
                    "tags": [{
                            "name": "returns",
                            "text": "The authStore instance"
                        }]
                }
            },
            "getNylasAuth": {
                "complexType": {
                    "signature": "() => Promise<NylasAuthType | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AuthConfig": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AuthConfig"
                        },
                        "RequestInit": {
                            "location": "global",
                            "id": "global::RequestInit"
                        },
                        "T": {
                            "location": "global",
                            "id": "global::T"
                        },
                        "ReadableStream": {
                            "location": "global",
                            "id": "global::ReadableStream"
                        },
                        "Uint8Array": {
                            "location": "global",
                            "id": "global::Uint8Array"
                        },
                        "T_2": {
                            "location": "global",
                            "id": "global::T_2"
                        },
                        "T_3": {
                            "location": "global",
                            "id": "global::T_3"
                        },
                        "Blob": {
                            "location": "global",
                            "id": "global::Blob"
                        },
                        "NylasAuthType": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasAuthType"
                        }
                    },
                    "return": "Promise<{ config: AuthConfig; getHostedAuthRedirectURL(scopes?: string[] | undefined, email?: string | undefined, provider?: string | undefined): Promise<string>; nylasAPIRequest: { <T>(path: string, method?: string | undefined, body?: any, parseJSON?: boolean | undefined, domain?: string | undefined, request?: RequestInit | undefined): Promise<T>; <T_1>(path: string, method: string, body: any, parseJSON: false, domain?: string | undefined, request?: RequestInit | undefined): Promise<ReadableStream<Uint8Array> | null>; <T_2>(path: string, method: string, body: any, parseJSON: true, domain?: string | undefined, request?: RequestInit | undefined): Promise<T_2>; <T_3>(path: string, method: string, body: any, parseJSON: boolean, domain?: string | undefined, request?: RequestInit | undefined): Promise<T_3 | ReadableStream<Uint8Array> | null>; }; exchangeAuthCodeForTokenInfo(code: string): Promise<TokenExchangeResponse | null>; nylasDownloadFileRequest(path: string, method?: string | undefined, body?: any): Promise<Blob>; logout(): Promise<void>; isAuthenticated(): Promise<boolean>; getTokenInfo(): Promise<TokenInfo | null>; isAccessTokenValid(): Promise<boolean>; refreshAccessToken(): Promise<TokenExchangeResponse | null>; hasScopeByType(service: \"email\" | undefined, types: string | string[]): Promise<boolean>; hasScope(scope: string | string[]): Promise<boolean>; } | undefined>"
                },
                "docs": {
                    "text": "This method is used to retrieve the NylasAuth instance",
                    "tags": [{
                            "name": "returns",
                            "text": "The NylasAuth instance"
                        }]
                }
            },
            "getNylasMailboxConnector": {
                "complexType": {
                    "signature": "() => Promise<NylasMailboxConnector | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasMailboxConnector": {
                            "location": "import",
                            "path": "@/connector/nylas-mailbox-connector",
                            "id": "src/connector/nylas-mailbox-connector/index.ts::NylasMailboxConnector"
                        }
                    },
                    "return": "Promise<NylasMailboxConnector | undefined>"
                },
                "docs": {
                    "text": "This method is used to retrieve the NylasMailboxConnector instance",
                    "tags": [{
                            "name": "returns",
                            "text": "The NylasMailboxConnector instance"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get listeners() {
        return [{
                "name": "registerComponent",
                "method": "registerComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "unregisterComponent",
                "method": "unregisterComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=nylas-mailbox.js.map
