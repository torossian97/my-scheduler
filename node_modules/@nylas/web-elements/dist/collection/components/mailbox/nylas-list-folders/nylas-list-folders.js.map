{"version":3,"file":"nylas-list-folders.js","sourceRoot":"","sources":["../../../../src/components/mailbox/nylas-list-folders/nylas-list-folders.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { debug, formatFolderName, toTitleCase } from '@/utils/utils';\nimport { Component, Event, EventEmitter, Fragment, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../..';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { Folder } from '@nylas/core';\n\n@Component({\n  tag: 'nylas-list-folders',\n  styleUrl: 'nylas-list-folders.scss',\n  shadow: true,\n})\nexport class NylasListFolders {\n  @Prop() readonly folders?: Folder[];\n  @Prop() readonly selectedFolder?: string;\n\n  @Event() readonly folderSelected!: EventEmitter<Folder>;\n\n  @State() defaultFolders?: Folder[];\n  @State() otherFolders?: Folder[];\n\n  constructor() {}\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-list-folders] Component will load`);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-list-folders] Component did load`);\n  }\n\n  @Watch('folders')\n  watchFolders(newFolders: Folder[]) {\n    debug(`[nylas-list-folders] watchFolders`, { newFolders });\n    // Expected default folders\n    const defaultFolders = ['inbox', 'drafts', 'sent', 'starred', 'spam', 'archive', 'trash'];\n\n    // Only include default folders that are in the list of folders, and sort them by the default order\n    this.defaultFolders = defaultFolders\n      .filter(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .map(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .filter(folder => typeof folder !== 'undefined')\n      .sort((a, b) => defaultFolders.indexOf(a?.name ?? '') - defaultFolders.indexOf(b?.name ?? '')) as Folder[];\n\n    // Only include folders that are not default folders, and sort them by name\n    this.otherFolders = newFolders\n      .filter(folder => !defaultFolders.find(folderName => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? '')) as Folder[];\n  }\n\n  private folderSelectedHandler = (folder: Folder) => {\n    this.folderSelected?.emit(folder);\n  };\n\n  private formatFolderName(folder: Folder) {\n    return toTitleCase(folder.name?.replace('CATEGORY_', '') ?? 'Unknown');\n  }\n\n  private getFolderIcon(folder: Folder) {\n    switch (folder.name?.toLowerCase()) {\n      case 'inbox':\n        return <inbox-icon></inbox-icon>;\n      case 'drafts':\n        return <drafts-icon></drafts-icon>;\n      case 'sent':\n        return <sent-icon></sent-icon>;\n      case 'starred':\n        return <star-icon></star-icon>;\n      case 'spam':\n        return <spam-icon></spam-icon>;\n      case 'archive':\n        return <archive-icon></archive-icon>;\n      case 'trash':\n        return <trash-icon></trash-icon>;\n      default:\n        return <folder-icon></folder-icon>;\n    }\n  }\n\n  @RegisterComponent<NylasListFolders, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-pagination',\n    stateToProps: new Map([\n      ['mailbox.folders', 'folders'],\n      ['mailbox.selectedFolder', 'selectedFolder'],\n    ]),\n    eventToProps: {\n      folderSelected: async (_event, nylasConnector) => {\n        debug(`[nylas-list-folders] folderSelected event`, { _event });\n        await nylasConnector.threads.getThreads({\n          page_token: undefined,\n          in: formatFolderName(_event.detail.id ?? 'inbox'),\n        });\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"folders\">\n          {this.defaultFolders?.map(folder => (\n            <sp-button\n              onClick={() => this.folderSelectedHandler(folder)}\n              class={{\n                folder: true,\n                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),\n              }}\n            >\n              <div slot=\"icon\" class=\"icon\">\n                {this.getFolderIcon(folder)}\n              </div>\n              {this.formatFolderName(folder)}\n            </sp-button>\n          ))}\n        </div>\n        {this.otherFolders && (\n          <Fragment>\n            <hr />\n            <div class=\"folders\">\n              {this.otherFolders?.map(folder => (\n                <sp-button\n                  onClick={() => this.folderSelectedHandler(folder)}\n                  class={{\n                    folder: true,\n                    selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),\n                  }}\n                >\n                  <div slot=\"icon\" class=\"icon\">\n                    {this.getFolderIcon(folder)}\n                  </div>\n                  {this.formatFolderName(folder)}\n                </sp-button>\n              ))}\n            </div>\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n"]}