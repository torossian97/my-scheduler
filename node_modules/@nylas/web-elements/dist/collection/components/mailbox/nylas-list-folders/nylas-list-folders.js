var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, formatFolderName, toTitleCase } from "../../../utils/utils";
import { Fragment, Host, h } from "@stencil/core";
export class NylasListFolders {
    constructor() {
        this.folderSelectedHandler = (folder) => {
            this.folderSelected?.emit(folder);
        };
        this.folders = undefined;
        this.selectedFolder = undefined;
        this.defaultFolders = undefined;
        this.otherFolders = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-list-folders] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-list-folders] Component did load`);
    }
    watchFolders(newFolders) {
        debug(`[nylas-list-folders] watchFolders`, { newFolders });
        const defaultFolders = ['inbox', 'drafts', 'sent', 'starred', 'spam', 'archive', 'trash'];
        this.defaultFolders = defaultFolders
            .filter(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .map(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .filter(folder => typeof folder !== 'undefined')
            .sort((a, b) => defaultFolders.indexOf(a?.name ?? '') - defaultFolders.indexOf(b?.name ?? ''));
        this.otherFolders = newFolders
            .filter(folder => !defaultFolders.find(folderName => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? ''));
    }
    formatFolderName(folder) {
        return toTitleCase(folder.name?.replace('CATEGORY_', '') ?? 'Unknown');
    }
    getFolderIcon(folder) {
        switch (folder.name?.toLowerCase()) {
            case 'inbox':
                return h("inbox-icon", null);
            case 'drafts':
                return h("drafts-icon", null);
            case 'sent':
                return h("sent-icon", null);
            case 'starred':
                return h("star-icon", null);
            case 'spam':
                return h("spam-icon", null);
            case 'archive':
                return h("archive-icon", null);
            case 'trash':
                return h("trash-icon", null);
            default:
                return h("folder-icon", null);
        }
    }
    render() {
        return (h(Host, { key: '222ae81308d17cbdc7c3a44f0902fc683c88da1d' }, h("div", { key: '5ac1653c3b9ea1e3712e7597becc4d38435f3fa1', class: "folders" }, this.defaultFolders?.map(folder => (h("sp-button", { onClick: () => this.folderSelectedHandler(folder), class: {
                folder: true,
                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),
            } }, h("div", { slot: "icon", class: "icon" }, this.getFolderIcon(folder)), this.formatFolderName(folder))))), this.otherFolders && (h(Fragment, null, h("hr", null), h("div", { class: "folders" }, this.otherFolders?.map(folder => (h("sp-button", { onClick: () => this.folderSelectedHandler(folder), class: {
                folder: true,
                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),
            } }, h("div", { slot: "icon", class: "icon" }, this.getFolderIcon(folder)), this.formatFolderName(folder)))))))));
    }
    static get is() { return "nylas-list-folders"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-list-folders.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-list-folders.css"]
        };
    }
    static get properties() {
        return {
            "folders": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Folder[]",
                    "resolved": "Folder[] | undefined",
                    "references": {
                        "Folder": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Folder"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "selectedFolder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "selected-folder",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "defaultFolders": {},
            "otherFolders": {}
        };
    }
    static get events() {
        return [{
                "method": "folderSelected",
                "name": "folderSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "Folder",
                    "resolved": "{ background_color?: string | undefined; child_count?: number | undefined; grant_id?: string | undefined; id?: string | undefined; name?: string | undefined; object?: string | undefined; parent_id?: string | undefined; system_folder?: boolean | undefined; text_color?: string | undefined; total_count?: number | undefined; unread_count?: number | undefined; }",
                    "references": {
                        "Folder": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Folder"
                        }
                    }
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "folders",
                "methodName": "watchFolders"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-pagination',
        stateToProps: new Map([
            ['mailbox.folders', 'folders'],
            ['mailbox.selectedFolder', 'selectedFolder'],
        ]),
        eventToProps: {
            folderSelected: async (_event, nylasConnector) => {
                debug(`[nylas-list-folders] folderSelected event`, { _event });
                await nylasConnector.threads.getThreads({
                    page_token: undefined,
                    in: formatFolderName(_event.detail.id ?? 'inbox'),
                });
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListFolders.prototype, "render", null);
//# sourceMappingURL=nylas-list-folders.js.map
