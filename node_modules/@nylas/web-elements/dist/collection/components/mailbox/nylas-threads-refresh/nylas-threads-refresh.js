var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { Host, h } from "@stencil/core";
import { debug } from "../../../utils/utils";
export class NylasThreadsRefresh {
    constructor() {
        this.threshold = 100;
        this.onTouchStart = (e) => {
            debug(`[nylas-threads-refresh] Touch start`, e.touches[0].pageY, this.containerElement?.scrollTop, this.containerElement?.offsetHeight, this.contentElement?.scrollTop);
            if (this.containerElement?.scrollTop === 0) {
                this.start = e.touches[0].pageY;
            }
            else {
                this.start = 0;
            }
        };
        this.onTouchMove = (e) => {
            if (this.start) {
                const distance = e.touches[0].pageY - this.start;
                if (distance > this.threshold) {
                    this.pulling = true;
                }
                else {
                    this.pulling = false;
                }
            }
        };
        this.onTouchEnd = (e) => {
            if (this.start) {
                const distance = e.changedTouches[0].pageY - this.start;
                if (distance > this.threshold) {
                    this.pulling = false;
                    this.refresh.emit({
                        updateState: this.updateState,
                    });
                }
                this.start = 0;
            }
        };
        this.start = 0;
        this.state = 'ready';
        this.pulling = false;
        debug(`[nylas-threads-refresh] Constructor`);
        this.updateState = this.updateState.bind(this);
    }
    connectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-threads-refresh] Component will load`);
    }
    componentDidLoad() {
        debug(`[nylas-threads-refresh] Component did load`);
        this.containerElement?.addEventListener('touchstart', this.onTouchStart);
        this.containerElement?.addEventListener('touchmove', this.onTouchMove);
        this.containerElement?.addEventListener('touchend', this.onTouchEnd);
    }
    disconnectedCallback() {
        debug(`[nylas-threads-refresh] Component disconnected`);
        this.containerElement?.removeEventListener('touchstart', this.onTouchStart);
        this.containerElement?.removeEventListener('touchmove', this.onTouchMove);
        this.containerElement?.removeEventListener('touchend', this.onTouchEnd);
    }
    async updateState(state) {
        this.state = state;
    }
    render() {
        return (h(Host, { key: '9027360ae546f7cb1cf5c1e8f977d2e8f85eb3fd' }, h("div", { key: '7bf8bf464971f8669d6cb1fc31c478ed29fbda63', class: "container", ref: r => (this.containerElement = r) }, h("button", { key: 'af4dc6f3ec1e45554f13f0dbee2945a7b60acc6c', class: {
                'pull-to-refresh': true,
                'pulling': this.pulling,
                'refreshing': this.state === 'loading',
            }, "aria-label": "Refreshing..." }, this.state === 'loading' && h("refresh-icon", { slot: "icon" }), this.state !== 'loading' && h("arrow-icon", { slot: "icon" })), h("div", { key: 'd2bceb3b11369e03a9eefa80f983f341bae71239', class: "content", ref: r => (this.contentElement = r) }, h("slot", { key: 'c88b393187aa10285fd940d11bf7b792ac4dbf14' })))));
    }
    static get is() { return "nylas-threads-refresh"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-threads-refresh.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-threads-refresh.css"]
        };
    }
    static get states() {
        return {
            "start": {},
            "state": {},
            "pulling": {}
        };
    }
    static get events() {
        return [{
                "method": "refresh",
                "name": "refresh",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "RefreshEvent",
                    "resolved": "{ updateState: (state: \"loading\" | \"ready\" | \"error\") => Promise<void>; }",
                    "references": {
                        "RefreshEvent": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.tsx",
                            "id": "src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.tsx::RefreshEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "updateState": {
                "complexType": {
                    "signature": "(state: 'ready' | 'loading' | 'error') => Promise<void>",
                    "parameters": [{
                            "name": "state",
                            "type": "\"loading\" | \"ready\" | \"error\"",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-threads-refresh',
        eventToProps: {
            refresh: async (event, nylasConnector) => {
                debug(`[nylas-threads-refresh] Refreshing threads`);
                const { updateState } = event.detail;
                await updateState('loading');
                await nylasConnector.threads.getThreads(undefined, 'overwrite', false);
                await updateState('ready');
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasThreadsRefresh.prototype, "render", null);
//# sourceMappingURL=nylas-threads-refresh.js.map
