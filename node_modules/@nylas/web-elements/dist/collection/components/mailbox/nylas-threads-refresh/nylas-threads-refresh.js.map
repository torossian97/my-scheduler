{"version":3,"file":"nylas-threads-refresh.js","sourceRoot":"","sources":["../../../../src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAGvF,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAWtC,MAAM,OAAO,mBAAmB;IAc9B;QAbiB,cAAS,GAAW,GAAG,CAAC;QA2CjC,iBAAY,GAAG,CAAC,CAAa,EAAE,EAAE;YACvC,KAAK,CAAC,qCAAqC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,EAAE,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAAE,YAAY,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YACxK,IAAI,IAAI,CAAC,gBAAgB,EAAE,SAAS,KAAK,CAAC,EAAE,CAAC;gBAC3C,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAClC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACjB,CAAC;QACH,CAAC,CAAC;QAEM,gBAAW,GAAG,CAAC,CAAa,EAAE,EAAE;YACtC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACjD,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,CAAC;YACH,CAAC;QACH,CAAC,CAAC;QAEM,eAAU,GAAG,CAAC,CAAa,EAAE,EAAE;YACrC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,QAAQ,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxD,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC9B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAChB,WAAW,EAAE,IAAI,CAAC,WAAW;qBAC9B,CAAC,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACjB,CAAC;QACH,CAAC,CAAC;qBAxEuB,CAAC;qBAEsB,OAAO;uBAE3B,KAAK;QAQ/B,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChD;IAED,iBAAiB,KAAI,CAAC;IAEtB,KAAK,CAAC,iBAAiB;QACrB,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACvD,CAAC;IAED,gBAAgB;QACd,KAAK,CAAC,4CAA4C,CAAC,CAAC;QACpD,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACzE,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACvE,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACvE,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACxD,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5E,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1E,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1E,CAAC;IAGM,KAAK,CAAC,WAAW,CAAC,KAAoC;QAC3D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IA+CD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAC,WAAW,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;gBAC1D,+DACE,KAAK,EAAE;wBACL,iBAAiB,EAAE,IAAI;wBACvB,SAAS,EAAE,IAAI,CAAC,OAAO;wBACvB,YAAY,EAAE,IAAI,CAAC,KAAK,KAAK,SAAS;qBACvC,gBACU,eAAe;oBAEzB,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,oBAAc,IAAI,EAAC,MAAM,GAAG;oBACxD,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,kBAAY,IAAI,EAAC,MAAM,GAAG,CAChD;gBACT,4DAAK,KAAK,EAAC,SAAS,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;oBACtD,8DAAa,CACT,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAtBC;IAbC,iBAAiB,CAAyF;QACzG,IAAI,EAAE,uBAAuB;QAC7B,YAAY,EAAE;YACZ,OAAO,EAAE,KAAK,EAAE,KAAgC,EAAE,cAAqC,EAAE,EAAE;gBACzF,KAAK,CAAC,4CAA4C,CAAC,CAAC;gBACpD,MAAM,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;gBACrC,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC7B,MAAM,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;gBACvE,MAAM,WAAW,CAAC,OAAO,CAAC,CAAC;YAC7B,CAAC;SACF;QACD,iBAAiB,EAAE,IAAI;KACxB,CAAC;;;;iDAsBD","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { Component, Event, EventEmitter, Host, Method, State, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../../components';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { debug } from '@/utils/utils';\n\nexport type RefreshEvent = {\n  updateState: (state: 'ready' | 'loading' | 'error') => Promise<void>;\n};\n\n@Component({\n  tag: 'nylas-threads-refresh',\n  styleUrl: 'nylas-threads-refresh.scss',\n  shadow: true,\n})\nexport class NylasThreadsRefresh {\n  private readonly threshold: number = 100;\n\n  @State() start: number = 0;\n\n  @State() state: 'ready' | 'loading' | 'error' = 'ready';\n\n  @State() pulling: boolean = false;\n\n  @Event() refresh!: EventEmitter<RefreshEvent>;\n\n  private containerElement?: HTMLElement;\n  private contentElement?: HTMLElement;\n\n  constructor() {\n    debug(`[nylas-threads-refresh] Constructor`);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  connectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-threads-refresh] Component will load`);\n  }\n\n  componentDidLoad() {\n    debug(`[nylas-threads-refresh] Component did load`);\n    this.containerElement?.addEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.addEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.addEventListener('touchend', this.onTouchEnd);\n  }\n\n  disconnectedCallback() {\n    debug(`[nylas-threads-refresh] Component disconnected`);\n    this.containerElement?.removeEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.removeEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.removeEventListener('touchend', this.onTouchEnd);\n  }\n\n  @Method()\n  public async updateState(state: 'ready' | 'loading' | 'error') {\n    this.state = state;\n  }\n\n  private onTouchStart = (e: TouchEvent) => {\n    debug(`[nylas-threads-refresh] Touch start`, e.touches[0].pageY, this.containerElement?.scrollTop, this.containerElement?.offsetHeight, this.contentElement?.scrollTop);\n    if (this.containerElement?.scrollTop === 0) {\n      this.start = e.touches[0].pageY;\n    } else {\n      this.start = 0;\n    }\n  };\n\n  private onTouchMove = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.touches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = true;\n      } else {\n        this.pulling = false;\n      }\n    }\n  };\n\n  private onTouchEnd = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.changedTouches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = false;\n        this.refresh.emit({\n          updateState: this.updateState,\n        });\n      }\n      this.start = 0;\n    }\n  };\n  @RegisterComponent<NylasThreadsRefresh, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-threads-refresh',\n    eventToProps: {\n      refresh: async (event: CustomEvent<RefreshEvent>, nylasConnector: NylasMailboxConnector) => {\n        debug(`[nylas-threads-refresh] Refreshing threads`);\n        const { updateState } = event.detail;\n        await updateState('loading');\n        await nylasConnector.threads.getThreads(undefined, 'overwrite', false);\n        await updateState('ready');\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"container\" ref={r => (this.containerElement = r)}>\n          <button\n            class={{\n              'pull-to-refresh': true,\n              'pulling': this.pulling,\n              'refreshing': this.state === 'loading',\n            }}\n            aria-label=\"Refreshing...\"\n          >\n            {this.state === 'loading' && <refresh-icon slot=\"icon\" />}\n            {this.state !== 'loading' && <arrow-icon slot=\"icon\" />}\n          </button>\n          <div class=\"content\" ref={r => (this.contentElement = r)}>\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}