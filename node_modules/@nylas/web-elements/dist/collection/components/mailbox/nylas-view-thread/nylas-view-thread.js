var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, toTitleCase } from "../../../utils/utils";
import { Fragment, Host, h } from "@stencil/core";
import { ViewThreadMessage } from "./view-thread-message";
export class NylasViewThread {
    constructor() {
        this.nylasViewEmailElement = null;
        this.nylasComposerElement = null;
        this.onShowContactDataClick = (originalEvent) => {
            originalEvent.stopPropagation();
            const target = originalEvent.target;
            const messageId = target.value;
            const message = this.internalMessages.find(message => message.data.id === messageId);
            if (!message) {
                debug(`[nylas-view-thread] Could not find message ${messageId}`);
                return;
            }
            const event = this.showContactDataClicked.emit(message.data);
            if (!event.defaultPrevented) {
                message.showContactData = !message.showContactData;
                this.internalMessages = [...this.internalMessages];
            }
            debug(`[nylas-view-thread] show contact data clicked ${messageId} ${message.showContactData ? 'collapsed' : 'expanded'}`);
        };
        this.onMessageClick = (originalEvent) => {
            const target = originalEvent.target;
            const messageId = target.dataset.id;
            const message = this.internalMessages.find(message => message.data.id === messageId);
            if (!message) {
                debug(`[nylas-view-thread] Could not find message ${messageId}`);
                return;
            }
            const event = this.messageClicked.emit(message.data);
            if (!event.defaultPrevented) {
                if (message.id !== this.internalMessages[this.internalMessages.length - 1]?.id) {
                    message.collapse = !message.collapse;
                    if (message.collapse) {
                        message.showContactData = false;
                    }
                }
                this.internalMessages = [...this.internalMessages];
            }
            debug(`[nylas-view-thread] message clicked ${messageId} ${message.collapse ? 'collapsed' : 'expanded'}`);
        };
        this.onShowAllEmailsClick = () => {
            this.showAllEmails = !this.showAllEmails;
        };
        this.showComposerClick = () => {
            this.showComposer = !this.showComposer;
        };
        this.draft = undefined;
        this.thread = undefined;
        this.messages = [];
        this.attachments = [];
        this.state = 'loading';
        this.internalMessages = [];
        this.showAllEmails = false;
        this.showComposer = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-view-thread] Component will load`);
        this.updateInternalMessages(this.messages);
        const template = this.host.querySelector('template.nylas-view-email');
        if (!template) {
            debug(`[nylas-view-thread] Could not find template`);
            return;
        }
        const viewEmailTemplateClone = document.importNode(template.content, true);
        this.nylasViewEmailElement = viewEmailTemplateClone.querySelector('nylas-view-email');
        const composerTemplate = this.host.querySelector('template.nylas-composer');
        if (!composerTemplate) {
            debug(`[nylas-view-thread] Could not find composer template`);
            return;
        }
        const composerTemplateClone = document.importNode(composerTemplate.content, true);
        this.nylasComposerElement = composerTemplateClone.querySelector('nylas-composer');
    }
    async componentDidLoad() {
        debug(`[nylas-view-thread] Component did load`);
    }
    async threadChanged(thread) {
        debug(`[nylas-view-thread] Thread changed`, { thread: thread });
        this.internalMessages = [];
        const event = this.threadSelected.emit(thread);
        if (!event.defaultPrevented) {
            debug(`[nylas-view-thread] Default event not prevented, initializing`);
        }
    }
    updateInternalMessages(messages) {
        debug(`[nylas-view-thread] Updating internal messages`, { messages });
        const internalMessages = messages
            .sort((a, b) => {
            return a.date > b.date ? 1 : -1;
        })
            .map((message, index) => ({
            id: message.id,
            data: message,
            collapse: index === messages.length - 1 ? false : true,
            showContactData: false,
        }));
        this.internalMessages = internalMessages;
    }
    render() {
        const fistMessage = this.internalMessages.length > 2 ? this.internalMessages[0] : null;
        const lastTwoMessages = this.internalMessages.slice(this.internalMessages.length - 2, this.internalMessages.length);
        const remainingMessages = this.internalMessages.slice(1, this.internalMessages.length - 2);
        const lastMessage = this.internalMessages[this.internalMessages.length - 1];
        return (h(Host, { key: '08d6981bb00f24f18212060a784da5ec7129197e' }, h("sp-theme", { key: '0f7f54486f61beb490fc96a0f84753868ef384aa', scale: "medium", color: "dark" }, h("div", { key: '9aad086eae2344a6d0d28b1fb4fb39921dcf53f0', class: "view-thread" }, h("div", { key: 'fcef6cd0bfed78b7d6f9df5a2a8719a32b1e294f', class: "header" }, h("div", { key: '0673aebc8626e082deb3f0a9b9eb9c18a1841349', class: 'subject' }, this.thread?.subject), h("div", { key: '10ee64da01595dcb658f99b9a8d90c1fe9237816', class: 'folders' }, this.thread?.folders?.map(folder => h("sp-tag", { size: "s" }, toTitleCase(folder.replace('CATEGORY_', '').replace('_', ' ')))))), h("div", { key: '469007a98202e151206e4ac329956882f069b618', class: "messages" }, fistMessage && (h(ViewThreadMessage, { message: fistMessage, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement })), remainingMessages.length > 0 && this.messages.length > 1 && !this.showAllEmails && lastTwoMessages.length > 0 && (h(Fragment, null, h("div", { class: 'show-more' }, h("button", { type: "button", onClick: this.onShowAllEmailsClick }, h("span", { class: 'avatar' }, remainingMessages.length), " ", h("span", { class: 'sr-only' }, "Show ", remainingMessages.length, " more emails"))), h("hr", null))), remainingMessages.length > 0 &&
            this.showAllEmails &&
            this.messages.length > 2 &&
            remainingMessages.map(email => (h(ViewThreadMessage, { message: email, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage?.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement }))), lastTwoMessages.length > 0 &&
            lastTwoMessages.map(email => (h(ViewThreadMessage, { message: email, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage?.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement })))), !(this.showComposer && lastMessage) && (h("div", { class: "reply-buttons" }, h("sp-button", { variant: "cta", type: "button", onClick: this.showComposerClick }, h("span", { slot: "icon" }, h("reply-icon", null)), h("span", null, "Reply")), h("sp-button", { variant: "cta", type: "button" }, h("span", { slot: "icon" }, h("reply-all-icon", null)), h("span", null, "Reply All")), h("sp-button", { variant: "cta", type: "button" }, h("span", { slot: "icon" }, h("forward-icon", null)), h("span", null, "Forward")))), this.showComposer && lastMessage && (h("div", { class: "composer" }, h("nylas-composer", { message: lastMessage.data, onClose: this.showComposerClick, onSend: e => {
                debug(`[nylas-view-thread] Send event`, { message: e.detail.message, replyBody: e.detail.replyBody });
            } })))))));
    }
    static get is() { return "nylas-view-thread"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-view-thread.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-view-thread.css"]
        };
    }
    static get properties() {
        return {
            "draft": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Message",
                    "resolved": "Message | undefined",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The draft message to display"
                }
            },
            "thread": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Thread",
                    "resolved": "Thread | undefined",
                    "references": {
                        "Thread": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Thread"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Thread to display"
                }
            },
            "messages": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Message[]",
                    "resolved": "Message[]",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Messages within the thread to display"
                },
                "defaultValue": "[]"
            },
            "attachments": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "InternalAttachment[]",
                    "resolved": "InternalAttachment[]",
                    "references": {
                        "InternalAttachment": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::InternalAttachment"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Attachments for each message within the thread"
                },
                "defaultValue": "[]"
            }
        };
    }
    static get states() {
        return {
            "state": {},
            "internalMessages": {},
            "showAllEmails": {},
            "showComposer": {}
        };
    }
    static get events() {
        return [{
                "method": "threadSelected",
                "name": "threadSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when a thread is selected"
                },
                "complexType": {
                    "original": "Thread",
                    "resolved": "Thread",
                    "references": {
                        "Thread": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Thread"
                        }
                    }
                }
            }, {
                "method": "showContactDataClicked",
                "name": "showContactDataClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when a message contact data is clicked"
                },
                "complexType": {
                    "original": "Message",
                    "resolved": "Message",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                }
            }, {
                "method": "messageClicked",
                "name": "messageClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when a message is clicked"
                },
                "complexType": {
                    "original": "Message",
                    "resolved": "Message",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "thread",
                "methodName": "threadChanged"
            }, {
                "propName": "messages",
                "methodName": "updateInternalMessages"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-view-thread',
        stateToProps: new Map([
            ['mailbox.selectedThread', 'thread'],
            ['mailbox.messages', 'messages'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            threadSelected: async (event, nylasConnector) => {
                debug(`[nylas-view-thread] Nylas init event. Fetching thread messages.`, { event });
                const thread = event.detail;
                if (thread && thread.id) {
                    await nylasConnector.messages.getThreadMessages(thread.id);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasViewThread.prototype, "render", null);
//# sourceMappingURL=nylas-view-thread.js.map
