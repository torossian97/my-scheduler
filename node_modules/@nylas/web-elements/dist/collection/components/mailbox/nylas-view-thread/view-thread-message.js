import { debug, formatParticipants, formatRecipient, formatTimeAgo } from "../../../utils/utils";
import { Fragment, h } from "@stencil/core";
function renderViewEmail(message, attachments, container, viewEmailElement, parent) {
    if (!viewEmailElement) {
        return;
    }
    if (!container) {
        return;
    }
    if (container.children.length > 0) {
        return;
    }
    debug(`[nylas-view-thread] Rendering email`, { message, attachments, viewEmailElement });
    const viewEmailElementClone = viewEmailElement.cloneNode(true);
    viewEmailElementClone.message = message.data;
    viewEmailElementClone.parent = parent;
    container.appendChild(viewEmailElementClone);
}
export const ViewThreadMessage = ({ viewEmailElement, message, attachments, onMessageClick, onShowContactDataClick, parent }) => (h(Fragment, null, h("div", { key: message.id, class: 'message' }, h("div", { class: 'sub-header', "data-id": message.data.id, onClick: onMessageClick }, h("div", { class: 'avatar' }, message.data.from && message.data.from[0]?.name && message.data.from[0]?.name[0]?.toUpperCase()), h("div", { class: 'from' }, h("span", { class: 'name' }, message.data.from && message.data.from[0]?.name), " ", h("span", { class: "email" }, message.data.from && message.data.from[0]?.email)), h("div", { class: 'date' }, new Date(message.data.date * 1000).toLocaleTimeString(undefined, {
    timeStyle: 'short',
}), ' ', "(", formatTimeAgo(new Date(message.data.date * 1000)), ")"), h("sp-button-group", { class: "buttons" }, h("nylas-summarize-message-button", { message: message.data })), message.collapse && h("div", { class: 'snippet' }, message.data.snippet), !message.collapse && message.data.to && (h("div", { class: 'to' }, h("span", null, "to"), " ", formatParticipants(message.data.to), ' ', h("button", { type: "button", value: message.data.id, onClick: onShowContactDataClick, class: {
        'expand': true,
        'expand--showContactData': message.showContactData,
    } }, h("chevron-icon", null))))), message.showContactData && (h("div", { class: 'address-info' }, h("div", { class: 'label' }, "From"), h("div", { class: 'value' }, formatRecipient(message.data?.from ? message?.data?.from[0] : { name: '', email: '' })), message.data.to && (h(Fragment, null, h("div", { class: 'label' }, "To"), h("div", { class: 'value' }, message.data.to.map(to => (h("div", null, formatRecipient(to))))))), typeof message.data.cc !== 'undefined' && message.data.cc.length > 0 && (h(Fragment, null, h("div", { class: 'label' }, "CC"), h("div", { class: 'value' }, message.data.cc.map(cc => (h("div", null, formatRecipient(cc))))))))), !message.collapse && viewEmailElement && h("div", { key: message.id, ref: el => renderViewEmail(message, attachments, el, viewEmailElement, parent) }), !message.collapse && !viewEmailElement && h("nylas-view-email", { key: message.id, message: message.data, parent: parent })), h("hr", null)));
//# sourceMappingURL=view-thread-message.js.map
