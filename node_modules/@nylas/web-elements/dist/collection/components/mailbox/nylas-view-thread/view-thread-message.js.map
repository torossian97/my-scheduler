{"version":3,"file":"view-thread-message.js","sourceRoot":"","sources":["../../../../src/components/mailbox/nylas-view-thread/view-thread-message.tsx"],"names":[],"mappings":"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","sourcesContent":["import { InternalAttachment, InternalMessage } from '@/common/types';\nimport { debug, formatParticipants, formatRecipient, formatTimeAgo } from '@/utils/utils';\nimport { Fragment, FunctionalComponent, h } from '@stencil/core';\n\nexport type ViewThreadMessageProps = {\n  message: InternalMessage;\n  attachments: InternalAttachment[];\n  viewEmailElement?: HTMLNylasViewEmailElement | null;\n  composerElement?: HTMLNylasComposerElement | null;\n  onShowContactDataClick: (event: MouseEvent) => void;\n  onMessageClick: (event: MouseEvent) => void;\n  parent?: HTMLElement;\n};\n\n/**\n * Render view email element\n * @param container Container element to render view email element\n * @param message Message to render\n * @param viewEmailElement View email element to render\n * @param parent Parent element used for mobile view resizing\n */\nfunction renderViewEmail(message: InternalMessage, attachments: InternalAttachment[], container?: HTMLElement, viewEmailElement?: HTMLNylasViewEmailElement, parent?: HTMLElement) {\n  // Skip if message is not defined\n  if (!viewEmailElement) {\n    return;\n  }\n\n  // Skip if container is not defined\n  if (!container) {\n    return;\n  }\n\n  // Skip if container already has a child\n  if (container.children.length > 0) {\n    return;\n  }\n\n  debug(`[nylas-view-thread] Rendering email`, { message, attachments, viewEmailElement });\n\n  // Clone viewEmailElement so that we are not reusing the same element from another\n  // message in the thread\n  const viewEmailElementClone = viewEmailElement.cloneNode(true) as HTMLNylasViewEmailElement;\n  viewEmailElementClone.message = message.data;\n  viewEmailElementClone.parent = parent;\n\n  // Append viewEmailElement to container\n  container.appendChild(viewEmailElementClone);\n}\n\nexport const ViewThreadMessage: FunctionalComponent<ViewThreadMessageProps> = ({ viewEmailElement, message, attachments, onMessageClick, onShowContactDataClick, parent }) => (\n  <Fragment>\n    <div key={message.id} class={'message'}>\n      <div class={'sub-header'} data-id={message.data.id} onClick={onMessageClick}>\n        <div class={'avatar'}>{message.data.from && message.data.from[0]?.name && message.data.from[0]?.name[0]?.toUpperCase()}</div>\n        <div class={'from'}>\n          <span class={'name'}>{message.data.from && message.data.from[0]?.name}</span> <span class=\"email\">{message.data.from && message.data.from[0]?.email}</span>\n        </div>\n        <div class={'date'}>\n          {new Date(message.data.date * 1000).toLocaleTimeString(undefined, {\n            timeStyle: 'short',\n          })}{' '}\n          ({formatTimeAgo(new Date(message.data.date * 1000))})\n        </div>\n        <sp-button-group class=\"buttons\">\n          <nylas-summarize-message-button message={message.data} />\n        </sp-button-group>\n        {message.collapse && <div class={'snippet'}>{message.data.snippet}</div>}\n\n        {!message.collapse && message.data.to && (\n          <div class={'to'}>\n            <span>to</span> {formatParticipants(message.data.to)}{' '}\n            <button\n              type=\"button\"\n              value={message.data.id}\n              onClick={onShowContactDataClick}\n              class={{\n                'expand': true,\n                'expand--showContactData': message.showContactData,\n              }}\n            >\n              <chevron-icon />\n            </button>\n          </div>\n        )}\n      </div>\n      {message.showContactData && (\n        <div class={'address-info'}>\n          <div class={'label'}>From</div>\n          <div class={'value'}>{formatRecipient(message.data?.from ? message?.data?.from[0] : { name: '', email: '' })}</div>\n\n          {message.data.to && (\n            <Fragment>\n              <div class={'label'}>To</div>\n              <div class={'value'}>\n                {message.data.to.map(to => (\n                  <div>{formatRecipient(to)}</div>\n                ))}\n              </div>\n            </Fragment>\n          )}\n\n          {typeof message.data.cc !== 'undefined' && message.data.cc.length > 0 && (\n            <Fragment>\n              <div class={'label'}>CC</div>\n              <div class={'value'}>\n                {message.data.cc.map(cc => (\n                  <div>{formatRecipient(cc)}</div>\n                ))}\n              </div>\n            </Fragment>\n          )}\n        </div>\n      )}\n      {!message.collapse && viewEmailElement && <div key={message.id} ref={el => renderViewEmail(message, attachments, el, viewEmailElement, parent)} />}\n      {/* If no view element was provided, default to our own instance */}\n      {!message.collapse && !viewEmailElement && <nylas-view-email key={message.id} message={message.data} parent={parent} />}\n    </div>\n    <hr />\n  </Fragment>\n);\n"]}