{"version":3,"file":"nylas-summarize-message-button.js","sourceRoot":"","sources":["../../../../src/components/mailbox/nylas-summarize-message-button/nylas-summarize-message-button.tsx"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAE7F,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AACvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAehE,MAAM,OAAO,2BAA2B;IA0BtC;QAFQ,oBAAe,GAAoB,IAAI,eAAe,EAAE,CAAC;QAuBzD,YAAO,GAAG,KAAK,EAAE,KAAY,EAAE,EAAE;YACvC,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;YAExB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC7B,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;oBACjB,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;oBAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAChC,eAAe,EAAE,IAAI,CAAC,eAAe;wBACrC,SAAS,EAAE,IAAI,CAAC,SAAS;wBACzB,OAAO,EAAE,IAAI,CAAC,OAAO;wBACrB,WAAW,EAAE,IAAI,CAAC,WAAW;qBAC9B,CAAC,CAAC;oBAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;wBAC5B,KAAK,CAAC,mFAAmF,CAAC,CAAC;wBAE3F,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;4BAClB,MAAM,IAAI,CAAC,QAAQ;iCAChB,IAAI,EAAE;iCACN,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC;iCAClC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAC;4BAChE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAC;wBAC1F,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;iBAAM,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBACpC,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,CAAC;gBAC9B,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACzB,CAAC;QACH,CAAC,CAAC;;qBAjEkD,SAAS;QAa3D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChD;IAED,iBAAiB,KAAI,CAAC;IAEtB,oBAAoB,KAAI,CAAC;IAEzB,KAAK,CAAC,iBAAiB;QACrB,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,KAAK,CAAC,qDAAqD,CAAC,CAAC;IAC/D,CAAC;IA8CM,KAAK,CAAC,WAAW,CAAC,KAAwC;QAC/D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAQM,KAAK,CAAC,SAAS,CAAC,eAA2D;QAChF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,OAAO;QACT,CAAC;QAED,MAAM,YAAY,GAAqB,IAAI,CAAC,QAAQ,CAAC;QAGrD,IAAI,CAAC,CAAC,aAAa,IAAI,MAAM,CAAC,EAAE,CAAC;YAC/B,MAAM,EAAE,GAAG,MAAM,eAAe,CAAC;YAEjC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvE,CAAC;YAED,MAAM,MAAM,GAA4C,EAAE,CAAC,SAAS,EAAE,CAAC;YACvE,MAAM,MAAM,GAAiB,EAAE,CAAC;YAGhC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAGrC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;YACtD,MAAM,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC1C,YAAY,CAAC,GAAG,GAAG,OAAO,CAAC;YAC3B,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QACtC,IAAI,YAA0B,CAAC;QAE/B,IAAI,UAAU,GAAY,KAAK,CAAC;QAEhC,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACpD,WAAW,CAAC,gBAAgB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAE9D,KAAK,UAAU,iBAAiB;YAC9B,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YACzD,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,EAAE,GAAG,MAAM,eAAe,CAAC;YAEjC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvE,CAAC;YAED,MAAM,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAC9B,MAAM,IAAI,GAAG,GAAG,EAAE;gBAChB,MAAM;qBACH,IAAI,EAAE;qBACN,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;oBACxB,IAAI,IAAI,EAAE,CAAC;wBACT,UAAU,GAAG,IAAI,CAAC;wBAClB,OAAO;oBACT,CAAC;oBACD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;wBAC3B,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACnC,CAAC;oBACD,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC;qBACD,KAAK,CAAC,KAAK,CAAC,EAAE;oBACb,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC;YACP,CAAC,CAAC;YAEF,IAAI,EAAE,CAAC;YAEP,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;gBACxB,YAAY,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAC;YACnF,CAAC;QACH,CAAC;QAED,SAAS,WAAW;YAClB,IAAI,UAAU,EAAE,CAAC;gBACf,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC1B,WAAW,CAAC,mBAAmB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;gBACjE,WAAW,CAAC,mBAAmB,CAAC,aAAa,EAAE,GAAG,EAAE;oBAClD,KAAK,CAAC,gDAAgD,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;gBACH,YAAY,CAAC,mBAAmB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;QACH,CAAC;IACH,CAAC;IAQO,KAAK,CAAC,SAAS,CAAC,MAA+C,EAAE,MAAoB;QAC3F,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;YAC5C,IAAI,IAAI,EAAE,CAAC;gBAET,OAAO,MAAM,CAAC;YAChB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAqBD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,iEAAU,KAAK,EAAC,QAAQ,EAAC,KAAK,EAAC,MAAM;gBACnC,kEACE,KAAK,EAAC,iBAAiB,qBAEvB,cAAc,EAAE,IAAI,CAAC,OAAO,EAC5B,KAAK,EAAE;wBACL,kBAAkB,EAAE,IAAI;wBACxB,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,SAAS;wBACnC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,SAAS;wBACnC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,SAAS;qBACpC;oBAEA,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,oBAAa;oBACzC,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,uBAAgB;oBAC5C,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,oBAAa,CAChC;gBACZ,8DACE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAC7B,QAAQ,EAAE,IAAI,EACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,EACzC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,EACvC,OAAO,EAAE,GAAG,EAAE;wBACZ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;wBACvB,KAAK,CAAC,8CAA8C,CAAC,CAAC;oBACxD,CAAC,GACM,CACA,CACN,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAjCC;IAnBC,iBAAiB,CAAiG;QACjH,IAAI,EAAE,gCAAgC;QACtC,YAAY,EAAE;YACZ,SAAS,EAAE,KAAK,EAAE,KAAkC,EAAE,cAAqC,EAAE,EAAE;gBAC7F,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC1E,MAAM,IAAI,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;gBACjD,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC7B,IAAI,CAAC;oBACH,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;oBAClE,MAAM,eAAe,GAAG,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;oBACvF,MAAM,SAAS,CAAC,eAAe,CAAC,CAAC;gBACnC,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;oBAC7B,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;gBACrD,CAAC;YACH,CAAC;SACF;QACD,iBAAiB,EAAE,IAAI;KACxB,CAAC;;;;yDAiCD","sourcesContent":["import { Message } from '@nylas/core';\nimport { Component, Event, EventEmitter, Host, Method, Prop, State, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../../components';\nimport { debug, htmlToPlainText } from '@/utils/utils';\nimport { RegisterComponent } from '@/common/register-component';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\n\nexport type SummarizeEvent = {\n  playAudio: (ttsResponseBody: Promise<ReadableStream<Uint8Array> | null>) => Promise<void>;\n  updateState: (state: 'loading' | 'playing' | 'stopped') => Promise<void>;\n  abortController: AbortController;\n  message: Message;\n};\n\n@Component({\n  tag: 'nylas-summarize-message-button',\n  styleUrl: 'nylas-summarize-message-button.scss',\n  shadow: true,\n})\nexport class NylasSummarizeMessageButton {\n  /**\n   * The message to summarize\n   */\n  @Prop() readonly message?: Message;\n\n  /**\n   * The on summarize event handler\n   */\n  @Event() readonly summarize!: EventEmitter<SummarizeEvent>;\n\n  /**\n   * The state of the summarize button\n   */\n  @State() state: 'loading' | 'playing' | 'stopped' = 'stopped';\n\n  /**\n   * The audio element used to play the summary\n   */\n  private audioRef?: HTMLAudioElement;\n\n  /**\n   * The AbortController used to cancel the summarize request\n   */\n  private abortController: AbortController = new AbortController();\n\n  constructor() {\n    this.playAudio = this.playAudio.bind(this);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-summarize-message-button] Component will load`);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-summarize-message-button] Component did load`);\n  }\n\n  /**\n   * Handle summarize button click\n   * @param event Click event\n   */\n  private onClick = async (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.state === 'stopped') {\n      if (this.message) {\n        this.abortController = new AbortController();\n        const event = this.summarize.emit({\n          abortController: this.abortController,\n          playAudio: this.playAudio,\n          message: this.message,\n          updateState: this.updateState,\n        });\n\n        if (!event.defaultPrevented) {\n          debug(`[nylas-summarize-message-button] Default event not prevented, summarizing message`);\n\n          if (this.audioRef) {\n            await this.audioRef\n              .play()\n              .then(() => this.audioRef?.pause())\n              .catch(error => console.error('Error playing audio:', error));\n            await this.audioRef.play().catch(error => console.error('Error playing audio:', error));\n          }\n        }\n      }\n    } else if (this.state === 'playing') {\n      this.abortController?.abort();\n      this.audioRef?.pause();\n    } else {\n      this.state = 'stopped';\n    }\n  };\n\n  /**\n   * Update the state of the summarize button\n   * @param state The new state\n   * @returns Promise<void>\n   */\n  @Method()\n  public async updateState(state: 'loading' | 'playing' | 'stopped') {\n    this.state = state;\n  }\n\n  /**\n   * Play audio\n   * @param ttsResponseBody Text to speech response body\n   * @param audioRef Audio element\n   */\n  @Method()\n  public async playAudio(ttsResponseBody: Promise<ReadableStream<Uint8Array> | null>) {\n    if (!this.audioRef) {\n      this.state = 'stopped';\n      return;\n    }\n\n    if (!ttsResponseBody) {\n      this.state = 'stopped';\n      return;\n    }\n\n    const audioElement: HTMLAudioElement = this.audioRef;\n\n    // If no MediaSource support, use a blob URL\n    if (!('MediaSource' in window)) {\n      const rb = await ttsResponseBody;\n\n      if (rb == null) {\n        throw new Error('ReadableStream not yet supported in this browser.');\n      }\n\n      const reader: ReadableStreamDefaultReader<Uint8Array> = rb.getReader();\n      const chunks: Uint8Array[] = [];\n\n      // Start reading chunks\n      await this.readChunk(reader, chunks);\n\n      // Create a blob from the chunks\n      const blob = new Blob(chunks, { type: 'audio/mpeg' });\n      const blobUrl = URL.createObjectURL(blob);\n      audioElement.src = blobUrl;\n      return;\n    }\n\n    const mediaSource = new MediaSource();\n    let sourceBuffer: SourceBuffer;\n\n    let sourceDone: boolean = false;\n\n    audioElement.src = URL.createObjectURL(mediaSource);\n    mediaSource.addEventListener('sourceopen', onMediaSourceOpen);\n\n    async function onMediaSourceOpen() {\n      sourceBuffer = mediaSource.addSourceBuffer('audio/mpeg');\n      sourceBuffer.addEventListener('updateend', onUpdateEnd);\n      const rb = await ttsResponseBody;\n\n      if (rb == null) {\n        throw new Error('ReadableStream not yet supported in this browser.');\n      }\n\n      const reader = rb.getReader();\n      const pump = () => {\n        reader\n          .read()\n          .then(({ done, value }) => {\n            if (done) {\n              sourceDone = true;\n              return;\n            }\n            if (!sourceBuffer.updating) {\n              sourceBuffer.appendBuffer(value);\n            }\n            pump();\n          })\n          .catch(error => {\n            console.error('Error while fetching and appending chunks:', error);\n          });\n      };\n\n      pump();\n\n      if (audioElement.paused) {\n        audioElement.play().catch(error => console.error('Error playing audio:', error));\n      }\n    }\n\n    function onUpdateEnd() {\n      if (sourceDone) {\n        mediaSource.endOfStream();\n        mediaSource.removeEventListener('sourceopen', onMediaSourceOpen);\n        mediaSource.removeEventListener('sourceclose', () => {\n          debug(`[nylas-summarize-message-button] Source closed`);\n        });\n        sourceBuffer.removeEventListener('updateend', onUpdateEnd);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Read chunks from the ReadableStream\n   * @param reader The reader to read chunks from for the TTS audio\n   * @param chunks The chunks array to append the chunks to\n   * @returns Promise<Uint8Array[]>\n   */\n  private async readChunk(reader: ReadableStreamDefaultReader<Uint8Array>, chunks: Uint8Array[]): Promise<Uint8Array[]> {\n    return reader.read().then(({ done, value }) => {\n      if (done) {\n        // All chunks have been read, return the chunks array\n        return chunks;\n      }\n      chunks.push(value);\n      return this.readChunk(reader, chunks); // Read the next chunk\n    });\n  }\n\n  @RegisterComponent<NylasSummarizeMessageButton, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-summarize-message-button',\n    eventToProps: {\n      summarize: async (event: CustomEvent<SummarizeEvent>, nylasConnector: NylasMailboxConnector) => {\n        const { playAudio, updateState, abortController, message } = event.detail;\n        const text = htmlToPlainText(message.body || '');\n        await updateState('loading');\n        try {\n          const summary = await nylasConnector.messages.summarizeText(text);\n          const ttsResponseBody = nylasConnector.messages.textToSpeech(summary, abortController);\n          await playAudio(ttsResponseBody);\n        } catch (error) {\n          await updateState('stopped');\n          console.error('Error summarizing message:', error);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <sp-theme scale=\"medium\" color=\"dark\">\n          <sp-button\n            label=\"Summarize email\"\n            icon-only\n            onClickCapture={this.onClick}\n            class={{\n              'summarize-button': true,\n              'stopped': this.state === 'stopped',\n              'loading': this.state === 'loading',\n              'playing': this.state === 'playing',\n            }}\n          >\n            {this.state === 'stopped' && <play-icon />}\n            {this.state === 'loading' && <loading-icon />}\n            {this.state === 'playing' && <stop-icon />}\n          </sp-button>\n          <audio\n            ref={r => (this.audioRef = r)}\n            autoPlay={true}\n            onPlaying={() => (this.state = 'playing')}\n            onPause={() => (this.state = 'stopped')}\n            onEnded={() => {\n              this.state = 'stopped';\n              debug(`[nylas-summarize-message-button] Audio ended`);\n            }}\n          ></audio>\n        </sp-theme>\n      </Host>\n    );\n  }\n}\n"]}