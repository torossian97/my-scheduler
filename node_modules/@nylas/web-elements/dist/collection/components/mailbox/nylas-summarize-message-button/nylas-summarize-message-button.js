var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { Host, h } from "@stencil/core";
import { debug, htmlToPlainText } from "../../../utils/utils";
import { RegisterComponent } from "../../../common/register-component";
export class NylasSummarizeMessageButton {
    constructor() {
        this.abortController = new AbortController();
        this.onClick = async (event) => {
            event.preventDefault();
            event.stopPropagation();
            if (this.state === 'stopped') {
                if (this.message) {
                    this.abortController = new AbortController();
                    const event = this.summarize.emit({
                        abortController: this.abortController,
                        playAudio: this.playAudio,
                        message: this.message,
                        updateState: this.updateState,
                    });
                    if (!event.defaultPrevented) {
                        debug(`[nylas-summarize-message-button] Default event not prevented, summarizing message`);
                        if (this.audioRef) {
                            await this.audioRef
                                .play()
                                .then(() => this.audioRef?.pause())
                                .catch(error => console.error('Error playing audio:', error));
                            await this.audioRef.play().catch(error => console.error('Error playing audio:', error));
                        }
                    }
                }
            }
            else if (this.state === 'playing') {
                this.abortController?.abort();
                this.audioRef?.pause();
            }
            else {
                this.state = 'stopped';
            }
        };
        this.message = undefined;
        this.state = 'stopped';
        this.playAudio = this.playAudio.bind(this);
        this.updateState = this.updateState.bind(this);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-summarize-message-button] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-summarize-message-button] Component did load`);
    }
    async updateState(state) {
        this.state = state;
    }
    async playAudio(ttsResponseBody) {
        if (!this.audioRef) {
            this.state = 'stopped';
            return;
        }
        if (!ttsResponseBody) {
            this.state = 'stopped';
            return;
        }
        const audioElement = this.audioRef;
        if (!('MediaSource' in window)) {
            const rb = await ttsResponseBody;
            if (rb == null) {
                throw new Error('ReadableStream not yet supported in this browser.');
            }
            const reader = rb.getReader();
            const chunks = [];
            await this.readChunk(reader, chunks);
            const blob = new Blob(chunks, { type: 'audio/mpeg' });
            const blobUrl = URL.createObjectURL(blob);
            audioElement.src = blobUrl;
            return;
        }
        const mediaSource = new MediaSource();
        let sourceBuffer;
        let sourceDone = false;
        audioElement.src = URL.createObjectURL(mediaSource);
        mediaSource.addEventListener('sourceopen', onMediaSourceOpen);
        async function onMediaSourceOpen() {
            sourceBuffer = mediaSource.addSourceBuffer('audio/mpeg');
            sourceBuffer.addEventListener('updateend', onUpdateEnd);
            const rb = await ttsResponseBody;
            if (rb == null) {
                throw new Error('ReadableStream not yet supported in this browser.');
            }
            const reader = rb.getReader();
            const pump = () => {
                reader
                    .read()
                    .then(({ done, value }) => {
                    if (done) {
                        sourceDone = true;
                        return;
                    }
                    if (!sourceBuffer.updating) {
                        sourceBuffer.appendBuffer(value);
                    }
                    pump();
                })
                    .catch(error => {
                    console.error('Error while fetching and appending chunks:', error);
                });
            };
            pump();
            if (audioElement.paused) {
                audioElement.play().catch(error => console.error('Error playing audio:', error));
            }
        }
        function onUpdateEnd() {
            if (sourceDone) {
                mediaSource.endOfStream();
                mediaSource.removeEventListener('sourceopen', onMediaSourceOpen);
                mediaSource.removeEventListener('sourceclose', () => {
                    debug(`[nylas-summarize-message-button] Source closed`);
                });
                sourceBuffer.removeEventListener('updateend', onUpdateEnd);
                return;
            }
        }
    }
    async readChunk(reader, chunks) {
        return reader.read().then(({ done, value }) => {
            if (done) {
                return chunks;
            }
            chunks.push(value);
            return this.readChunk(reader, chunks);
        });
    }
    render() {
        return (h(Host, { key: '09d693158ce9480c000957afe31566d47f6fb5f2' }, h("sp-theme", { key: '21f246783a3d5786c1cee8f438e89947ee5f574d', scale: "medium", color: "dark" }, h("sp-button", { key: '7ef9c60895da162d3b521ddc7c070ff463e51094', label: "Summarize email", "icon-only": true, onClickCapture: this.onClick, class: {
                'summarize-button': true,
                'stopped': this.state === 'stopped',
                'loading': this.state === 'loading',
                'playing': this.state === 'playing',
            } }, this.state === 'stopped' && h("play-icon", null), this.state === 'loading' && h("loading-icon", null), this.state === 'playing' && h("stop-icon", null)), h("audio", { key: '7481ceeb62b6eb21c627d0e04be0e0e7a9e986ec', ref: r => (this.audioRef = r), autoPlay: true, onPlaying: () => (this.state = 'playing'), onPause: () => (this.state = 'stopped'), onEnded: () => {
                this.state = 'stopped';
                debug(`[nylas-summarize-message-button] Audio ended`);
            } }))));
    }
    static get is() { return "nylas-summarize-message-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-summarize-message-button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-summarize-message-button.css"]
        };
    }
    static get properties() {
        return {
            "message": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Message",
                    "resolved": "Message | undefined",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The message to summarize"
                }
            }
        };
    }
    static get states() {
        return {
            "state": {}
        };
    }
    static get events() {
        return [{
                "method": "summarize",
                "name": "summarize",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "The on summarize event handler"
                },
                "complexType": {
                    "original": "SummarizeEvent",
                    "resolved": "{ playAudio: (ttsResponseBody: Promise<ReadableStream<Uint8Array> | null>) => Promise<void>; updateState: (state: \"loading\" | \"playing\" | \"stopped\") => Promise<void>; abortController: AbortController; message: Message; }",
                    "references": {
                        "SummarizeEvent": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/mailbox/nylas-summarize-message-button/nylas-summarize-message-button.tsx",
                            "id": "src/components/mailbox/nylas-summarize-message-button/nylas-summarize-message-button.tsx::SummarizeEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "updateState": {
                "complexType": {
                    "signature": "(state: 'loading' | 'playing' | 'stopped') => Promise<void>",
                    "parameters": [{
                            "name": "state",
                            "type": "\"loading\" | \"playing\" | \"stopped\"",
                            "docs": "The new state"
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Update the state of the summarize button",
                    "tags": [{
                            "name": "param",
                            "text": "state The new state"
                        }, {
                            "name": "returns",
                            "text": "Promise<void>"
                        }]
                }
            },
            "playAudio": {
                "complexType": {
                    "signature": "(ttsResponseBody: Promise<ReadableStream<Uint8Array> | null>) => Promise<void>",
                    "parameters": [{
                            "name": "ttsResponseBody",
                            "type": "Promise<ReadableStream<Uint8Array> | null>",
                            "docs": "Text to speech response body"
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "ReadableStream": {
                            "location": "global",
                            "id": "global::ReadableStream"
                        },
                        "Uint8Array": {
                            "location": "global",
                            "id": "global::Uint8Array"
                        },
                        "HTMLAudioElement": {
                            "location": "global",
                            "id": "global::HTMLAudioElement"
                        },
                        "ReadableStreamDefaultReader": {
                            "location": "global",
                            "id": "global::ReadableStreamDefaultReader"
                        },
                        "SourceBuffer": {
                            "location": "global",
                            "id": "global::SourceBuffer"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Play audio",
                    "tags": [{
                            "name": "param",
                            "text": "ttsResponseBody Text to speech response body"
                        }, {
                            "name": "param",
                            "text": "audioRef Audio element"
                        }]
                }
            }
        };
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-summarize-message-button',
        eventToProps: {
            summarize: async (event, nylasConnector) => {
                const { playAudio, updateState, abortController, message } = event.detail;
                const text = htmlToPlainText(message.body || '');
                await updateState('loading');
                try {
                    const summary = await nylasConnector.messages.summarizeText(text);
                    const ttsResponseBody = nylasConnector.messages.textToSpeech(summary, abortController);
                    await playAudio(ttsResponseBody);
                }
                catch (error) {
                    await updateState('stopped');
                    console.error('Error summarizing message:', error);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasSummarizeMessageButton.prototype, "render", null);
//# sourceMappingURL=nylas-summarize-message-button.js.map
