import { processStyles } from "../../../utils/color-utils";
import { debug, detectHTMLOrPlainText, detectIfMessageIsHTML, parsePlainTextToHTML } from "../../../utils/utils";
import { Fragment, Host, h } from "@stencil/core";
import DOMPurify from "dompurify";
DOMPurify.addHook('afterSanitizeAttributes', function (node) {
    if ('target' in node) {
        node.setAttribute('target', '_blank');
        node.setAttribute('rel', 'noopener');
    }
});
export class NylasViewEmail {
    constructor() {
        this.htmlElement = document.createElement('html');
        this.setBody = (body) => {
            this.state = 'loading';
            this.styles = [];
            this.hoistedFontURLs = new Map();
            this.sanitizedBody = '';
            document.querySelectorAll('.nylas-view-email-font').forEach(link => {
                link.remove();
            });
            const isHTML = this.message ? detectIfMessageIsHTML(this.message) : detectHTMLOrPlainText(body);
            if (!isHTML) {
                body = `<html><body>${parsePlainTextToHTML(body)}</body></html>`;
            }
            this.htmlElement.innerHTML = body;
            if (this.detectDarkMode) {
                processStyles(this.htmlElement);
            }
            this.htmlElement.querySelectorAll('link').forEach(link => {
                console.debug(`[nylas-view-email] Hoisting link: ${link.getAttribute('href')}`);
                if (link.getAttribute('rel') === 'stylesheet' && link.getAttribute('href')) {
                    const href = link.getAttribute('href');
                    if (href) {
                        const url = new URL(href, window.location.href);
                        if (url.protocol === 'https:' || url.protocol === 'http:') {
                            this.hoistedFontURLs.set(url.href, url.href);
                        }
                    }
                }
            });
            this.htmlElement.querySelectorAll('style').forEach(style => {
                style.innerHTML.split('\n').forEach(line => {
                    const match = line.match(/@import url\((.*)\)/);
                    if (match) {
                        const url = new URL(match[1], window.location.href);
                        if (url.protocol === 'https:' || url.protocol === 'http:') {
                            this.hoistedFontURLs.set(url.href, url.href);
                        }
                    }
                });
                style.innerHTML = style.innerHTML.replace('body', ':host');
                this.styles.push(style);
                style.remove();
            });
            this.htmlElement.querySelectorAll('a').forEach(a => {
                a.setAttribute('target', '_blank');
            });
            const gmailQuote = this.htmlElement.querySelector('.gmail_quote');
            if (gmailQuote) {
                const toggleButton = document.createElement('button');
                toggleButton.classList.add('nylas-view-email-toggle-button');
                toggleButton.setAttribute('aria-label', 'Show quoted text');
                toggleButton.innerText = '...';
                gmailQuote.parentElement?.insertBefore(toggleButton, gmailQuote);
            }
            this.sanitizedBody = DOMPurify.sanitize(this.htmlElement.innerHTML);
            this.hoistedFontURLs.forEach((url, _key) => {
                const link = document.createElement('link');
                link.setAttribute('rel', 'stylesheet');
                link.setAttribute('href', url);
                link.classList.add('nylas-view-email-font');
                document.head.appendChild(link);
            });
            this.state = 'ready';
        };
        this.handleMobileSize = () => {
            const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
            if (vw <= 768) {
                const viewEmailReact = this.viewEmailElement?.getBoundingClientRect();
                if (viewEmailReact && this.viewEmailElement && this.parent) {
                    if (viewEmailReact.width > vw) {
                        const parentElement = this.parent;
                        const parentReact = parentElement?.getBoundingClientRect();
                        debug('Parent width:', parentReact?.width, 'Parent height:', parentReact?.height);
                        debug('Parent client width:', parentElement.clientWidth, 'Parent client height:', parentElement.clientHeight);
                        const scaleX = parentReact.width / viewEmailReact.width;
                        const scaleY = parentReact.height / viewEmailReact.height;
                        const scale = Math.min(scaleX, scaleY);
                        debug('Scale:', scale);
                        this.viewEmailElement.style.setProperty('transform', `scale(${scale})`);
                        this.viewEmailElement.style.setProperty('transform-origin', `top left`);
                        this.viewEmailElement.style.setProperty('height', `${viewEmailReact.height * scale}px`);
                    }
                }
            }
            else {
                this.viewEmailElement?.style.removeProperty('transform');
                this.viewEmailElement?.style.removeProperty('transform-origin');
                this.viewEmailElement?.style.removeProperty('height');
            }
        };
        this.message = undefined;
        this.parent = undefined;
        this.attachments = [];
        this.detectDarkMode = true;
        this.state = 'loading';
        this.sanitizedBody = '';
        this.styles = [];
        this.viewEmailElement = undefined;
        this.hoistedFontURLs = new Map();
    }
    connectedCallback() { }
    disconnectedCallback() {
        debug(`[nylas-view-email] Component disconnected`);
        this.state = 'loading';
        this.styles = [];
        this.hoistedFontURLs = new Map();
        this.sanitizedBody = '';
        document.querySelectorAll('.nylas-view-email-font').forEach(link => {
            link.remove();
        });
    }
    async componentWillLoad() {
        debug(`[nylas-view-email] component loaded`);
        this.setBody(this.message?.body ?? '');
    }
    async componentDidLoad() {
        debug(`[nylas-view-thread] Component did load`);
        this.handleMobileSize();
    }
    async messageChanged() {
        debug(`[nylas-view-thread] Message changed`, { message: this.message });
        this.setBody(this.message?.body ?? '');
    }
    handleScroll() {
        this.handleMobileSize();
    }
    viewEmailElementChanged() {
        const toggleButton = this.viewEmailElement?.querySelectorAll('.nylas-view-email-toggle-button');
        if (toggleButton) {
            toggleButton.forEach(button => {
                button.addEventListener('click', () => {
                    const gmailQuote = this.viewEmailElement?.querySelector('.gmail_quote');
                    if (gmailQuote) {
                        gmailQuote.classList.toggle('show');
                    }
                });
            });
        }
    }
    render() {
        console.debug(`[nylas-view-email] render`, { hoistedFontURLs: this.hoistedFontURLs });
        return (h(Host, { key: 'fe606c06674789e63156056d8b71a5cb2202cf47' }, this.state === 'loading' && h("div", null, "Loading..."), this.state === 'ready' && (h(Fragment, null, this.styles.map(style => (h("style", null, DOMPurify.sanitize(style.innerHTML)))), h("div", { class: 'view-email', part: "view-email", innerHTML: this.sanitizedBody, ref: el => (this.viewEmailElement = el) })))));
    }
    static get is() { return "nylas-view-email"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-view-email.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-view-email.css"]
        };
    }
    static get properties() {
        return {
            "message": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Message",
                    "resolved": "Message | undefined",
                    "references": {
                        "Message": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Message"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "parent": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement | undefined",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "attachments": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "InternalAttachment[]",
                    "resolved": "InternalAttachment[]",
                    "references": {
                        "InternalAttachment": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::InternalAttachment"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "[]"
            },
            "detectDarkMode": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "detect-dark-mode",
                "reflect": false,
                "defaultValue": "true"
            }
        };
    }
    static get states() {
        return {
            "state": {},
            "sanitizedBody": {},
            "styles": {},
            "viewEmailElement": {},
            "hoistedFontURLs": {}
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "message",
                "methodName": "messageChanged"
            }, {
                "propName": "viewEmailElement",
                "methodName": "viewEmailElementChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "resize",
                "method": "handleScroll",
                "target": "window",
                "capture": false,
                "passive": true
            }];
    }
}
//# sourceMappingURL=nylas-view-email.js.map
