var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, formatDateTime, formatParticipants } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasListThreads {
    constructor() {
        this.handleThreadSelected = async (thread) => {
            debug(`[nylas-list-threads] Thread selected`, { thread });
            const event = this.threadSelected.emit(thread);
            if (!event.defaultPrevented) {
                debug(`[nylas-list-threads] Default event not prevented, selecting thread`);
            }
        };
        this.handleCheckboxClick = async (event) => {
            debug(`[nylas-list-threads] Checkbox clicked`, { event });
            event.stopPropagation();
        };
        this.threads = [];
        this.isAuthenticated = false;
        this.tokenInfo = undefined;
        this.state = 'ready';
        this.showCheckbox = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-list-threads] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-list-threads] Component did load`, { isAuthenticated: this.isAuthenticated });
    }
    render() {
        return (h(Host, { key: 'f943d924f47f9e1133bf87fcd32ee78e5b9bbf01' }, h("div", { key: '2159737dbb20305da9f966959d9da7a1830b9b2b', class: 'list-thread', part: "list-thread" }, this.state === 'loading' && new Array(10).fill(0).map((_, i) => h("div", { class: "thread loading", style: { animationDelay: `${i * 20}ms` } })), this.state === 'ready' &&
            this.threads.map(thread => (h("button", { key: thread?.id, class: {
                    'thread': true,
                    'unread': thread?.unread === true,
                    'no-checkbox': this.showCheckbox === false,
                }, part: "thread", "aria-label": `Thread with subject ${thread?.subject}`, onClick: () => this.handleThreadSelected(thread) }, this.showCheckbox && (h("div", { class: "checkbox", part: "checkbox" }, h("sp-checkbox", { size: "s", value: thread?.id, onClick: this.handleCheckboxClick }))), h("div", { class: "from", part: "from" }, formatParticipants(thread.participants ?? [], this.tokenInfo?.email, thread?.message_ids?.length || 1, 1)), h("div", { class: "subject", part: "subject" }, thread?.subject), h("div", { class: "count", part: "count" }, thread?.message_ids?.length || 1), h("div", { class: "snippet", part: "snippet" }, thread?.snippet?.trim()), thread.latest_message_received_date && (h("div", { class: "date", "aria-label": `${Intl.DateTimeFormat(undefined, { dateStyle: 'full' }).format(new Date(thread.latest_message_received_date * 1000))}`, part: "date" }, formatDateTime(thread.latest_message_received_date)))))))));
    }
    static get is() { return "nylas-list-threads"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-list-threads.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-list-threads.css"]
        };
    }
    static get properties() {
        return {
            "threads": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Thread[]",
                    "resolved": "Thread[]",
                    "references": {
                        "Thread": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Thread"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "[]"
            },
            "isAuthenticated": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "is-authenticated",
                "reflect": false,
                "defaultValue": "false"
            },
            "tokenInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "TokenInfo",
                    "resolved": "undefined | { grant_id: string; email: string; expires_in: number; id_token: string; token_type: string; scope: string; refresh_token: string; }",
                    "references": {
                        "TokenInfo": {
                            "location": "import",
                            "path": "@nylas/core/dist/auth",
                            "id": "../nylas-js-core/dist/auth/index.d.ts::TokenInfo"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "state": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DataState",
                    "resolved": "\"loading\" | \"ready\"",
                    "references": {
                        "DataState": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::DataState"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "state",
                "reflect": false,
                "defaultValue": "'ready'"
            },
            "showCheckbox": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "show-checkbox",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "threadSelected",
                "name": "threadSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "Thread",
                    "resolved": "Thread",
                    "references": {
                        "Thread": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Thread"
                        }
                    }
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-list-threads',
        stateToProps: new Map([
            ['auth.isAuthenticated', 'isAuthenticated'],
            ['auth.tokenInfo', 'tokenInfo'],
            ['mailbox.threads', 'threads'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            threadSelected: async (event, nylasConnector) => {
                debug(`[nylas-list-threads] Thread selected`, { event });
                await nylasConnector.threads.selectThread(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListThreads.prototype, "render", null);
//# sourceMappingURL=nylas-list-threads.js.map
