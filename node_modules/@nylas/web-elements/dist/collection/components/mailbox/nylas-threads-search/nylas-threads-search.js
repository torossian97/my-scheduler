var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasThreadsSearch {
    constructor() {
        this.onSearch = async (event) => {
            event.preventDefault();
            event.stopPropagation();
            const target = event.target;
            const value = target.value;
            if (value === this.internalQuery) {
                return;
            }
            this.internalQuery = value;
            this.search.emit(this.internalQuery);
        };
        this.query = '';
        this.internalQuery = '';
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-threads-search] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-threads-search] Component did load`);
    }
    onQueryChange() {
        this.internalQuery = this.query;
    }
    render() {
        return (h(Host, { key: '9e91a330bea4dc84fa96070591e95926f52ee0bb' }, h("sp-theme", { key: '6d1df81ced09a5b721d8f161e40450633ae2cd98', scale: "medium", color: "dark" }, h("sp-search", { key: 'cb81bba4b4f1d279f1fd48bda9a2fb003cb65fcd', quiet: true, onSubmit: this.onSearch, onBlur: this.onSearch, value: this.internalQuery }))));
    }
    static get is() { return "nylas-threads-search"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-threads-search.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-threads-search.css"]
        };
    }
    static get properties() {
        return {
            "query": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The query to search for threads"
                },
                "attribute": "query",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "internalQuery": {}
        };
    }
    static get events() {
        return [{
                "method": "search",
                "name": "search",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the query changes"
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "query",
                "methodName": "onQueryChange"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-pagination',
        stateToProps: new Map([['mailbox.searchQuery', 'query']]),
        eventToProps: {
            search: async (_event, nylasConnector) => {
                await nylasConnector.threads.getThreads({
                    search_query_native: _event.detail || undefined,
                    page_token: undefined,
                });
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasThreadsSearch.prototype, "render", null);
//# sourceMappingURL=nylas-threads-search.js.map
