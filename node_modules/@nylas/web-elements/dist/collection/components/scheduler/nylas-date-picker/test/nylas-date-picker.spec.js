import { newSpecPage } from "@stencil/core/testing";
import { NylasDatePicker } from "../nylas-date-picker";
describe('nylas-date-picker', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders correctly and generates dates for the current month', async () => {
        const page = await newSpecPage({
            components: [NylasDatePicker],
            html: `<nylas-date-picker></nylas-date-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        expect(page.rootInstance.dates.length).toBeGreaterThan(0);
    });
    it('emits dateSelected event with the correct date on date selection', async () => {
        const selectedDate = new Date();
        const page = await newSpecPage({
            components: [NylasDatePicker],
            html: `<nylas-date-picker></nylas-date-picker>`,
        });
        const spyEvent = jest.fn();
        page.win.addEventListener('dateSelected', spyEvent);
        page.rootInstance.selectDate(selectedDate);
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalledWith(expect.objectContaining({ detail: selectedDate }));
    });
    it('changes the month and emits monthChanged event on month navigation', async () => {
        const page = await newSpecPage({
            components: [NylasDatePicker],
            html: `<nylas-date-picker></nylas-date-picker>`,
        });
        const spyEvent = jest.fn();
        page.win.addEventListener('monthChanged', spyEvent);
        const nextMonthButton = page?.root?.shadowRoot?.querySelector('.chevron-right');
        nextMonthButton.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
        expect(page.rootInstance.month.getMonth()).toBe(new Date().getMonth() + 1);
    });
    it('disables dates not in selectableDates', async () => {
        const selectableDates = [new Date()];
        const page = await newSpecPage({
            components: [NylasDatePicker],
            html: `<nylas-date-picker></nylas-date-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.selectableDates = selectableDates;
        page.root.isLoading = false;
        await page.waitForChanges();
        const dates = page?.root?.shadowRoot?.querySelectorAll('button.date.current-month');
        const disabledDates = page?.root?.shadowRoot?.querySelectorAll('button.date.current-month[disabled]');
        expect(disabledDates.length).toBe(dates.length - selectableDates.length);
    });
    it('displays loading state and disables date selection', async () => {
        const page = await newSpecPage({
            components: [NylasDatePicker],
            html: `<nylas-date-picker is-loading="true"></nylas-date-picker>`,
        });
        await page.waitForChanges();
        const dates = page?.root?.shadowRoot?.querySelectorAll('button.date');
        const loadingDates = page?.root?.shadowRoot?.querySelectorAll('button.date.day-skeleton');
        const allDatesLoading = loadingDates.length === dates.length;
        expect(allDatesLoading).toBe(true);
    });
});
//# sourceMappingURL=nylas-date-picker.spec.js.map
