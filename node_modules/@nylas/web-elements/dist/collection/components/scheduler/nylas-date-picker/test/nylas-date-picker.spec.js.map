{"version":3,"file":"nylas-date-picker.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-date-picker/test/nylas-date-picker.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasDatePicker } from '../nylas-date-picker';\n\ndescribe('nylas-date-picker', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders correctly and generates dates for the current month', async () => {\n    const page = await newSpecPage({\n      components: [NylasDatePicker],\n      html: `<nylas-date-picker></nylas-date-picker>`,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n    expect(page.rootInstance.dates.length).toBeGreaterThan(0);\n  });\n  it('emits dateSelected event with the correct date on date selection', async () => {\n    const selectedDate = new Date();\n    const page = await newSpecPage({\n      components: [NylasDatePicker],\n      html: `<nylas-date-picker></nylas-date-picker>`,\n    });\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('dateSelected', spyEvent);\n\n    page.rootInstance.selectDate(selectedDate);\n    await page.waitForChanges();\n\n    expect(spyEvent).toHaveBeenCalledWith(expect.objectContaining({ detail: selectedDate }));\n  });\n  it('changes the month and emits monthChanged event on month navigation', async () => {\n    const page = await newSpecPage({\n      components: [NylasDatePicker],\n      html: `<nylas-date-picker></nylas-date-picker>`,\n    });\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('monthChanged', spyEvent);\n\n    // Change to the next month\n    const nextMonthButton = page?.root?.shadowRoot?.querySelector('.chevron-right') as HTMLButtonElement;\n    nextMonthButton.click();\n    await page.waitForChanges();\n\n    expect(spyEvent).toHaveBeenCalled();\n    expect(page.rootInstance.month.getMonth()).toBe(new Date().getMonth() + 1); // Assuming test runs in a month that is not December\n  });\n  it('disables dates not in selectableDates', async () => {\n    const selectableDates = [new Date()];\n    const page = await newSpecPage({\n      components: [NylasDatePicker],\n      html: `<nylas-date-picker></nylas-date-picker>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.selectableDates = selectableDates;\n    page.root.isLoading = false;\n    await page.waitForChanges();\n    const dates = page?.root?.shadowRoot?.querySelectorAll('button.date.current-month') as NodeListOf<HTMLButtonElement>;\n    const disabledDates = page?.root?.shadowRoot?.querySelectorAll('button.date.current-month[disabled]') as NodeListOf<HTMLButtonElement>;\n\n    expect(disabledDates.length).toBe(dates.length - selectableDates.length);\n  });\n  it('displays loading state and disables date selection', async () => {\n    const page = await newSpecPage({\n      components: [NylasDatePicker],\n      html: `<nylas-date-picker is-loading=\"true\"></nylas-date-picker>`,\n    });\n\n    await page.waitForChanges();\n\n    const dates = page?.root?.shadowRoot?.querySelectorAll('button.date') as NodeListOf<HTMLButtonElement>;\n    const loadingDates = page?.root?.shadowRoot?.querySelectorAll('button.date.day-skeleton') as NodeListOf<HTMLButtonElement>;\n    const allDatesLoading = loadingDates.length === dates.length;\n    expect(allDatesLoading).toBe(true);\n  });\n});\n"]}