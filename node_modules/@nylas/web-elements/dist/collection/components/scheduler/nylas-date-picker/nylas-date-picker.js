var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { addDaysToCurrentDate, getFirstDayOfMonth, getLastDayOfMonth, isSameDay, isSameMonth } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { timeDay } from "d3-time";
export class NylasDatePicker {
    constructor() {
        this.selectableDates = undefined;
        this.selectedDate = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.month = this.selectedDate || new Date();
        this.dates = this.getDates();
        this.disableNextMonthButton = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    getDates() {
        const lastDayOfMonth = getLastDayOfMonth(this.month);
        const firstDayOfMonth = getFirstDayOfMonth(this.month);
        return timeDay.range(timeDay.offset(firstDayOfMonth, -firstDayOfMonth.getDay()), timeDay.offset(lastDayOfMonth, 7 - lastDayOfMonth.getDay()));
    }
    selectDate(date) {
        this.dateSelected.emit(date);
    }
    changeMonth(change) {
        this.month = new Date(this.month.getFullYear(), this.month.getMonth() + change, 1);
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = this.configSettings?.scheduler?.available_days_in_future;
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
        this.dates = this.getDates();
        this.monthChanged.emit(this.month);
        this.selectDate();
    }
    isSelected(date, selectedDate, selectableDates) {
        return date && selectedDate && isSameDay(date, selectedDate) && selectableDates && selectableDates?.length > 0;
    }
    isDisabled(date, selectableDates) {
        return date && selectableDates?.find(d => isSameDay(d, date)) === undefined;
    }
    render() {
        return (h(Host, { key: 'd6122ec547ac33e6febfe41497a1bd3de1eeb6b3', part: "ndp" }, h("div", { key: 'cee58b509bf57156342c7506a020b64611f62209', class: "nylas-date-picker" }, h("div", { key: 'bb3a8356004b07fd86fb05961eb400215b824e3a', class: 'header flex-row' }, h("h2", { key: '681f87b531eaa6c26b99bb2616fd59cd388e6bd9', part: 'ndp__month-header' }, h("strong", { key: 'e93fb4feacb91042cbfa8bb65b0a196fafb343d2' }, this.month.toLocaleDateString(undefined, { month: 'long' })), "\u00A0", this.month.toLocaleDateString(undefined, { year: 'numeric' })), h("div", { key: 'fb4c4671c2cf24d4ae2ddf1077d0431a8a6261a8', class: 'pagination' }, h("button", { key: '6810b244baf594e6a9c69b2916704744a0d18f74', onClick: () => this.changeMonth(-1), class: { 'chevron-left': true, 'button': true }, disabled: !this.selectableDates?.length || this.month <= new Date(), part: "ndp__month-button" }, h("chevron-icon", { key: '8a14ef5e447da88e3c1c19b77f7d42454243dd4e' })), h("button", { key: 'aa6efd17b59da3308fec14032c64017849750702', onClick: () => this.changeMonth(1), class: { 'chevron-right': true, 'button': true }, disabled: !this.selectableDates?.length || this.disableNextMonthButton, part: "ndp__month-button" }, h("chevron-icon", { key: '3a1704b4c41d92ac54a6936e487402a98bba5de1' })))), h("div", { key: '85910baac9b8b411ebfede44c0a11bff2e489efe', class: 'dates' }, ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map(day => {
            return (h("div", { class: 'day', part: "ndp__day" }, day));
        }), this.dates.map((date, i) => {
            const isDisabled = this.isDisabled(date, this.selectableDates);
            if (this.isLoading) {
                return (h("button", { disabled: true, class: {
                        'date day-skeleton': true,
                        'current-month': isSameMonth(date, this.month),
                    }, style: { animationDelay: `${i * 20}ms` }, part: 'ndp__date' }, date.getDate()));
            }
            return (h("button", { class: {
                    'date': true,
                    'selected': !!(this.selectedDate && isSameDay(date, this.selectedDate) && this.selectableDates && this.selectableDates?.length > 0),
                    'current-day': isSameDay(date, new Date()),
                    'current-month': isSameMonth(date, this.month),
                }, "aria-lang": date.toLocaleDateString(undefined, { dateStyle: 'full' }), disabled: isDisabled, onClick: () => this.selectDate(date), part: `ndp__date ${this.isSelected(date, this.selectedDate, this.selectableDates) ? 'ndp__date--selected' : ''} ${isSameDay(date, new Date()) ? 'ndp__date--current-day' : ''} ${isSameMonth(date, this.month) ? 'ndp__date--current-month' : ''}` }, date.getDate()));
        })))));
    }
    static get is() { return "nylas-date-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-date-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-date-picker.css"]
        };
    }
    static get properties() {
        return {
            "selectableDates": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date[]",
                    "resolved": "Date[] | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The dates that are selectable."
                }
            },
            "selectedDate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected date."
                }
            },
            "configSettings": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "undefined | { scheduler: { available_days_in_future: number; min_cancellation_notice: number; }; organizer: { name: string; email: string; }; }",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::ConfigSettings"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings."
                }
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state."
                },
                "attribute": "is-loading",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "month": {},
            "dates": {},
            "disableNextMonthButton": {}
        };
    }
    static get events() {
        return [{
                "method": "dateSelected",
                "name": "dateSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when a date is selected."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }, {
                "method": "monthChanged",
                "name": "monthChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the month is changed."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-date-picker',
        stateToProps: new Map([
            ['scheduler.selectableDates', 'selectableDates'],
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            dateSelected: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectDate(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasDatePicker.prototype, "render", null);
//# sourceMappingURL=nylas-date-picker.js.map
