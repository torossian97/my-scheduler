import { newSpecPage } from "@stencil/core/testing";
import { NylasBookingForm } from "../nylas-booking-form";
describe('nylas-booking-form', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    let consoleErrorSpy;
    beforeEach(() => {
        consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
    });
    afterEach(() => {
        consoleErrorSpy.mockRestore();
    });
    it('renders correctly with initial props', async () => {
        const bookingInfo = {
            primaryParticipant: {
                name: 'John Doe',
                email: 'john.doe@example.com',
            },
        };
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.bookingInfo = bookingInfo;
        await page.waitForChanges();
        expect(page.rootInstance.name).toEqual('John Doe');
        expect(page.rootInstance.email).toEqual('john.doe@example.com');
        expect(page.root).toMatchSnapshot();
    });
    it('renders an email error message when email is invalid', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]');
        emailInput.value = 'invalid-email';
        emailInput.dispatchEvent(new Event('input'));
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        const errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text');
        console.debug(errorMessage.className);
        expect(errorMessage.textContent).toBe('Enter a valid email address');
    });
    xit('renders guest email input on add guest button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[part="nbf__input-textfield"][id^="guest-email-"]');
        expect(guestEmailInputs.length).toEqual(1);
    });
    xit('allows multiple guest emails to be added', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^="guest-email-"]');
        expect(guestEmailInputs.length).toBe(2);
    });
    xit('removes a guest email input on remove button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        addGuestButton.click();
        await page.waitForChanges();
        const removeGuestButton = page?.root?.shadowRoot?.querySelector('.remove-guest');
        removeGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^="guest-email-"]');
        expect(guestEmailInputs.length).toBe(1);
    });
    it('emits nameChanged and emailChanged events on input change', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameChangedSpy = jest.fn();
        const emailChangedSpy = jest.fn();
        page.win.addEventListener('nameChanged', nameChangedSpy);
        page.win.addEventListener('emailChanged', emailChangedSpy);
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]');
        nameInput.value = 'Jane Doe';
        emailInput.value = 'jane.doe@example.com';
        nameInput.dispatchEvent(new Event('input'));
        emailInput.dispatchEvent(new Event('input'));
        await page.waitForChanges();
        expect(nameChangedSpy.mock.calls[0][0].detail).toEqual('Jane Doe');
        expect(emailChangedSpy.mock.calls[0][0].detail).toEqual('jane.doe@example.com');
    });
    it('emits backButtonClicked event on back button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const backButton = page?.root?.shadowRoot?.querySelector('.back');
        const backButtonClickedSpy = jest.fn();
        page.win.addEventListener('backButtonClicked', backButtonClickedSpy);
        backButton.click();
        await page.waitForChanges();
        expect(backButtonClickedSpy).toHaveBeenCalled();
    });
    it('validates inputs and emits detailsConfirmed on form submission', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const detailsConfirmedSpy = jest.fn();
        page.win.addEventListener('detailsConfirmed', detailsConfirmedSpy);
        page.rootInstance.name = 'Jane Doe';
        page.rootInstance.email = 'jane.doe@example.com';
        page.rootInstance.guestEmails = ['guest@example.com'];
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        expect(detailsConfirmedSpy).toHaveBeenCalled();
        expect(detailsConfirmedSpy.mock.calls[0][0].detail).toEqual(expect.objectContaining({
            primaryParticipant: { name: 'Jane Doe', email: 'jane.doe@example.com' },
            guests: [{ name: '', email: 'guest@example.com' }],
        }));
    });
    it('on entering name input and focusing on email input there are no errors', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]');
        nameInput.focus();
        nameInput.value = 'text';
        emailInput.focus();
        await page.waitForChanges();
        expect(consoleErrorSpy).not.toHaveBeenCalled();
    });
    it('validates name input correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper .help-text');
        expect(errorMessage.textContent).toBeFalsy();
        nameInput.value = '';
        nameInput.dispatchEvent(new Event('input'));
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper .help-text');
        expect(errorMessage.textContent).toBe('Name is required');
    });
    it('validates email input correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]');
        emailInput.value = 'john.doe@example.com';
        emailInput.dispatchEvent(new Event('input'));
        let form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text');
        expect(errorMessage.textContent).toBeFalsy();
        emailInput.value = '';
        emailInput.dispatchEvent(new Event('input'));
        await page.waitForChanges();
        form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text');
        expect(errorMessage.textContent).toBe('Email is required');
    });
    xit('validates guest email inputs correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]');
        emailInput.value = 'john.doe@example.com';
        emailInput.dispatchEvent(new Event('input'));
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id^="guest-email-0"]');
        guestEmailInput.dispatchEvent(new Event('blur'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(3) .button-wrapper .help-text');
        expect(errorMessage.textContent).toBe('Email is required');
        guestEmailInput.value = 'invalid-email';
        guestEmailInput.dispatchEvent(new Event('input'));
        let form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        expect(errorMessage.textContent).toBe('Enter a valid email address');
    });
});
//# sourceMappingURL=nylas-booking-form.spec.js.map
