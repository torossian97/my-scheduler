{"version":3,"file":"nylas-booking-form.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-booking-form/test/nylas-booking-form.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasBookingForm } from '../nylas-booking-form';\n\ndescribe('nylas-booking-form', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n  let consoleErrorSpy;\n\n  beforeEach(() => {\n    // Spy on console.error before each test\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    // Restore the original console.error after each test\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('renders correctly with initial props', async () => {\n    const bookingInfo = {\n      primaryParticipant: {\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n      },\n    };\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.bookingInfo = bookingInfo;\n    await page.waitForChanges();\n    expect(page.rootInstance.name).toEqual('John Doe');\n    expect(page.rootInstance.email).toEqual('john.doe@example.com');\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders an email error message when email is invalid', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    nameInput.value = 'John Doe';\n    nameInput.dispatchEvent(new Event('input'));\n\n    const emailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"email\"]') as HTMLInputElement;\n    emailInput.value = 'invalid-email';\n    emailInput.dispatchEvent(new Event('input'));\n\n    // Submit the form to trigger validation\n    const form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n\n    await page.waitForChanges();\n\n    const errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text') as HTMLParagraphElement;\n    console.debug(errorMessage.className);\n    expect(errorMessage.textContent).toBe('Enter a valid email address');\n  });\n\n  xit('renders guest email input on add guest button click', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest') as HTMLButtonElement;\n    addGuestButton.click();\n\n    await page.waitForChanges();\n\n    const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[part=\"nbf__input-textfield\"][id^=\"guest-email-\"]') as NodeListOf<HTMLInputElement>;\n    expect(guestEmailInputs.length).toEqual(1);\n  });\n\n  xit('allows multiple guest emails to be added', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    // Simulate clicking the 'Add Guest' button twice\n    const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest') as HTMLButtonElement;\n    addGuestButton.click();\n    addGuestButton.click();\n    await page.waitForChanges();\n\n    // Check if two guest email inputs are present\n    const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^=\"guest-email-\"]') as NodeListOf<HTMLInputElement>;\n    expect(guestEmailInputs.length).toBe(2);\n  });\n\n  xit('removes a guest email input on remove button click', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    // Add two guests then remove one\n    const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest') as HTMLButtonElement;\n    addGuestButton.click();\n    addGuestButton.click();\n    await page.waitForChanges();\n\n    const removeGuestButton = page?.root?.shadowRoot?.querySelector('.remove-guest') as HTMLButtonElement;\n    removeGuestButton.click();\n    await page.waitForChanges();\n\n    // Check if one guest email input remains\n    const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^=\"guest-email-\"]') as NodeListOf<HTMLInputElement>;\n    expect(guestEmailInputs.length).toBe(1);\n  });\n\n  it('emits nameChanged and emailChanged events on input change', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const nameChangedSpy = jest.fn();\n    const emailChangedSpy = jest.fn();\n\n    page.win.addEventListener('nameChanged', nameChangedSpy);\n    page.win.addEventListener('emailChanged', emailChangedSpy);\n\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    const emailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"email\"]') as HTMLInputElement;\n\n    nameInput.value = 'Jane Doe';\n    emailInput.value = 'jane.doe@example.com';\n\n    nameInput.dispatchEvent(new Event('input'));\n    emailInput.dispatchEvent(new Event('input'));\n\n    await page.waitForChanges();\n\n    expect(nameChangedSpy.mock.calls[0][0].detail).toEqual('Jane Doe');\n    expect(emailChangedSpy.mock.calls[0][0].detail).toEqual('jane.doe@example.com');\n  });\n\n  it('emits backButtonClicked event on back button click', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const backButton = page?.root?.shadowRoot?.querySelector('.back') as HTMLButtonElement;\n    const backButtonClickedSpy = jest.fn();\n    page.win.addEventListener('backButtonClicked', backButtonClickedSpy);\n    backButton.click();\n    await page.waitForChanges();\n    expect(backButtonClickedSpy).toHaveBeenCalled();\n  });\n\n  it('validates inputs and emits detailsConfirmed on form submission', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const detailsConfirmedSpy = jest.fn();\n    page.win.addEventListener('detailsConfirmed', detailsConfirmedSpy);\n\n    page.rootInstance.name = 'Jane Doe';\n    page.rootInstance.email = 'jane.doe@example.com';\n    page.rootInstance.guestEmails = ['guest@example.com'];\n\n    const form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n\n    await page.waitForChanges();\n\n    expect(detailsConfirmedSpy).toHaveBeenCalled();\n    expect(detailsConfirmedSpy.mock.calls[0][0].detail).toEqual(\n      expect.objectContaining({\n        primaryParticipant: { name: 'Jane Doe', email: 'jane.doe@example.com' },\n        guests: [{ name: '', email: 'guest@example.com' }],\n      }),\n    );\n  });\n\n  it('on entering name input and focusing on email input there are no errors', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    // Simulate actions\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    const emailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"email\"]') as HTMLInputElement;\n    nameInput.focus();\n    nameInput.value = 'text';\n    emailInput.focus();\n    await page.waitForChanges();\n\n    expect(consoleErrorSpy).not.toHaveBeenCalled();\n  });\n\n  it('validates name input correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    // Simulate entering a valid name\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    nameInput.value = 'John Doe';\n    nameInput.dispatchEvent(new Event('input'));\n    const form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n    await page.waitForChanges();\n\n    // Assert no validation error message for name\n    let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper .help-text') as HTMLParagraphElement;\n    expect(errorMessage.textContent).toBeFalsy();\n\n    // Simulate clearing the name, triggering validation error\n    nameInput.value = '';\n    nameInput.dispatchEvent(new Event('input'));\n\n    form.dispatchEvent(new Event('submit'));\n    await page.waitForChanges();\n\n    // Assert validation error message is shown for name\n    errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper .help-text') as HTMLParagraphElement;\n    expect(errorMessage.textContent).toBe('Name is required');\n  });\n\n  it('validates email input correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    nameInput.value = 'John Doe';\n    nameInput.dispatchEvent(new Event('input'));\n\n    // Simulate entering a valid email\n    const emailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"email\"]') as HTMLInputElement;\n    emailInput.value = 'john.doe@example.com';\n    emailInput.dispatchEvent(new Event('input'));\n    let form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n    await page.waitForChanges();\n\n    // Assert no validation error message for email\n    let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text') as HTMLParagraphElement;\n    expect(errorMessage.textContent).toBeFalsy();\n\n    // Simulate clearing the email, triggering validation error\n    emailInput.value = '';\n    emailInput.dispatchEvent(new Event('input'));\n    await page.waitForChanges();\n    form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n    await page.waitForChanges();\n\n    // Assert validation error message is shown for empty email\n    errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(2) .help-text') as HTMLParagraphElement;\n    expect(errorMessage.textContent).toBe('Email is required');\n  });\n\n  xit('validates guest email inputs correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookingForm],\n      html: `<nylas-booking-form></nylas-booking-form>`,\n    });\n\n    const nameInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"name\"]') as HTMLInputElement;\n    nameInput.value = 'John Doe';\n    nameInput.dispatchEvent(new Event('input'));\n\n    const emailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id=\"email\"]') as HTMLInputElement;\n    emailInput.value = 'john.doe@example.com';\n    emailInput.dispatchEvent(new Event('input'));\n\n    // Simulate adding a guest\n    const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest') as HTMLButtonElement;\n    addGuestButton.click();\n    await page.waitForChanges();\n\n    const guestEmailInput = page?.root?.shadowRoot?.querySelector('[part=\"nbf__input-textfield\"][id^=\"guest-email-0\"]') as HTMLInputElement;\n\n    // Simulate on blur event to trigger validation\n    guestEmailInput.dispatchEvent(new Event('blur'));\n    await page.waitForChanges();\n\n    // Assert validation error message is shown for empty guest email\n    let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(3) .button-wrapper .help-text') as HTMLParagraphElement;\n    expect(errorMessage.textContent).toBe('Email is required');\n\n    // Simulate entering an ivalid guest email\n    guestEmailInput.value = 'invalid-email';\n    guestEmailInput.dispatchEvent(new Event('input'));\n    let form = page?.root?.shadowRoot?.querySelector('form') as HTMLFormElement;\n    form.dispatchEvent(new Event('submit'));\n    await page.waitForChanges();\n\n    // Assert validation error message is shown for invalid guest email\n    expect(errorMessage.textContent).toBe('Enter a valid email address');\n  });\n});\n"]}