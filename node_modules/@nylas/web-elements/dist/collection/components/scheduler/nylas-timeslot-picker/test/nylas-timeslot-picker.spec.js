import { newSpecPage } from "@stencil/core/testing";
import { NylasTimeslotPicker } from "../nylas-timeslot-picker";
describe('nylas-timeslot-picker', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders loading state correctly', async () => {
        const page = await newSpecPage({
            components: [NylasTimeslotPicker],
            html: `<nylas-timeslot-picker loading-state="true"></nylas-timeslot-picker>`,
        });
        expect(page.root).toMatchSnapshot();
        expect(page?.root?.shadowRoot?.querySelector('.loading')).not.toBeNull();
    });
    it('displays no availability message correctly', async () => {
        const page = await newSpecPage({
            components: [NylasTimeslotPicker],
            html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.availability = [];
        await page.waitForChanges();
        const emptyState = page?.root?.shadowRoot?.querySelector('.empty');
        expect(emptyState.textContent).toContain('No dates available');
    });
    it('emits timeslotSelected event with timeslot details on selection', async () => {
        const mockTimeslot = {
            start_time: new Date(),
            end_time: new Date(new Date().getTime() + 3600000),
        };
        const page = await newSpecPage({
            components: [NylasTimeslotPicker],
            html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.availability = [mockTimeslot];
        await page.waitForChanges();
        const spyEvent = jest.fn();
        page.win.addEventListener('timeslotSelected', spyEvent);
        const timeslotButton = page?.root?.shadowRoot?.querySelector('button');
        timeslotButton.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalledWith(expect.objectContaining({
            detail: mockTimeslot,
        }));
    });
    it('emits timeslotConfirmed event with selected timeslot on confirm', async () => {
        const mockTimeslot = {
            start_time: new Date(),
            end_time: new Date(new Date().getTime() + 3600000),
        };
        const page = await newSpecPage({
            components: [NylasTimeslotPicker],
            html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.availability = [mockTimeslot];
        page.root.selectedTimeslot = mockTimeslot;
        await page.waitForChanges();
        const spyEvent = jest.fn();
        page.win.addEventListener('timeslotConfirmed', spyEvent);
        const confirmButton = page?.root?.shadowRoot?.querySelector('.footer sp-button');
        confirmButton.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
        expect(spyEvent.mock.calls[0][0].detail).toEqual(mockTimeslot);
    });
    it('renders timeslots for selected date', async () => {
        const selectedDate = new Date();
        const availability = [
            {
                start_time: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 10, 0),
                end_time: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 11, 0),
            },
        ];
        const page = await newSpecPage({
            components: [NylasTimeslotPicker],
            html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.selectedDate = selectedDate;
        page.root.availability = availability;
        await page.waitForChanges();
        const timeslotButtons = page?.root?.shadowRoot?.querySelectorAll('button.time');
        expect(timeslotButtons.length).toBe(availability.length);
    });
});
//# sourceMappingURL=nylas-timeslot-picker.spec.js.map
