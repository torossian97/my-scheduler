var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, isSameDay } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasTimeslotPicker {
    constructor() {
        this.handleConfirmedTimeslot = async (event, timeslot) => {
            event.preventDefault();
            debug(`[nylas-timeslot-picker] Confirm timeslot`, timeslot);
            this.timeslotConfirmed.emit(timeslot);
        };
        this.handleMouseEnter = (index) => {
            this.hoveredTimeslotIndex = index;
        };
        this.handleMouseLeave = () => {
            this.hoveredTimeslotIndex = -1;
        };
        this.selectedDate = new Date();
        this.availability = undefined;
        this.selectedTimeslot = undefined;
        this.isLoading = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.times = [];
        this.hoveredTimeslotIndex = undefined;
        this.selectedTimeslotIndex = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        const availableTimes = this.availability?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
        this.times = availableTimes || [];
        debug(`[nylas-timeslot-picker] Component will load`, { selectedDate: this.selectedDate, availability: this.availability, times: this.times });
    }
    async componentDidLoad() {
        debug(`[nylas-timeslot-picker] Component did load`);
    }
    getTimeslotId(date, index) {
        return `${date.toLocaleDateString()}-${index}`;
    }
    onClickSelectTime(timeslot, index) {
        debug(`[nylas-timeslot-picker] Time selected`, timeslot, index);
        this.selectedTimeslotIndex = this.getTimeslotId(timeslot.start_time, index);
        this.timeslotSelected.emit({
            start_time: timeslot.start_time,
            end_time: timeslot.end_time,
        });
    }
    getTimeSlotLabel(timeslot) {
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            timeZone: this.selectedTimezone,
        });
        return `${timeFormat.format(timeslot.start_time)} - ${timeFormat.format(timeslot.end_time)}`;
    }
    selectedDateChanged(newVal) {
        debug(`[nylas-timeslot-picker] Selected date changed`, { newVal });
        if (newVal) {
            this.selectedTimeslotIndex = '';
            if (typeof newVal !== 'undefined') {
                const availableTimes = this.availability?.filter(timeslot => isSameDay(timeslot.start_time, newVal)).map(timeslot => timeslot);
                this.times = availableTimes || [];
            }
        }
    }
    availabilityChanged(newVal) {
        debug(`[nylas-timeslot-picker] Available times changed`, { newVal, selectedDate: this.selectedDate });
        if (typeof newVal !== 'undefined') {
            const availableTimes = newVal?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
            this.times = availableTimes || [];
        }
    }
    render() {
        if (this.isLoading) {
            return (h(Host, null, h("div", { class: 'loading' }, new Array(6).fill(0).map((_, i) => (h("div", { class: 'time-slot-skeleton', style: { animationDelay: `${i * 20}ms` } }))))));
        }
        if (this.availability && this.availability.length === 0) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No dates available"))));
        }
        if ((!this.times || this.times.length === 0) && !!this.selectedDate) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No time slots available for selected date"))));
        }
        if (!this.selectedDate)
            return h(Host, null);
        return (h(Host, { part: "ntp" }, h("div", { class: 'time-picker-wrapper' }, h("div", { class: 'time-slots' }, this.times.map((timeslot, index) => (h("button", { part: `ntp__timeslot ${this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime() ? 'ntp__timeslot--selected' : ''}`, "aria-role": "button", class: {
                time: true,
                selected: typeof this.selectedTimeslot !== 'undefined' && this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime(),
            }, onClick: () => this.onClickSelectTime(timeslot, index), onMouseEnter: () => this.handleMouseEnter(index), onMouseLeave: () => this.handleMouseLeave() }, this.hoveredTimeslotIndex == index || this.selectedTimeslotIndex == this.getTimeslotId(timeslot.start_time, index)
            ? this.getTimeSlotLabel(timeslot)
            : timeslot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZone: this.selectedTimezone }))))), this.selectedTimeslot && (h("div", { class: 'footer' }, h("sp-button", { variant: "primary", onClick: (event) => this.handleConfirmedTimeslot(event, this.selectedTimeslot), part: "ntp__button-primary" }, h("slot", { name: "timeslot-picker-cta-label" }, "Next")))))));
    }
    static get is() { return "nylas-timeslot-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-timeslot-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-timeslot-picker.css"]
        };
    }
    static get properties() {
        return {
            "selectedDate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected date."
                },
                "defaultValue": "new Date()"
            },
            "availability": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AvailabilityTimeslot[]",
                    "resolved": "AvailabilityTimeslot[] | undefined",
                    "references": {
                        "AvailabilityTimeslot": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::AvailabilityTimeslot"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The available timeslots."
                }
            },
            "selectedTimeslot": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "undefined | { start_time: Date; end_time: Date; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected timeslot."
                }
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state prop. Used to display loading state when fetching availability."
                },
                "attribute": "loading-state",
                "reflect": false
            },
            "selectedTimezone": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timezone."
                },
                "attribute": "selected-timezone",
                "reflect": false,
                "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone"
            }
        };
    }
    static get states() {
        return {
            "times": {},
            "hoveredTimeslotIndex": {},
            "selectedTimeslotIndex": {}
        };
    }
    static get events() {
        return [{
                "method": "timeslotSelected",
                "name": "timeslotSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when a timeslot is selected."
                },
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "{ start_time: Date; end_time: Date; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                }
            }, {
                "method": "timeslotConfirmed",
                "name": "timeslotConfirmed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when a timeslot is confirmed. By default, this will proceed to the booking form page."
                },
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "{ start_time: Date; end_time: Date; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "selectedDate",
                "methodName": "selectedDateChanged"
            }, {
                "propName": "availability",
                "methodName": "availabilityChanged"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-timeslot-picker',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.availability', 'availability'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.isLoading', 'isLoading'],
        ]),
        eventToProps: {
            timeslotSelected: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectTime(event.detail);
            },
            timeslotConfirmed: async (event, nylasSchedulerConnector) => {
                if (event.detail) {
                    nylasSchedulerConnector.scheduler.toggleAdditionalData(true);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotPicker.prototype, "render", null);
//# sourceMappingURL=nylas-timeslot-picker.js.map
