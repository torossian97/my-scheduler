{"version":3,"file":"nylas-timeslot-picker.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-timeslot-picker/test/nylas-timeslot-picker.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasTimeslotPicker } from '../nylas-timeslot-picker';\n\ndescribe('nylas-timeslot-picker', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders loading state correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasTimeslotPicker],\n      html: `<nylas-timeslot-picker loading-state=\"true\"></nylas-timeslot-picker>`,\n    });\n\n    expect(page.root).toMatchSnapshot();\n    expect(page?.root?.shadowRoot?.querySelector('.loading')).not.toBeNull();\n  });\n\n  it('displays no availability message correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasTimeslotPicker],\n      html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.availability = [];\n    await page.waitForChanges();\n    const emptyState = page?.root?.shadowRoot?.querySelector('.empty') as HTMLDivElement;\n\n    expect(emptyState.textContent).toContain('No dates available');\n  });\n\n  it('emits timeslotSelected event with timeslot details on selection', async () => {\n    const mockTimeslot = {\n      start_time: new Date(),\n      end_time: new Date(new Date().getTime() + 3600000), // 1 hour later\n    };\n    const page = await newSpecPage({\n      components: [NylasTimeslotPicker],\n      html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.availability = [mockTimeslot];\n    await page.waitForChanges();\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('timeslotSelected', spyEvent);\n\n    const timeslotButton = page?.root?.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    timeslotButton.click();\n\n    await page.waitForChanges();\n\n    expect(spyEvent).toHaveBeenCalledWith(\n      expect.objectContaining({\n        detail: mockTimeslot,\n      }),\n    );\n  });\n\n  it('emits timeslotConfirmed event with selected timeslot on confirm', async () => {\n    const mockTimeslot = {\n      start_time: new Date(),\n      end_time: new Date(new Date().getTime() + 3600000), // 1 hour later\n    };\n    const page = await newSpecPage({\n      components: [NylasTimeslotPicker],\n      html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.availability = [mockTimeslot];\n    page.root.selectedTimeslot = mockTimeslot;\n    await page.waitForChanges();\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('timeslotConfirmed', spyEvent);\n\n    const confirmButton = page?.root?.shadowRoot?.querySelector('.footer sp-button') as HTMLButtonElement;\n    confirmButton.click();\n\n    await page.waitForChanges();\n\n    expect(spyEvent).toHaveBeenCalled();\n    expect(spyEvent.mock.calls[0][0].detail).toEqual(mockTimeslot);\n  });\n\n  it('renders timeslots for selected date', async () => {\n    const selectedDate = new Date();\n    const availability = [\n      {\n        start_time: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 10, 0),\n        end_time: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 11, 0),\n      },\n    ];\n    const page = await newSpecPage({\n      components: [NylasTimeslotPicker],\n      html: `<nylas-timeslot-picker></nylas-timeslot-picker>`,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.selectedDate = selectedDate;\n    page.root.availability = availability;\n    await page.waitForChanges();\n\n    const timeslotButtons = page?.root?.shadowRoot?.querySelectorAll('button.time') as NodeListOf<HTMLButtonElement>;\n    expect(timeslotButtons.length).toBe(availability.length);\n  });\n});\n"]}