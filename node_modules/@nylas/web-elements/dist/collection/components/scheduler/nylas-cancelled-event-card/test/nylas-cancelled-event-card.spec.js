import { newSpecPage } from "@stencil/core/testing";
import { NylasCancelledEventCard } from "../nylas-cancelled-event-card";
describe('nylas-cancelled-event-card', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders correctly', async () => {
        const page = await newSpecPage({
            components: [NylasCancelledEventCard],
            html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('emits closeCancelEventCardClicked event on close button click', async () => {
        const page = await newSpecPage({
            components: [NylasCancelledEventCard],
            html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,
        });
        const closeButton = page?.root?.shadowRoot?.querySelector('[part="ncec__button-outline"]');
        const spyEvent = jest.fn();
        page.win.addEventListener('closeCancelEventCardClicked', spyEvent);
        closeButton.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('displays participant emails correctly', async () => {
        const mockCancelledEvent = {
            organizer: { email: 'participant1@example.com', name: 'Participant 1' },
            booking_id: 'mock-booking-id',
        };
        const page = await newSpecPage({
            components: [NylasCancelledEventCard],
            html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.cancelledEventInfo = mockCancelledEvent;
        await page.waitForChanges();
        const description = page?.root?.shadowRoot?.querySelector('[part="ncec__description"]');
        expect(description.textContent).toContain('A cancellation email has been sent to the participants.');
    });
});
//# sourceMappingURL=nylas-cancelled-event-card.spec.js.map
