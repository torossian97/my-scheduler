{"version":3,"file":"nylas-cancelled-event-card.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-cancelled-event-card/test/nylas-cancelled-event-card.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,uBAAuB,EAAE,MAAM,+BAA+B,CAAC;AAExE,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,UAAU,CAAC,GAAG,EAAE;QAEd,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,2DAA2D;SAClE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;QAC7E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,2DAA2D;SAClE,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,+BAA+B,CAAsB,CAAC;QAChH,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC;QACnE,WAAW,CAAC,KAAK,EAAE,CAAC;QACpB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,kBAAkB,GAAG;YACzB,SAAS,EAAE,EAAE,KAAK,EAAE,0BAA0B,EAAE,IAAI,EAAE,eAAe,EAAE;YACvE,UAAU,EAAE,iBAAiB;SAC9B,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,2DAA2D;SAClE,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAClD,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,4BAA4B,CAAmB,CAAC;QAC1G,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,yDAAyD,CAAC,CAAC;IACvG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasCancelledEventCard } from '../nylas-cancelled-event-card';\n\ndescribe('nylas-cancelled-event-card', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders correctly', async () => {\n    const page = await newSpecPage({\n      components: [NylasCancelledEventCard],\n      html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('emits closeCancelEventCardClicked event on close button click', async () => {\n    const page = await newSpecPage({\n      components: [NylasCancelledEventCard],\n      html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,\n    });\n    const closeButton = page?.root?.shadowRoot?.querySelector('[part=\"ncec__button-outline\"]') as HTMLButtonElement;\n    const spyEvent = jest.fn();\n    page.win.addEventListener('closeCancelEventCardClicked', spyEvent);\n    closeButton.click();\n    await page.waitForChanges();\n    expect(spyEvent).toHaveBeenCalled();\n  });\n\n  it('displays participant emails correctly', async () => {\n    const mockCancelledEvent = {\n      organizer: { email: 'participant1@example.com', name: 'Participant 1' },\n      booking_id: 'mock-booking-id',\n    };\n\n    const page = await newSpecPage({\n      components: [NylasCancelledEventCard],\n      html: `<nylas-cancelled-event-card></nylas-cancelled-event-card>`,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    page.root.cancelledEventInfo = mockCancelledEvent;\n    await page.waitForChanges();\n\n    const description = page?.root?.shadowRoot?.querySelector('[part=\"ncec__description\"]') as HTMLDivElement;\n    expect(description.textContent).toContain('A cancellation email has been sent to the participants.');\n  });\n});\n"]}