var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { debug } from "../../../utils/utils";
export class NylasCancelledEventCard {
    constructor() {
        this.handleCloseClicked = () => {
            this.isClosing = true;
            const errorHandler = (error) => {
                this.cancelledEventCardError.emit(error);
                this.isClosing = false;
            };
            this.closeCancelEventCardClicked.emit({ errorHandler });
        };
        this.cancelledEventInfo = undefined;
        this.isClosing = false;
        this.configSettings = undefined;
    }
    connectedCallback() {
        debug(`[nylas-cancelled-event-card] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancelled-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancelled-event-card] Component did load`);
    }
    disconnectedCallback() {
        debug(`[nylas-cancelled-event-card] Component disconnected`);
    }
    render() {
        return (h(Host, { key: '105954b6497f7a8cf45faedb592896629e90c6d0', part: "ncec" }, h("sp-theme", { key: 'd248975c2139a611ab60c5c585d87e8701327a4b', theme: "spectrum", color: "dark", scale: "medium" }, h("div", { key: '090b767111679ca9968ac0b128c6685fed6e39db', class: "nylas-cancelled-event-card", part: "ncec__card" }, h("div", { key: 'ae1e57f0f2a39f5ad7f4b7b9ed493f3e93ccdeba', class: "nylas-cancelled-event-card__calendar-icon", part: "ncec__icon" }, h("calendar-cancel-icon", { key: '06250b1c0f330957f0f691d0f7724c608dffa28b' })), h("h3", { key: '1826c12ca770476cfd206d9d1a3b80f0d890da56', class: "nylas-cancelled-event-card__title", part: "ncec__title" }, "Your booking has been cancelled successfully!"), h("div", { key: '93c4c7e4ed245372e736c61c30b23e9be11453ec', class: "nylas-cancelled-event-card__description", part: "ncec__description" }, "A cancellation email has been sent to ", this.configSettings?.organizer?.name || 'the participants', "."), h("div", { key: '21162d4c4e2ee6c2f95038b0e25e9ad0aed63742', class: "nylas-cancelled-event-card__cta" }, h("sp-button", { key: 'ab6cb1da324717c3b375c9280f307a2590224f27', variant: "secondary", treatment: "outline", disabled: this.isClosing, part: "ncec__button-outline", onClick: this.handleCloseClicked }, this.isClosing ? 'Closing...' : 'Close'))))));
    }
    static get is() { return "nylas-cancelled-event-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-cancelled-event-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-cancelled-event-card.css"]
        };
    }
    static get properties() {
        return {
            "cancelledEventInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Partial<NylasEvent>",
                    "resolved": "{ booking_id?: string | undefined; organizer?: { email: string; name: string; is_organizer?: boolean | undefined; } | undefined; title?: string | undefined; description?: string | undefined; status?: string | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "NylasEvent": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::NylasEvent"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The participant's name who booked the event / is logged in."
                }
            },
            "configSettings": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "undefined | { scheduler: { available_days_in_future: number; min_cancellation_notice: number; }; organizer: { name: string; email: string; }; }",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::ConfigSettings"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings for the scheduler."
                }
            }
        };
    }
    static get states() {
        return {
            "isClosing": {}
        };
    }
    static get events() {
        return [{
                "method": "closeCancelEventCardClicked",
                "name": "closeCancelEventCardClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the close button is clicked on the cancelled event card."
                },
                "complexType": {
                    "original": "{ errorHandler?: (error: NylasSchedulerErrorResponse) => void }",
                    "resolved": "{ errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelledEventCardError",
                "name": "cancelledEventCardError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-cancelled-event-card',
        stateToProps: new Map([['scheduler.configSettings', 'configSettings']]),
        eventToProps: {
            closeCancelEventCardClicked: async (_, nylasschedulerconnector) => {
                const result = await nylasschedulerconnector.scheduler.resetCancel();
                const { errorHandler } = _.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancelledEventCard.prototype, "render", null);
//# sourceMappingURL=nylas-cancelled-event-card.js.map
