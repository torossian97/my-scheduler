import { newSpecPage } from "@stencil/core/testing";
import { NylasBookedEventCard } from "../nylas-booked-event-card";
import { h } from "@stencil/core";
const eventInfo = {
    booking_id: '123',
    title: 'New event',
    description: '',
    organizer: {
        name: 'John Doe',
        email: 'johndoe@gmail.com',
        is_organizer: true,
    },
    status: 'booked',
};
const selectedTimeslot = {
    start_time: new Date('2023-03-13T14:00:00.000Z'),
    end_time: new Date('2023-03-13T15:00:00.000Z'),
};
describe('nylas-booked-event-card', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders', async () => {
        const page = await newSpecPage({
            components: [NylasBookedEventCard],
            template: () => h("nylas-booked-event-card", { eventInfo: eventInfo, selectedTimeslot: selectedTimeslot }),
            html: `<nylas-booked-event-card></nylas-booked-event-card>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        expect(page.root).toMatchSnapshot();
    });
    it('renders header with event title based on the rescheduleBookingId prop', async () => {
        const page = await newSpecPage({
            components: [NylasBookedEventCard],
            template: () => h("nylas-booked-event-card", { eventInfo: eventInfo, selectedTimeslot: selectedTimeslot }),
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.rescheduleBookingId = 'reschedulingId';
        expect(page.root).toMatchSnapshot();
    });
    it('emits cancelBookingButtonClicked event on cancel button click', async () => {
        const spyEvent = jest.fn();
        const page = await newSpecPage({
            components: [NylasBookedEventCard],
            template: () => h("nylas-booked-event-card", { eventInfo: eventInfo, selectedTimeslot: selectedTimeslot }),
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        const cancelBtn = page?.root?.shadowRoot?.querySelector('.cancel');
        page.win.addEventListener('cancelBookingButtonClicked', spyEvent);
        cancelBtn.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
        const customEvent = spyEvent.mock.calls[0][0];
        expect(customEvent.detail.bookingId).toBe('123');
    });
    it('emits rescheduleButtonClicked event on reschedule button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookedEventCard],
            template: () => h("nylas-booked-event-card", { eventInfo: eventInfo, selectedTimeslot: selectedTimeslot }),
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        const rescheduleBtn = page?.root?.shadowRoot?.querySelector('.reschedule');
        const spyEvent = jest.fn();
        page.win.addEventListener('rescheduleButtonClicked', spyEvent);
        rescheduleBtn.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
        const customEvent = spyEvent.mock.calls[0][0];
        expect(customEvent.detail.bookingId).toBe('123');
    });
    it('renders with event information', async () => {
        const page = await newSpecPage({
            components: [NylasBookedEventCard],
            template: () => h("nylas-booked-event-card", { eventInfo: eventInfo, selectedTimeslot: selectedTimeslot }),
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
    });
});
//# sourceMappingURL=nylas-booked-event-card.spec.js.map
