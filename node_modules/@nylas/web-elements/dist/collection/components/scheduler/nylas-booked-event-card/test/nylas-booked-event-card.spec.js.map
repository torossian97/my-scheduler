{"version":3,"file":"nylas-booked-event-card.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-booked-event-card/test/nylas-booked-event-card.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasBookedEventCard } from '../nylas-booked-event-card';\nimport { h } from '@stencil/core';\n\nconst eventInfo = {\n  booking_id: '123',\n  title: 'New event',\n  description: '',\n  organizer: {\n    name: 'John Doe',\n    email: 'johndoe@gmail.com',\n    is_organizer: true,\n  },\n  status: 'booked',\n};\n\nconst selectedTimeslot = {\n  start_time: new Date('2023-03-13T14:00:00.000Z'),\n  end_time: new Date('2023-03-13T15:00:00.000Z'),\n};\n\ndescribe('nylas-booked-event-card', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookedEventCard],\n      template: () => <nylas-booked-event-card eventInfo={eventInfo} selectedTimeslot={selectedTimeslot}></nylas-booked-event-card>,\n      html: `<nylas-booked-event-card></nylas-booked-event-card>`,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders header with event title based on the rescheduleBookingId prop', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookedEventCard],\n      template: () => <nylas-booked-event-card eventInfo={eventInfo} selectedTimeslot={selectedTimeslot}></nylas-booked-event-card>,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n    page.root.rescheduleBookingId = 'reschedulingId';\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('emits cancelBookingButtonClicked event on cancel button click', async () => {\n    const spyEvent = jest.fn();\n    const page = await newSpecPage({\n      components: [NylasBookedEventCard],\n      template: () => <nylas-booked-event-card eventInfo={eventInfo} selectedTimeslot={selectedTimeslot}></nylas-booked-event-card>,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    const cancelBtn = page?.root?.shadowRoot?.querySelector('.cancel') as HTMLButtonElement;\n    page.win.addEventListener('cancelBookingButtonClicked', spyEvent);\n    cancelBtn.click();\n    await page.waitForChanges();\n    expect(spyEvent).toHaveBeenCalled();\n    const customEvent = spyEvent.mock.calls[0][0];\n    expect(customEvent.detail.bookingId).toBe('123');\n  });\n\n  it('emits rescheduleButtonClicked event on reschedule button click', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookedEventCard],\n      template: () => <nylas-booked-event-card eventInfo={eventInfo} selectedTimeslot={selectedTimeslot}></nylas-booked-event-card>,\n    });\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    const rescheduleBtn = page?.root?.shadowRoot?.querySelector('.reschedule') as HTMLButtonElement;\n    const spyEvent = jest.fn();\n    page.win.addEventListener('rescheduleButtonClicked', spyEvent);\n    rescheduleBtn.click();\n    await page.waitForChanges();\n    expect(spyEvent).toHaveBeenCalled();\n    const customEvent = spyEvent.mock.calls[0][0];\n    expect(customEvent.detail.bookingId).toBe('123');\n  });\n\n  it('renders with event information', async () => {\n    const page = await newSpecPage({\n      components: [NylasBookedEventCard],\n      template: () => <nylas-booked-event-card eventInfo={eventInfo} selectedTimeslot={selectedTimeslot}></nylas-booked-event-card>,\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n});\n"]}