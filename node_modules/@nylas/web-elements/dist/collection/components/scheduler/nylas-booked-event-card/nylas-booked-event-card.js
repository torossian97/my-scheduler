var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { addMinutesToCurrentTime, debug } from "../../../utils/utils";
import { TIMEZONE_MAP } from "../../../common/constants";
export class NylasBookedEventCard {
    constructor() {
        this.handleCancelBookingButtonClicked = () => {
            const today = new Date();
            const minCancellationNotice = this.configSettings?.scheduler.min_cancellation_notice;
            const dateTillCancellation = addMinutesToCurrentTime(today, minCancellationNotice);
            if (today.getTime() < dateTillCancellation.getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getOrganizer = (eventInfo) => {
            const organizer = eventInfo?.organizer;
            return organizer;
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-booked-event-card] Component did load`);
    }
    render() {
        return (h(Host, { key: '5bd3216b60b7cdb86a44435706fb43b6a898e61c', part: "nbec" }, h("sp-theme", { key: 'f6059be8647e7340db11f12db85596b2493a3032', theme: "spectrum", color: "dark", scale: "medium" }, h("div", { key: '5f6cf3edb7b911c7c2c24d4ce82357298cc10108', class: "booked-event-timezone" }, h("globe-icon", { key: 'b23ca20aa43dc402a2071ed0019ff103f455e769' }), TIMEZONE_MAP[this.selectedTimezone]), h("div", { key: '664f226bd33a6ee1ee938ac76eca60085e822915', class: "event-card-wrapper", part: "nbec__card" }, h("div", { key: '0de5fccaf726cc6a6fb1917249ffcccbaf45190f', class: "calendar-icon" }, h("calendar-check-icon", { key: '94bbe15e7acddbc88916355337170a6753fa70b3' })), h("div", { key: 'f3876bccacb3a99e7c337aff930095884b3e6be3', class: "booked-event-header" }, h("h2", { key: 'da46d3cb4865421827cd7b3f499cae06ca09e365', slot: "card-title", part: "nbec__title" }, "Booking ", !!this.rescheduleBookingId ? 'rescheduled' : 'confirmed', "!"), h("div", { key: '57ed93864ee0cbdbf5755b0fe9a6b2803ca7a869', part: "nbec__description" }, this.getOrganizer(this.eventInfo)?.name || this.getOrganizer(this.eventInfo)?.email, "\u00A0&\u00A0", this.bookingInfo?.primaryParticipant?.name || this.bookingInfo?.primaryParticipant?.email)), h("sp-divider", { key: '4fab8afdbdc7e9a2b55e35779ff087a5497b0c3e' }), h("div", { key: '54ffc748a0da3bd9ae866137b600d0dc1da5eb5e', class: "booking-date-time" }, h("checkmark-circle-icon", { key: '674edd7058565b837a618089c653d20b8b8f08e7' }), h("h3", { key: '51f406b68b2e310e354e79703aea3efd14236d57' }, "Booking date and time"), h("p", { key: '404211c1b06bb80da3eb7274f4a41fba962ce0b9' }, new Date(this.selectedTimeslot?.start_time).toLocaleDateString(undefined, { dateStyle: 'full' }), " ", h("br", { key: '221f96d994e440affff5a347fbb9da5a2566ab29' }), new Date(this.selectedTimeslot?.start_time).toLocaleTimeString(undefined, { timeStyle: 'short' }), " -", ' ', new Date(this.selectedTimeslot?.end_time).toLocaleTimeString(undefined, { timeStyle: 'short' }))), h("div", { key: 'd333515e59086254d2484c5f55ad9b69a21bf0bb', class: "booking-participants" }), h("sp-divider", { key: 'f6ee5cd38d186d943a345f037357419f2af7e3c7' }), h("div", { key: 'c6eb21904c9db747ceb7a2daed88bf86057f4046', class: "footer" }, h("sp-button", { key: 'ee4a439cd71eb0c9c6a1a82be35698a3b027c6c5', variant: "secondary", treatment: "outline", class: "cancel", onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, "Cancel booking"), h("sp-button", { key: '36aa6cc83eb259f21098787e61d36c4a8ca5b3df', variant: "secondary", treatment: "outline", class: "reschedule", onClick: this.handleRescheduleButtonClicked, part: "nbec__button-outline nbec__reschedule-cta" }, "Reschedule"))))));
    }
    static get is() { return "nylas-booked-event-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booked-event-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booked-event-card.css"]
        };
    }
    static get properties() {
        return {
            "eventInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasEvent",
                    "resolved": "{ booking_id: string; organizer: { email: string; name: string; is_organizer?: boolean | undefined; }; title: string; description: string; status: string; }",
                    "references": {
                        "NylasEvent": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::NylasEvent"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The booked event."
                }
            },
            "rescheduleBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Booking flow type."
                },
                "attribute": "reschedule-booking-id",
                "reflect": false
            },
            "bookingInfo": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "NylasSchedulerBookingData",
                    "resolved": "any",
                    "references": {
                        "NylasSchedulerBookingData": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booking info used to book / reschedule the event."
                },
                "attribute": "booking-info",
                "reflect": false
            },
            "selectedTimezone": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timezone."
                },
                "attribute": "selected-timezone",
                "reflect": false,
                "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone"
            },
            "selectedTimeslot": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "{ start_time: Date; end_time: Date; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timeslot."
                }
            },
            "configSettings": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "any",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings for the scheduler."
                },
                "attribute": "config-settings",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "cancelBookingButtonClicked",
                "name": "cancelBookingButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Cancel booking button clicked event."
                },
                "complexType": {
                    "original": "{ bookingId: string }",
                    "resolved": "{ bookingId: string; }",
                    "references": {}
                }
            }, {
                "method": "rescheduleButtonClicked",
                "name": "rescheduleButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Reschedule button clicked event."
                },
                "complexType": {
                    "original": "{ bookingId: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void }",
                    "resolved": "{ bookingId: string; errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "rescheduleBookedEventError",
                "name": "rescheduleBookedEventError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while rescheduling the booking."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelBookedEventValidationError",
                "name": "cancelBookedEventValidationError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while cancelling the booking."
                },
                "complexType": {
                    "original": "{\n    error: {\n      title: string;\n      message: string;\n    };\n  }",
                    "resolved": "{ error: { title: string; message: string; }; }",
                    "references": {}
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
//# sourceMappingURL=nylas-booked-event-card.js.map
