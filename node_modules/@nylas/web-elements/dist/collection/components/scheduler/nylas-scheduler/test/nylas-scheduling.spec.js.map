{"version":3,"file":"nylas-scheduling.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-scheduler/test/nylas-scheduling.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasScheduling } from '../nylas-scheduling';\nimport { h } from '@stencil/core';\n\ndescribe('nylas-scheduling', () => {\n  const REAL_DATE = Date;\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  beforeAll(() => {\n    const originalDate = Date;\n    global.Date = class extends originalDate {\n      constructor(date?: string | number) {\n        super(date ? date : '2022-01-01T00:00:00.000Z');\n      }\n    } as DateConstructor;\n  });\n\n  afterAll(() => {\n    global.Date = REAL_DATE;\n  });\n\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling></nylas-scheduling>`,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('projects custom booking form into slot', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `\n        <nylas-scheduling>\n          <div slot=\"custom-booking-form\">Custom Booking Form</div>\n        </nylas-scheduling>\n      `,\n    });\n\n    const customFormSlot = page?.root?.querySelector('[slot=\"custom-booking-form\"]') as HTMLDivElement;\n    expect(customFormSlot.textContent).toBe('Custom Booking Form');\n  });\n\n  it('listens for NylasSchedulingError event and updates state', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling></nylas-scheduling>`,\n    });\n\n    const mockError = { title: 'Error', description: 'Test Error', type: 'error', category: 'component', ttl: 'none' };\n    const errorEvent = new CustomEvent('NylasSchedulingError', { detail: mockError, bubbles: true });\n    page.win.dispatchEvent(errorEvent);\n    await page.waitForChanges();\n\n    const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');\n    expect(notification).not.toBeNull();\n    const notifRoot = notification?.shadowRoot?.querySelector('.notif');\n    expect(notifRoot).not.toBeNull();\n  });\n\n  it('shows no error when configID is set, and no sessionID is set', async () => {\n    const availability = [\n      {\n        emails: ['xyz@gmail.com'],\n        end_time: new Date(1709303400000),\n        start_time: new Date(1709301600000),\n      },\n    ];\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      template: () => (\n        <nylas-scheduling\n          config-id=\"configid\"\n          defaultSchedulerState={{\n            availability,\n          }}\n        ></nylas-scheduling>\n      ),\n    });\n\n    await page.waitForChanges();\n\n    const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');\n    const notifRoot = notification?.shadowRoot?.querySelector('.notif');\n    expect(notifRoot).toBeUndefined();\n  });\n\n  it('listens for dateSelected event and updates date label', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling></nylas-scheduling>`,\n    });\n\n    const selectedDate = new Date();\n    const dateSelectedEvent = new CustomEvent('dateSelected', { detail: selectedDate, bubbles: true });\n    page.win.dispatchEvent(dateSelectedEvent);\n    await page.waitForChanges();\n\n    const selectedDateLabel = page?.root?.shadowRoot?.querySelector('#selectedDate');\n    expect(selectedDateLabel?.textContent).toBe(selectedDate.toLocaleDateString(undefined, { dateStyle: 'full' }));\n  });\n\n  it('conditionally renders cancel flow based on cancelBookingId prop', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling cancel-booking-id=\"123\"></nylas-scheduling>`,\n    });\n\n    await page.waitForChanges();\n    const cancelFlowPage = page?.root?.shadowRoot?.querySelector('.cancel-flow-page');\n    expect(cancelFlowPage).not.toBeNull();\n  });\n\n  it('renders composable UI when mode is set to composable', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling mode=\"composable\">\n      <nylas-if-state state=\"scheduler.eventInfo\" is-state-set=\"false\">\n      <div class=\"flex\">\n        <div class=\"flex flex-col gap-4 px-6 pt-4 h-[514px] w-[433px] border-slate-200 dark:border-slate-700 border-r\">\n          <nylas-if-state state=\"scheduler.showBookingForm\" is-boolean=\"false\">\n            <nylas-date-picker></nylas-date-picker>\n            <div class=\"border-slate-200 dark:border-slate-700 border-t -mx-6 h-px\"></div>\n            <nylas-locale-switch></nylas-locale-switch>\n          </nylas-if-state>\n          <nylas-if-state state=\"scheduler.showBookingForm\" is-boolean=\"true\">\n            <div class=\"flex flex-col justify-center h-[496px]\">\n              <nylas-selected-event-card></nylas-selected-event-card>\n            </div>\n          </nylas-if-state>\n        </div>\n        <div class=\"flex flex-col items-center min-w-[360px] overflow-hidden bg-slate-50 dark:bg-slate-700\">\n          <nylas-if-state state=\"scheduler.showBookingForm\" is-boolean=\"false\" class=\"w-full\">\n            <div class=\"flex flex-col justify-start w-full\">\n              <nylas-if-state state=\"scheduler.selectableDates\" is-state-set=\"true\">\n                <h2 class=\"flex items-center justify-center text-lg font-semibold w-full text-center gap-1 mb-4 mt-6 text-slate-700 dark:text-white\">\n                  <calendar-icon></calendar-icon>\n                  <nylas-if-state state=\"scheduler.selectedDate\" is-state-set=\"false\">\n                    <span>No date selected</span>\n                  </nylas-if-state>\n                  <nylas-if-state state=\"scheduler.selectedDate\" is-state-set=\"true\">\n                    <span id=\"selectedDate\"></span>\n                  </nylas-if-state>\n                </h2>\n              </nylas-if-state>\n              <nylas-timeslot-picker></nylas-timeslot-picker>\n            </div>\n          </nylas-if-state>\n          <nylas-if-state state=\"scheduler.showBookingForm\" is-boolean=\"true\" class=\"w-full\">\n            <div class=\"flex flex-col justify-center h-[496px]\">\n              <nylas-booking-form></nylas-booking-form>\n            </div>\n          </nylas-if-state>\n        </div>\n      </div>\n    </nylas-if-state>\n      </nylas-scheduling>`,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('exposes getNylasSchedulingStore method and returns store', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling session-id=\"sessionid\"></nylas-scheduling>`,\n    });\n    const scheduler = page.rootInstance as NylasScheduling;\n\n    const store = await scheduler.getNylasSchedulerStore();\n    expect(store).toBeDefined();\n  });\n\n  it('exposes getNylasSchedulingConnector method and returns connector', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling session-id=\"sessionid\"></nylas-scheduling>`,\n    });\n    const scheduler = page.rootInstance as NylasScheduling;\n\n    const connector = await scheduler.getNylasSchedulerConnector();\n    expect(connector).toBeDefined();\n  });\n\n  it('should render the reschedule flow when rescheduleBookingId is set', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      html: `<nylas-scheduling reschedule-booking-id=\"123\"></nylas-scheduling>`,\n    });\n\n    await page.waitForChanges();\n\n    const messageBanner = page?.root?.shadowRoot?.querySelector('.message-banner');\n    expect(messageBanner).not.toBeNull();\n  });\n\n  it('hides the nylas logo in the footer if nylasBranding is set', async () => {\n    const page = await newSpecPage({\n      components: [NylasScheduling],\n      template: () => <nylas-scheduling config-id=\"configid\" nylasBranding={false}></nylas-scheduling>,\n    });\n\n    await page.waitForChanges();\n\n    const footer = page?.root?.shadowRoot?.querySelector('.footer');\n    expect(footer?.textContent).not.toContain('Powered by Nylas');\n  });\n});\n"]}