import { newSpecPage } from "@stencil/core/testing";
import { NylasScheduling } from "../nylas-scheduling";
import { h } from "@stencil/core";
describe('nylas-scheduling', () => {
    const REAL_DATE = Date;
    beforeEach(() => {
        jest.clearAllMocks();
    });
    beforeAll(() => {
        const originalDate = Date;
        global.Date = class extends originalDate {
            constructor(date) {
                super(date ? date : '2022-01-01T00:00:00.000Z');
            }
        };
    });
    afterAll(() => {
        global.Date = REAL_DATE;
    });
    it('renders', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('projects custom booking form into slot', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `
        <nylas-scheduling>
          <div slot="custom-booking-form">Custom Booking Form</div>
        </nylas-scheduling>
      `,
        });
        const customFormSlot = page?.root?.querySelector('[slot="custom-booking-form"]');
        expect(customFormSlot.textContent).toBe('Custom Booking Form');
    });
    it('listens for NylasSchedulingError event and updates state', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        const mockError = { title: 'Error', description: 'Test Error', type: 'error', category: 'component', ttl: 'none' };
        const errorEvent = new CustomEvent('NylasSchedulingError', { detail: mockError, bubbles: true });
        page.win.dispatchEvent(errorEvent);
        await page.waitForChanges();
        const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');
        expect(notification).not.toBeNull();
        const notifRoot = notification?.shadowRoot?.querySelector('.notif');
        expect(notifRoot).not.toBeNull();
    });
    it('shows no error when configID is set, and no sessionID is set', async () => {
        const availability = [
            {
                emails: ['xyz@gmail.com'],
                end_time: new Date(1709303400000),
                start_time: new Date(1709301600000),
            },
        ];
        const page = await newSpecPage({
            components: [NylasScheduling],
            template: () => (h("nylas-scheduling", { "config-id": "configid", defaultSchedulerState: {
                    availability,
                } })),
        });
        await page.waitForChanges();
        const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');
        const notifRoot = notification?.shadowRoot?.querySelector('.notif');
        expect(notifRoot).toBeUndefined();
    });
    it('listens for dateSelected event and updates date label', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        const selectedDate = new Date();
        const dateSelectedEvent = new CustomEvent('dateSelected', { detail: selectedDate, bubbles: true });
        page.win.dispatchEvent(dateSelectedEvent);
        await page.waitForChanges();
        const selectedDateLabel = page?.root?.shadowRoot?.querySelector('#selectedDate');
        expect(selectedDateLabel?.textContent).toBe(selectedDate.toLocaleDateString(undefined, { dateStyle: 'full' }));
    });
    it('conditionally renders cancel flow based on cancelBookingId prop', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling cancel-booking-id="123"></nylas-scheduling>`,
        });
        await page.waitForChanges();
        const cancelFlowPage = page?.root?.shadowRoot?.querySelector('.cancel-flow-page');
        expect(cancelFlowPage).not.toBeNull();
    });
    it('renders composable UI when mode is set to composable', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling mode="composable">
      <nylas-if-state state="scheduler.eventInfo" is-state-set="false">
      <div class="flex">
        <div class="flex flex-col gap-4 px-6 pt-4 h-[514px] w-[433px] border-slate-200 dark:border-slate-700 border-r">
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="false">
            <nylas-date-picker></nylas-date-picker>
            <div class="border-slate-200 dark:border-slate-700 border-t -mx-6 h-px"></div>
            <nylas-locale-switch></nylas-locale-switch>
          </nylas-if-state>
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="true">
            <div class="flex flex-col justify-center h-[496px]">
              <nylas-selected-event-card></nylas-selected-event-card>
            </div>
          </nylas-if-state>
        </div>
        <div class="flex flex-col items-center min-w-[360px] overflow-hidden bg-slate-50 dark:bg-slate-700">
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="false" class="w-full">
            <div class="flex flex-col justify-start w-full">
              <nylas-if-state state="scheduler.selectableDates" is-state-set="true">
                <h2 class="flex items-center justify-center text-lg font-semibold w-full text-center gap-1 mb-4 mt-6 text-slate-700 dark:text-white">
                  <calendar-icon></calendar-icon>
                  <nylas-if-state state="scheduler.selectedDate" is-state-set="false">
                    <span>No date selected</span>
                  </nylas-if-state>
                  <nylas-if-state state="scheduler.selectedDate" is-state-set="true">
                    <span id="selectedDate"></span>
                  </nylas-if-state>
                </h2>
              </nylas-if-state>
              <nylas-timeslot-picker></nylas-timeslot-picker>
            </div>
          </nylas-if-state>
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="true" class="w-full">
            <div class="flex flex-col justify-center h-[496px]">
              <nylas-booking-form></nylas-booking-form>
            </div>
          </nylas-if-state>
        </div>
      </div>
    </nylas-if-state>
      </nylas-scheduling>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('exposes getNylasSchedulingStore method and returns store', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling session-id="sessionid"></nylas-scheduling>`,
        });
        const scheduler = page.rootInstance;
        const store = await scheduler.getNylasSchedulerStore();
        expect(store).toBeDefined();
    });
    it('exposes getNylasSchedulingConnector method and returns connector', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling session-id="sessionid"></nylas-scheduling>`,
        });
        const scheduler = page.rootInstance;
        const connector = await scheduler.getNylasSchedulerConnector();
        expect(connector).toBeDefined();
    });
    it('should render the reschedule flow when rescheduleBookingId is set', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling reschedule-booking-id="123"></nylas-scheduling>`,
        });
        await page.waitForChanges();
        const messageBanner = page?.root?.shadowRoot?.querySelector('.message-banner');
        expect(messageBanner).not.toBeNull();
    });
    it('hides the nylas logo in the footer if nylasBranding is set', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            template: () => h("nylas-scheduling", { "config-id": "configid", nylasBranding: false }),
        });
        await page.waitForChanges();
        const footer = page?.root?.shadowRoot?.querySelector('.footer');
        expect(footer?.textContent).not.toContain('Powered by Nylas');
    });
});
//# sourceMappingURL=nylas-scheduling.spec.js.map
