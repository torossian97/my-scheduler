import { newSpecPage } from "@stencil/core/testing";
import { NylasCancelBookingForm } from "../nylas-cancel-booking-form";
describe('nylas-cancel-booking-form', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders correctly with initial state', async () => {
        const page = await newSpecPage({
            components: [NylasCancelBookingForm],
            html: `<nylas-cancel-booking-form></nylas-cancel-booking-form>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('emits goBackButtonClicked event on "Go back" button click', async () => {
        const page = await newSpecPage({
            components: [NylasCancelBookingForm],
            html: `<nylas-cancel-booking-form></nylas-cancel-booking-form>`,
        });
        const spyEvent = jest.fn();
        page.win.addEventListener('goBackButtonClicked', spyEvent);
        const backButton = page?.root?.shadowRoot?.querySelector('.back');
        backButton.click();
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('emits cancelBookingFormSubmitted event with details on form submission', async () => {
        const page = await newSpecPage({
            components: [NylasCancelBookingForm],
            html: `<nylas-cancel-booking-form cancel-booking-id="123"></nylas-cancel-booking-form>`,
        });
        page.rootInstance.cancellationReason = 'Changed my mind';
        await page.waitForChanges();
        const spyEvent = jest.fn();
        page.win.addEventListener('cancelBookingFormSubmitted', spyEvent);
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalledWith(expect.objectContaining({
            detail: {
                bookingId: '123',
                reason: 'Changed my mind',
                errorHandler: expect.any(Function),
            },
        }));
    });
    it('displays error and emits cancelBookingFormError when cancellation reason is not provided', async () => {
        const page = await newSpecPage({
            components: [NylasCancelBookingForm],
            html: `<nylas-cancel-booking-form></nylas-cancel-booking-form>`,
        });
        const spyEvent = jest.fn();
        page.win.addEventListener('cancelBookingFormError', spyEvent);
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        expect(page.rootInstance.cancellationError).toBe('Please provide a reason for cancellation.');
        expect(spyEvent).toHaveBeenCalled();
    });
});
//# sourceMappingURL=nylas-cancel-booking-form.spec.js.map
