var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { debug } from "../../../utils/utils";
export class NylasCancelBookingForm {
    constructor() {
        this.handleGoBackClicked = () => {
            this.goBackButtonClicked.emit();
        };
        this.handleSubmitCancelBooking = (event) => {
            event.preventDefault();
            if (!this.cancellationReason) {
                this.cancellationError = 'Please provide a reason for cancellation.';
                this.cancelBookingFormError.emit({ title: 'Cancel booking form error', description: 'Please provide a reason for cancellation.' });
                return;
            }
            debug(`[nylas-cancel-booking-form] Cancel booking form submitted with reason: ${this.cancellationReason}`);
            const errorHandler = (error) => {
                this.cancelBookedEventError.emit(error);
            };
            this.cancelBookingFormSubmitted.emit({ bookingId: this.cancelBookingId, reason: this.cancellationReason, errorHandler });
        };
        this.handleOnChangeCancellationReason = (event) => {
            this.cancellationError = '';
            this.cancellationReason = event.target.value;
        };
        this.cancelBookingId = undefined;
        this.cancellationReason = '';
        this.cancellationError = '';
    }
    connectedCallback() {
        debug(`[nylas-cancel-booking-form] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancel-booking-form] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancel-booking-form] Component did load`);
    }
    disconnectedCallback() {
        debug(`[nylas-cancel-booking-form] Component disconnected`);
    }
    render() {
        return (h(Host, { key: '98dc29d53d8a05beb16dea271cab5c574df4dfd0', part: "ncec" }, h("sp-theme", { key: '04feb774090fb57270a3d3c05576687ec78c230d', theme: "spectrum", scale: "medium" }, h("div", { key: '024a947c805b9f2ab6204a8548e9c775078fa969', class: "nylas-cancel-booking-form", part: "ncec__card" }, h("div", { key: '93295919797719199fbbe6eccdef4e42045c330d', class: "nylas-cancel-booking-form__calendar-icon", part: "ncec__icon" }, h("calendar-cancel-icon", { key: 'b8da092aa626ebdef64dd3f2f54ca2df5082d1f3' })), h("h3", { key: '8e33cc23c5bc26aa8e5c979814fa5a398c798237', class: "nylas-cancel-booking-form__title", part: "ncec__title" }, "Cancel booking?"), h("div", { key: '2c8cd37241e6cfe38bb012be4d700ae03c33876e', class: "nylas-cancel-booking-form__description", part: "ncec__description" }, "Your current timeslot will become available to others."), h("form", { key: 'be720382bd84086cd8a25279dd4ec58dbfc113e6', onSubmit: this.handleSubmitCancelBooking }, h("sp-field-label", { key: 'fadd2793a898975b8ba8da0549bcbb37879a68bf', for: "cancel-reason", class: this.cancellationError ? 'error' : '' }, "Reason for cancellation ", h("span", { key: '0748781625ea7ec8332b4ca20eae8986ad9e8efb', class: "required" }, "*")), h("sp-textfield", { key: 'e8daf40a5c26b1e6b9b59ab42bbe613da72c987a', id: "cancel-reason", class: this.cancellationError ? 'error' : '', part: "ncec__reason-textarea", multiline: true, value: this.cancellationReason, onInput: this.handleOnChangeCancellationReason, onFocus: this.handleOnChangeCancellationReason, invalid: !!this.cancellationError }, h("sp-help-text", { key: 'f876e2f41098845a235fe2b563e85891843d5351', slot: "negative-help-text" }, this.cancellationError)), h("sp-button", { key: 'a05211715fda7fa75935c974bd20ce6c6ef4206a', variant: "primary", class: "cancel", type: "submit", part: "ncec__button-cta" }, "Cancel booking"), h("sp-button", { key: '3dd7832e698181eaca4df52835d64c09b664f5f9', variant: "secondary", class: "back", treatment: "outline", part: "ncec__button-outline", onClick: this.handleGoBackClicked }, "Go back"))))));
    }
    static get is() { return "nylas-cancel-booking-form"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-cancel-booking-form.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-cancel-booking-form.css"]
        };
    }
    static get properties() {
        return {
            "cancelBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The booking ID to cancel."
                },
                "attribute": "cancel-booking-id",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "cancellationReason": {},
            "cancellationError": {}
        };
    }
    static get events() {
        return [{
                "method": "goBackButtonClicked",
                "name": "goBackButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the Go back button is clicked on the cancel booking form."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "cancelBookingFormSubmitted",
                "name": "cancelBookingFormSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the cancel booking form is submitted."
                },
                "complexType": {
                    "original": "{ bookingId: string; reason: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void }",
                    "resolved": "{ bookingId: string; reason: string; errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelBookedEventError",
                "name": "cancelBookedEventError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while cancelling the booking."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelBookingFormError",
                "name": "cancelBookingFormError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs in the booking form."
                },
                "complexType": {
                    "original": "Partial<Notification>",
                    "resolved": "{ id?: string | undefined; type?: NotificationType | undefined; title?: string | undefined; code?: number | undefined; category?: string | undefined; description?: string | undefined; ttl?: number | \"none\" | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "Notification": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Notification"
                        }
                    }
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-cancel-booking-form',
        eventToProps: {
            cancelBookingFormSubmitted: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.cancelBooking(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancelBookingForm.prototype, "render", null);
//# sourceMappingURL=nylas-cancel-booking-form.js.map
