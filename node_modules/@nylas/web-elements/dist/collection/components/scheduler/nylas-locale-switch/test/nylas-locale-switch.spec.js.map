{"version":3,"file":"nylas-locale-switch.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-locale-switch/test/nylas-locale-switch.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasLocaleSwitch } from '../nylas-locale-switch';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\n\ndescribe('nylas-locale-switch', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders with default selected language and timezone', async () => {\n    const page = await newSpecPage({\n      components: [NylasLocaleSwitch, SelectDropdown],\n      html: `<nylas-locale-switch selected-language=\"English\" selected-timezone=\"America / New York\"></nylas-locale-switch>`,\n    });\n\n    expect(page.root).toMatchSnapshot();\n    expect(page.rootInstance.selectedLanguage).toBe('English');\n    expect(page.rootInstance.selectedTimezone).toBe('America / New York');\n  });\n\n  it('selects timezone', async () => {\n    const page = await newSpecPage({\n      components: [NylasLocaleSwitch, SelectDropdown],\n      html: `<nylas-locale-switch selected-timezone=\"America / New York\"></nylas-locale-switch>`,\n    });\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('timezoneChanged', spyEvent);\n\n    await page.waitForChanges();\n\n    const timezoneSelectDropdown = page?.root?.shadowRoot?.querySelector('.timezone select-dropdown') as HTMLSelectDropdownElement;\n    const timezoneDropdownShadowRoot = timezoneSelectDropdown.shadowRoot;\n    timezoneDropdownShadowRoot?.querySelector('button')?.click(); // Open the dropdown\n    await page.waitForChanges();\n\n    const option = timezoneDropdownShadowRoot?.querySelector('li'); // Select the first option\n\n    // Simulate a click event on the first option\n    option?.click();\n    await page.waitForChanges();\n\n    expect(option?.textContent).toContain(timezoneDropdownShadowRoot?.querySelector('button')?.textContent);\n  });\n\n  it('selects language', async () => {\n    const page = await newSpecPage({\n      components: [NylasLocaleSwitch, SelectDropdown],\n      html: `<nylas-locale-switch></nylas-locale-switch>`,\n    });\n\n    const spyEvent = jest.fn();\n    page.win.addEventListener('languageChanged', spyEvent);\n\n    await page.waitForChanges();\n\n    const langSelectDropdown = page?.root?.shadowRoot?.querySelector('.language select-dropdown') as HTMLSelectDropdownElement;\n    const langSelectDropdownShadowRoot = langSelectDropdown.shadowRoot;\n    langSelectDropdownShadowRoot?.querySelector('button')?.click(); // Open the dropdown\n    await page.waitForChanges();\n\n    const option = langSelectDropdownShadowRoot?.querySelector('li'); // Select the first option\n\n    // Simulate a click event on the first option\n    option?.click();\n    await page.waitForChanges();\n\n    expect(langSelectDropdownShadowRoot?.querySelector('button')?.textContent).toEqual(option?.innerHTML);\n  });\n});\n"]}