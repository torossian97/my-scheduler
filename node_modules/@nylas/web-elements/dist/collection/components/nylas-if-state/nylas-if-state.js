var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../common/register-component";
import { debug } from "../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasIfState {
    constructor() {
        this.state = undefined;
        this.isStateSet = undefined;
        this.isBoolean = undefined;
        this.getStore = undefined;
        this.transition = 'none';
        this.show = false;
        this.classes = {};
        this.initTransition = this.initTransition.bind(this);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-if-state] Component will load`);
        this.watchStore(true);
    }
    async componentDidLoad() {
        debug(`[nylas-if-state] Component did load`);
    }
    shouldRender() {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return false;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return false;
        }
        const state = store.state[stateName];
        if (typeof this.isStateSet === 'boolean') {
            return ((this.isStateSet === false && (typeof state === 'undefined' || state === null || state.length === 0)) ||
                (this.isStateSet === true && typeof state !== 'undefined' && state !== null));
        }
        if (typeof this.isBoolean === 'boolean') {
            return (this.isBoolean === true && typeof state !== 'undefined' && state === true) || (this.isBoolean === false && typeof state !== 'undefined' && state === false);
        }
        return false;
    }
    onGetStoreChange() {
        this.watchStore(true);
    }
    watchStore(immediate = false) {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return null;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return null;
        }
        if (immediate === true) {
            this.initTransition();
        }
        store.onChange(stateName, this.initTransition);
    }
    initTransition() {
        const show = this.shouldRender();
        switch (this.transition) {
            case 'fade':
            case 'slide':
            case 'swipe':
                this.classes = {
                    [`${this.transition}-in`]: show,
                    [`${this.transition}-out`]: !show,
                };
                setTimeout(() => {
                    this.show = show;
                }, 150);
                break;
            default:
                this.show = this.shouldRender();
                break;
        }
    }
    render() {
        return (h(Host, { key: '74d76de08a4f4ccaff6231843d16b8b574a7ac04' }, h("div", { key: '30531d15d2085f779c70e0c17d072f730feb3799', class: this.classes }, this.show && h("slot", null))));
    }
    static get is() { return "nylas-if-state"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-if-state.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-if-state.css"]
        };
    }
    static get properties() {
        return {
            "state": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The name of the state to watch."
                },
                "attribute": "state",
                "reflect": false
            },
            "isStateSet": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If true, then the component will render if the state is set (empty or not set).\nThis prop is used with the `state` prop."
                },
                "attribute": "is-state-set",
                "reflect": false
            },
            "isBoolean": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If true, then the component will render if the state is true.\nThis prop is used with the `state` prop."
                },
                "attribute": "is-boolean",
                "reflect": false
            },
            "getStore": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "<K extends keyof Stores>(name: K) => Stores[K]",
                    "resolved": "(<K extends string>(name: K) => ObservableMap<any>) | undefined",
                    "references": {
                        "Stores": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/nylas-if-state/nylas-if-state.tsx",
                            "id": "src/components/nylas-if-state/nylas-if-state.tsx::Stores"
                        },
                        "K": {
                            "location": "global",
                            "id": "global::K"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "transition": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Transitions",
                    "resolved": "\"fade\" | \"none\" | \"slide\" | \"swipe\"",
                    "references": {
                        "Transitions": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/nylas-if-state/nylas-if-state.tsx",
                            "id": "src/components/nylas-if-state/nylas-if-state.tsx::Transitions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "transition",
                "reflect": false,
                "defaultValue": "'none'"
            }
        };
    }
    static get states() {
        return {
            "show": {},
            "classes": {}
        };
    }
    static get watchers() {
        return [{
                "propName": "getStore",
                "methodName": "onGetStoreChange"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-if-state',
        getStoresToProp: 'getStore',
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasIfState.prototype, "render", null);
//# sourceMappingURL=nylas-if-state.js.map
