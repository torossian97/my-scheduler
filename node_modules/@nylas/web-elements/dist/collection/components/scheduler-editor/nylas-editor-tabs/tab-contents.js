import { h } from "@stencil/core";
export default function TabContents({ id, formState, activeTab, calendars }) {
    switch (activeTab) {
        case 'eventInfo':
            const eventTitle = formState.title;
            const eventDescription = formState.description;
            const eventDuration = parseInt(formState.duration);
            const location = formState.location;
            return (h("div", { key: id }, h("nylas-event-info", null, h("div", { slot: "inputs" }, h("nylas-event-title", { name: "title", eventTitle: eventTitle, exportparts: "net, net__title, net__dropdown-content" }), h("nylas-event-duration", { name: "duration", eventDurationMinutes: eventDuration, exportparts: "ned, ned__input, ned__dropdown, ned__dropdown-button, ned__dropdown-content" }), h("nylas-location-component", { name: "location", eventLocation: location, exportparts: "nel, nel__location, nel__dropdown, nel__dropdown-button, nel__dropdown-content" }), h("nylas-event-description", { name: "description", eventDescription: eventDescription, exportparts: "nedesc, nedesc__textarea" })))));
        case 'availability':
            const openHours = formState.availability.openHours;
            const timezone = formState.availability.timezone ? formState.availability.timezone : Intl.DateTimeFormat().resolvedOptions().timeZone;
            const organizer = formState.participants?.find(p => p.is_organizer);
            const organizerEmail = organizer?.email ?? 'primary';
            const selectedCalendars = formState.calendarIds.length > 0 ? formState.calendarIds : [organizerEmail];
            const bookingCalendar = formState.bookingCalendar == 'primary' ? organizerEmail : formState.bookingCalendar;
            return (h("div", { key: id }, h("nylas-booking-calendar-picker", { name: "booking-calendar", calendars: calendars ?? [], defaultBookingCalendar: bookingCalendar, exportparts: 'nbcp, nbcp__header, nbcp__input-label, nbcp__dropdown, nbcp__dropdown-button, nbcp__dropdown-content' }), h("nylas-calendar-picker", { name: "calendars", calendars: calendars ?? [], defaultSelectedCalendars: selectedCalendars, exportparts: 'ncp ncp__header, ncp__dropdown, ncp__dropdown-button, ncp__dropdown-content' }), h("nylas-availability-picker", { name: "availability", openHours: openHours, defaultTimezone: timezone, exportparts: 'nap__header, nap__select-timezone, nap__select-timezone-button, nap__select-timezone-dropdown-content, nap__availability, nap__day, nap__time-ranges, nap__time-range, nap__add-time-range, nap__time-picker-container, nap__time-picker-input, nap__time-picker-times' })));
        case 'bookingOptions':
            return (h("div", { key: id }, h("nylas-buffer-time", { name: "buffer-time", buffer: formState.buffer, exportparts: 'nbt, nbt__header, nbt__body, nbt__dropdown-before, nbt__dropdown-button-before, nbt__dropdown-content-before, nbt__dropdown-after, nbt__dropdown-button-after, nbt__dropdown-content-after, nbt__preview' }), h("nylas-event-limits", null, h("div", { slot: "inputs" }, h("nylas-limit-future-bookings", { name: "limit-future-bookings", availableDaysInFuture: formState.availableDaysInFuture, exportparts: "nlfb, nlfb__number-dropdown, nlfb__number-dropdown-button, nlfb__number-dropdown-content, nlfb__period-dropdown, nlfb__period-dropdown-button, nlfb__period-dropdown-content" }), h("nylas-min-cancellation-notice", { name: "min-cancellation-notice", minCancellationNotice: formState.minCancellationNotice, exportparts: "nmcn, nmcn__number-dropdown, nmcn__number-dropdown-button, nmcn__number-dropdown-content, nmcn__period-dropdown, nmcn__period-dropdown-button, nmcn__period-dropdown-content" })))));
    }
}
//# sourceMappingURL=tab-contents.js.map
