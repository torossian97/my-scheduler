var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, mergeDeep, parsePreviewLink } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import TabContents from "./tab-contents";
import { DEFAULT_OPEN_HOURS } from "../../../common/constants";
export class NylasEditorTabs {
    constructor() {
        this.setError = (error) => {
            this.error = error.message;
        };
        this.formSubmissionHandler = async (event) => {
            event.preventDefault();
            this.formSubmitted.emit();
            const valid = this.formRef.checkValidity();
            if (!valid) {
                return;
            }
            this.isLoading = true;
            this.hasUnsavedChanges = false;
            const formState = this.updateFormState();
            const { title, description, duration, availability, calendarIds, bookingCalendar, location, bookingType, buffer, availableDaysInFuture, minCancellationNotice } = formState;
            const organizer = this.selectedConfiguration?.participants?.find(p => p.is_organizer);
            const configObject = {
                ...(this.selectedConfiguration?.id && { id: this.selectedConfiguration.id }),
                version: this.selectedConfiguration?.version ?? '1.0.0',
                availability: {
                    duration_minutes: duration ? parseInt(duration) : 0,
                    interval_minutes: duration ? parseInt(duration) : 0,
                    availability_rules: {
                        availability_method: this.selectedConfiguration?.availability?.availability_rules?.availability_method ?? 'collective',
                        buffer: buffer || { before: 0, after: 0 },
                        default_open_hours: this.selectedConfiguration?.availability?.availability_rules?.default_open_hours ?? DEFAULT_OPEN_HOURS,
                        round_robin_group_id: this.selectedConfiguration?.availability?.availability_rules?.round_robin_group_id ?? '',
                    },
                },
                participants: [
                    {
                        name: organizer?.name ?? organizer?.email ?? this.currentUser?.name ?? this.currentUser?.email ?? '',
                        email: organizer?.email ?? this.currentUser?.email ?? '',
                        is_organizer: true,
                        availability: {
                            calendar_ids: calendarIds?.length ? calendarIds : ['primary'],
                            open_hours: availability?.openHours ?? [],
                        },
                        booking: {
                            calendar_id: bookingCalendar && bookingCalendar !== '' ? bookingCalendar : 'primary',
                        },
                    },
                ],
                event_booking: {
                    title: title?.toString() ?? '',
                    description: description?.toString() ?? '',
                    location: location?.toString() ?? '',
                    booking_type: bookingType?.toString() ?? 'booking',
                    timezone: availability?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                },
                scheduler: {
                    available_days_in_future: availableDaysInFuture ?? 30,
                    min_cancellation_notice: minCancellationNotice ?? 0,
                },
            };
            const configObjectWithDeveloperSettings = mergeDeep(configObject, this.selectedConfiguration);
            configObjectWithDeveloperSettings.requires_session_auth = this.defaultRequiresSessionAuth;
            const finalConfig = this.action === 'create' ? configObjectWithDeveloperSettings : configObject;
            const resetLoadingState = (_e) => {
                this.isLoading = false;
                this.changesSaved = true;
                setTimeout(() => {
                    this.changesSaved = false;
                }, 5000);
            };
            this.schedulerConfigChanged.emit({ config: finalConfig, resetLoadingState, setError: this.setError, action: this.action });
        };
        this.calendars = undefined;
        this.selectedConfiguration = undefined;
        this.defaultRequiresSessionAuth = true;
        this.currentUser = undefined;
        this.schedulerPreviewLink = '';
        this.mode = 'app';
        this.action = 'create';
        this.activeTab = 'eventInfo';
        this.isLoading = false;
        this.hasUnsavedChanges = false;
        this.changesSaved = false;
        this.formState = {};
        this.error = '';
    }
    configChangedHandler(newConfig) {
        debug('[nylas-editor-tabs]', 'configChangedHandler', newConfig, this.selectedConfiguration);
        this.formState = {
            ...this.getFormStateFromConfig(newConfig),
        };
        if (newConfig.id) {
            this.action = 'edit';
        }
        else {
            this.action = 'create';
        }
    }
    connectedCallback() {
        debug('[nylas-editor-tabs]', 'connectedCallback');
    }
    componentWillLoad() {
        debug('[nylas-editor-tabs]', 'componentWillLoad');
        this.formState = this.getFormStateFromConfig(this.selectedConfiguration);
    }
    componentDidLoad() {
        debug('[nylas-editor-tabs]', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('[nylas-editor-tabs]', 'disconnectedCallback');
    }
    handleValueChanged(event) {
        debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        this.formState = { ...this.formState, [name]: value };
        this.hasUnsavedChanges = true;
        this.error = '';
    }
    getFormStateFromConfig(config) {
        const organizerParticipant = config?.participants?.find(p => p.is_organizer);
        return {
            title: config?.event_booking?.title ?? '',
            description: config?.event_booking?.description ?? '',
            duration: config?.availability?.duration_minutes?.toString() ?? '10',
            availability: {
                timezone: config?.event_booking?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                open_hours: organizerParticipant?.availability?.open_hours ?? undefined,
            },
            calendarIds: organizerParticipant?.availability?.calendar_ids ?? [],
            participants: config?.participants ?? [],
            bookingCalendar: organizerParticipant?.booking?.calendar_id ?? organizerParticipant?.email ?? '',
            location: this.selectedConfiguration?.event_booking?.location ?? '',
            bookingType: this.selectedConfiguration?.event_booking?.booking_type ?? 'booking',
            buffer: this.selectedConfiguration?.availability?.availability_rules?.buffer ?? { before: 0, after: 0 },
            availableDaysInFuture: this.selectedConfiguration?.scheduler?.available_days_in_future ?? 30,
            minCancellationNotice: this.selectedConfiguration?.scheduler?.min_cancellation_notice ?? 0,
        };
    }
    updateFormState() {
        const formData = new FormData(this.formRef);
        formData.forEach((value, key) => {
            switch (key) {
                case 'title':
                    this.formState.title = value.toString();
                    break;
                case 'description':
                    this.formState.description = value.toString();
                    break;
                case 'duration':
                    this.formState.duration = value.toString();
                    break;
                case 'availability':
                    this.formState.availability = JSON.parse(value.toString());
                    break;
                case 'participants':
                    this.formState.participants = JSON.parse(value.toString());
                    break;
                case 'calendars':
                    this.formState.calendarIds = value.toString().split(',');
                    break;
                case 'booking-calendar':
                    this.formState.bookingCalendar = value.toString();
                    break;
                case 'location':
                    this.formState.location = value.toString();
                    break;
                case 'booking-type':
                    this.formState.bookingType = value.toString();
                    break;
                case 'buffer-time':
                    this.formState.buffer = JSON.parse(value.toString());
                    break;
                case 'limit-future-bookings':
                    this.formState.availableDaysInFuture = parseInt(value.toString());
                    break;
                case 'min-cancellation-notice':
                    this.formState.minCancellationNotice = parseInt(value.toString());
                    break;
            }
        });
        this.formState = { ...this.formState };
        return this.formState;
    }
    setActiveTab(e, tabName) {
        e.preventDefault();
        this.updateFormState();
        this.activeTab = tabName;
    }
    render() {
        debug('[nylas-editor-tabs]', 'render', this.formState);
        return (h(Host, { key: 'd8076c91e22be275e321ab8e38090e5da2512234' }, h("form", { key: '8609296809c107d53d49ab570f97608815a3a29c', onSubmit: this.formSubmissionHandler, class: "scheduler-editor", ref: el => (this.formRef = el), noValidate: true }, this.mode === 'app' ? (h("div", { class: "form-contents" }, h("div", { class: "tabs" }, h("button", { class: { tab: true, active: this.activeTab == 'eventInfo' }, onClick: e => this.setActiveTab(e, 'eventInfo') }, h("calendar-info-icon", { width: "16", height: "16" }), "Event Info"), h("button", { class: { tab: true, active: this.activeTab == 'availability' }, onClick: e => this.setActiveTab(e, 'availability') }, h("calendar-patterns-icon", { width: "16", height: "16" }), "Availability"), h("button", { class: { tab: true, active: this.activeTab == 'bookingOptions' }, onClick: e => this.setActiveTab(e, 'bookingOptions') }, h("flow-icon", { width: "16", height: "16" }), "Booking Options")), h("div", { class: "tab-content" }, h(TabContents, { formState: this.formState, activeTab: this.activeTab, calendars: this.calendars, id: this.selectedConfiguration?.id ?? 'new' })))) : (h("slot", null)), h("div", { key: 'dc4bcd5a80351f3ec5c932759c1e58ee664e7351', class: "footer" }, h("div", { key: '50592e0c5e63b0fa70c6d74e843be3cdea38d9af', class: "preview" }, this.schedulerPreviewLink !== '' && this.action === 'edit' && (h("button-component", { type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                const previewEvent = this.previewButtonClicked.emit(this.host);
                if (!previewEvent.defaultPrevented) {
                    window.open(parsePreviewLink(this.schedulerPreviewLink, this.selectedConfiguration), '_blank');
                }
            }, variant: 'basic' }, "Preview"))), h("div", { key: '0869ee9cddd4a4ec51f1197eea202a38391066e9', class: "buttons" }, h("p", { key: '934b5c8cbf221385e6b8bfc1124efd71968f240e', class: {
                'unsaved-changes': this.hasUnsavedChanges && !this.changesSaved,
                'saved-changes': this.changesSaved,
                'error': this.error !== '',
                'error-full-width': this.error !== '' && this.action === 'create',
            } }, this.error !== '' ? this.error : '', this.error == '' && this.hasUnsavedChanges && !this.changesSaved ? 'Unsaved changes' : this.error == '' && this.changesSaved ? 'Changes saved!' : ''), h("button-component", { key: 'ed6a26fd73158a4de86d206440c308d88674416e', type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                this.cancelButtonClick.emit();
                this.error = '';
            }, variant: 'basic' }, "Cancel"), h("button-component", { key: '98e6d0890027a9ba67fd13746beb0615e7511519', type: "submit", disabled: this.isLoading }, this.isLoading ? (h("span", null, "Saving", h("loading-icon", null), ' ')) : this.action == 'create' ? ('Create') : ('Save changes')))))));
    }
    static get is() { return "nylas-editor-tabs"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-editor-tabs.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-editor-tabs.css"]
        };
    }
    static get properties() {
        return {
            "calendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The list of calendars to use in the editor when configuring availability."
                }
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected configuration to use in the editor when editing an existing configuration or creating a new one."
                }
            },
            "defaultRequiresSessionAuth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default require session auth flag to used to set the default value for the requireSessionAuth\nproperty when creating a configuration. If set to true, then a session token must be provided\nto the <nylas-scheduling/> component. If set to false, then a session token is not required\nand the configuration id can passed to the <nylas-scheduling/> component instead."
                },
                "attribute": "default-requires-session-auth",
                "reflect": false,
                "defaultValue": "true"
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The current logged in user."
                }
            },
            "schedulerPreviewLink": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The scheduler preview link to use when the user clicks on the preview button.\nYou can use a placeholder `{config.id}` to replace the configuration id anywhere in the link."
                },
                "attribute": "scheduler-preview-link",
                "reflect": false,
                "defaultValue": "''"
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'app' | 'composable'",
                    "resolved": "\"app\" | \"composable\" | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The mode of the editor.\n- `app`: The editor is used as a standalone app.\n- `composable`: The editor is used as a composable component."
                },
                "attribute": "mode",
                "reflect": false,
                "defaultValue": "'app'"
            }
        };
    }
    static get states() {
        return {
            "action": {},
            "activeTab": {},
            "isLoading": {},
            "hasUnsavedChanges": {},
            "changesSaved": {},
            "formState": {},
            "error": {}
        };
    }
    static get events() {
        return [{
                "method": "schedulerConfigChanged",
                "name": "schedulerConfigChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the configuration is changed."
                },
                "complexType": {
                    "original": "SchedulerEventDetail",
                    "resolved": "{ config: Partial<Configuration>; action: \"create\" | \"edit\"; resetLoadingState?: ((e: CustomEvent<any>) => void) | undefined; setError?: ((error: Error) => void) | undefined; }",
                    "references": {
                        "SchedulerEventDetail": {
                            "location": "global",
                            "id": "global::SchedulerEventDetail"
                        }
                    }
                }
            }, {
                "method": "cancelButtonClick",
                "name": "cancelButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the cancel button."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "formSubmitted",
                "name": "formSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted on form submission."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "previewButtonClicked",
                "name": "previewButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the cancel button."
                },
                "complexType": {
                    "original": "HTMLNylasEditorTabsElement",
                    "resolved": "HTMLNylasEditorTabsElement",
                    "references": {
                        "HTMLNylasEditorTabsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasEditorTabsElement"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "selectedConfiguration",
                "methodName": "configChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "valueChanged",
                "method": "handleValueChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-editor-tabs',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {
            schedulerConfigChanged: async (event, nylasSchedulerConfigConnector) => {
                const { resetLoadingState, setError, action, config } = event.detail;
                const checkForErrors = (response) => {
                    const [data, error] = response;
                    if (!data && error && setError) {
                        setError(error);
                    }
                    if (resetLoadingState) {
                        resetLoadingState(event);
                    }
                };
                if (action === 'edit') {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.updateConfiguration(config);
                    checkForErrors(response);
                }
                else {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.createConfiguration(config);
                    checkForErrors(response);
                }
            },
            cancelButtonClick: async (_, nylasSchedulerConfigConnector) => {
                nylasSchedulerConfigConnector.schedulerConfigStore.state.action = null;
            },
        },
        localPropsToProp: new Map([
            ['schedulerPreviewLink', 'schedulerPreviewLink'],
            ['defaultRequiresSessionAuth', 'defaultRequiresSessionAuth'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEditorTabs.prototype, "render", null);
//# sourceMappingURL=nylas-editor-tabs.js.map
