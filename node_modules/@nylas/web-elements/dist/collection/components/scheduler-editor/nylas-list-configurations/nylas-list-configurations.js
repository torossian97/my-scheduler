var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, parsePreviewLink } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasListConfigurations {
    constructor() {
        this.configurations = [];
        this.schedulerPreviewLink = '';
        this.state = 'loading';
        this.error = '';
    }
    connectedCallback() {
        debug('[nylas-list-configurations]', 'connectedCallback');
    }
    componentWillLoad() {
        debug('[nylas-list-configurations]', 'componentWillLoad');
        if (this.configurations && this.configurations.length > 0) {
            this.state = 'loaded';
        }
    }
    componentDidLoad() {
        debug('[nylas-list-configurations]', 'componentDidLoad');
        this.initListConfigurations.emit(this.host);
    }
    disconnectedCallback() {
        debug('[nylas-list-configurations]', 'disconnectedCallback');
    }
    async getState() {
        return this.state;
    }
    async setState(state) {
        this.state = state;
    }
    async setError(error) {
        this.error = error;
    }
    render() {
        return (h(Host, null, h("div", { class: "header" }, h("div", { class: "description" }, h("h2", null, "All scheduling pages"), h("p", null, "Create, edit and manage all your scheduling pages.")), this.configurations && this.configurations.length > 0 && (h("div", { class: "actions" }, h("button-component", { clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new")))), h("div", { class: "configurations" }, h("table", { class: {
                'no-configurations': this.state !== 'loading' && (!this.configurations || this.configurations.length === 0),
            } }, h("tr", { class: {
                hide: this.state === 'loading' || (this.configurations && this.configurations.length === 0),
            } }, h("th", null, "Scheduling page event title"), h("th", null, "Duration"), h("th", { class: "actions-header" }, "Actions")), this.state === 'loading' && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("h3", null, "Loading..."), h("p", null, "Please wait while we fetch the scheduling pages"))))), this.state !== 'loading' && (!this.configurations || this.configurations.length === 0) && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("calendar-icon", { width: "48", height: "48" }), h("h3", null, "No scheduling pages found"), h("p", null, "Get started with creating your first scheduling page"), h("button-component", { clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new"))))), this.state !== 'loading' &&
            this.configurations.map(config => (h("tr", { key: config.id }, h("td", null, h("div", { class: "title" }, h("span", { class: 'config-event-title' }, config.event_booking.title), h("span", { class: 'config-event-description' }, config.event_booking.description))), h("td", null, h("div", null, config.availability.duration_minutes, " mins")), h("td", null, h("div", { class: "actions" }, h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    window.open(parsePreviewLink(this.schedulerPreviewLink, config), '_blank');
                } }, "Preview"), h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    this.editButtonClick.emit({ host: this.host, configuration: config });
                } }, "Edit"), h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    this.deleteButtonClick.emit({ host: this.host, configuration: config });
                } }, "Delete")))))))), this.state === 'error' && (h("div", { class: "error-container" }, h("p", { class: 'error' }, this.error)))));
    }
    static get is() { return "nylas-list-configurations"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-list-configurations.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-list-configurations.css"]
        };
    }
    static get properties() {
        return {
            "configurations": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration[]",
                    "resolved": "Configuration[]",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The list of configurations to display."
                },
                "defaultValue": "[]"
            },
            "schedulerPreviewLink": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The scheduler preview link to use when the user clicks on the preview button.\nYou can use a placeholder `{config.id}` to replace the configuration id anywhere in the link."
                },
                "attribute": "scheduler-preview-link",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "state": {},
            "error": {}
        };
    }
    static get events() {
        return [{
                "method": "initListConfigurations",
                "name": "initListConfigurations",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the component is initialized."
                },
                "complexType": {
                    "original": "HTMLNylasListConfigurationsElement",
                    "resolved": "HTMLNylasListConfigurationsElement",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        }
                    }
                }
            }, {
                "method": "createButtonClick",
                "name": "createButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the create event button."
                },
                "complexType": {
                    "original": "HTMLNylasListConfigurationsElement",
                    "resolved": "HTMLNylasListConfigurationsElement",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        }
                    }
                }
            }, {
                "method": "editButtonClick",
                "name": "editButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the edit event button."
                },
                "complexType": {
                    "original": "{\n    host: HTMLNylasListConfigurationsElement;\n    configuration: Configuration;\n  }",
                    "resolved": "{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        },
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                }
            }, {
                "method": "deleteButtonClick",
                "name": "deleteButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the delete event button."
                },
                "complexType": {
                    "original": "{\n    host: HTMLNylasListConfigurationsElement;\n    configuration: Configuration;\n  }",
                    "resolved": "{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        },
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getState": {
                "complexType": {
                    "signature": "() => Promise<\"loading\" | \"error\" | \"loaded\">",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<\"loading\" | \"error\" | \"loaded\">"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "setState": {
                "complexType": {
                    "signature": "(state: 'loading' | 'loaded' | 'error') => Promise<void>",
                    "parameters": [{
                            "name": "state",
                            "type": "\"loading\" | \"error\" | \"loaded\"",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "setError": {
                "complexType": {
                    "signature": "(error: string) => Promise<void>",
                    "parameters": [{
                            "name": "error",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "host"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-list-configurations',
        stateToProps: new Map([['schedulerConfig.configurations', 'configurations']]),
        localPropsToProp: new Map([['schedulerPreviewLink', 'schedulerPreviewLink']]),
        eventToProps: {
            initListConfigurations: async (event, connector) => {
                const host = event.detail;
                await host.setState('loading');
                const [data, error] = await connector.schedulerConfig.getConfigurations();
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                    return;
                }
                await host.setState('loaded');
            },
            createButtonClick: async (_, connector) => {
                connector.schedulerConfigStore.resetSelectedConfiguration();
                connector.schedulerConfigStore.state.action = 'create';
            },
            deleteButtonClick: async (event, connector) => {
                const { host, configuration } = event.detail;
                const [data, error] = await connector.schedulerConfig.deleteConfiguration(configuration.id);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                }
            },
            editButtonClick: async (event, connector) => {
                const { configuration } = event.detail;
                connector.schedulerConfigStore.state.selectedConfiguration = configuration;
                connector.schedulerConfigStore.state.action = 'edit';
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListConfigurations.prototype, "render", null);
//# sourceMappingURL=nylas-list-configurations.js.map
