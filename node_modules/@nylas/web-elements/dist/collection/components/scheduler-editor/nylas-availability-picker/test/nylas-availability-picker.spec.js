import { newSpecPage } from "@stencil/core/testing";
import { NylasAvailabilityPicker } from "../nylas-availability-picker";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
describe('nylas-availability-picker', () => {
    beforeEach(() => {
        const originalIntl = Intl;
        global.Intl = {
            ...originalIntl,
            DateTimeFormat: jest.fn().mockImplementation(() => ({
                resolvedOptions: () => ({
                    timeZone: 'America/New_York',
                }),
                supportedLocalesOf: jest.fn(),
            })),
        };
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('renders', async () => {
        const openHours = [
            {
                days: [1, 2, 3, 4, 5],
                exdates: null,
                timezone: 'America/Toronto',
                start: '09:00',
                end: '17:00',
            },
        ];
        const page = await newSpecPage({
            components: [NylasAvailabilityPicker],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-availability-picker", { name: "availability", openHours: openHours })));
            },
        });
        expect(page.root).toMatchSnapshot();
    });
    it('renders based on the openHours prop', async () => {
        const openHours = [
            {
                days: [1],
                exdates: null,
                timezone: 'America/Toronto',
                start: '09:00',
                end: '17:00',
            },
        ];
        const page = await newSpecPage({
            components: [NylasAvailabilityPicker],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-availability-picker", { name: "availability", openHours: openHours })));
            },
        });
        expect(page.root).toMatchSnapshot();
    });
    it('shows overlap error', async () => {
        const page = await newSpecPage({
            components: [NylasAvailabilityPicker],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-availability-picker", { name: "availability" })));
            },
        });
        const element = page.rootInstance;
        const oldSchedule = {
            SUN: [],
            MON: [{ start: '09:00am', end: '05:00pm' }],
            TUE: [{ start: '09:00am', end: '05:00pm' }],
            WED: [{ start: '09:00am', end: '05:00pm' }],
            THU: [{ start: '09:00am', end: '05:00pm' }],
            FRI: [{ start: '09:00am', end: '05:00pm' }],
            SAT: [],
        };
        const newSchedule = {
            SUN: [],
            MON: [
                { start: '09:00am', end: '05:00pm' },
                { start: '10:00am', end: '06:00pm' },
            ],
            TUE: [],
            WED: [],
            THU: [],
            FRI: [],
            SAT: [],
        };
        element.scheduleChanged(newSchedule, oldSchedule);
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const days = await page.root?.shadowRoot?.querySelectorAll('.availability-day');
        expect(days).not.toBeNull();
        const monday = days?.[1];
        expect(monday).not.toBeNull();
        const error = await monday?.querySelector('.error');
        expect(error).not.toBeNull();
        expect(error?.textContent).toEqual('Overlapping time ranges');
    });
    it('selects default timezone that is passed', async () => {
        const page = await newSpecPage({
            components: [NylasAvailabilityPicker, SelectDropdown],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-availability-picker", { name: "availability", defaultTimezone: "America/Vancouver" })));
            },
        });
        await page.waitForChanges();
        const timezoneDropdown = page.root?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;
        const timezoneButton = timezoneDropdown?.querySelector('button');
        expect(timezoneButton).not.toBeNull();
        expect(timezoneButton?.textContent).toEqual('America / Vancouver');
    });
    it('selects browser timezone if defaultTimezone is not passed', async () => {
        const page = await newSpecPage({
            components: [NylasAvailabilityPicker, SelectDropdown],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-availability-picker", { name: "availability" })));
            },
        });
        await page.waitForChanges();
        const timezoneDropdown = page.root?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;
        const timezoneButton = timezoneDropdown?.querySelector('button');
        expect(timezoneButton).not.toBeNull();
        expect(timezoneButton?.textContent).toEqual('America / New York');
    });
});
//# sourceMappingURL=nylas-availability-picker.spec.js.map
