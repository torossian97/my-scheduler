{"version":3,"file":"nylas-availability-picker.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-availability-picker/test/nylas-availability-picker.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasAvailabilityPicker } from '../nylas-availability-picker';\nimport { h } from '@stencil/core';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\n\ndescribe('nylas-availability-picker', () => {\n  beforeEach(() => {\n    const originalIntl = Intl;\n\n    global.Intl = {\n      ...originalIntl,\n      DateTimeFormat: jest.fn().mockImplementation(() => ({\n        resolvedOptions: () => ({\n          timeZone: 'America/New_York',\n        }),\n        supportedLocalesOf: jest.fn(),\n      })) as any,\n    };\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('renders', async () => {\n    const openHours = [\n      {\n        days: [1, 2, 3, 4, 5],\n        exdates: null,\n        timezone: 'America/Toronto',\n        start: '09:00',\n        end: '17:00',\n      },\n    ];\n\n    const page = await newSpecPage({\n      components: [NylasAvailabilityPicker],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-availability-picker name=\"availability\" openHours={openHours}></nylas-availability-picker>\n          </form>\n        );\n      },\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders based on the openHours prop', async () => {\n    const openHours = [\n      {\n        days: [1],\n        exdates: null,\n        timezone: 'America/Toronto',\n        start: '09:00',\n        end: '17:00',\n      },\n    ];\n\n    const page = await newSpecPage({\n      components: [NylasAvailabilityPicker],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-availability-picker name=\"availability\" openHours={openHours}></nylas-availability-picker>\n          </form>\n        );\n      },\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('shows overlap error', async () => {\n    const page = await newSpecPage({\n      components: [NylasAvailabilityPicker],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-availability-picker name=\"availability\"></nylas-availability-picker>\n          </form>\n        );\n      },\n    });\n    const element = page.rootInstance as NylasAvailabilityPicker;\n    const oldSchedule = {\n      SUN: [],\n      MON: [{ start: '09:00am', end: '05:00pm' }],\n      TUE: [{ start: '09:00am', end: '05:00pm' }],\n      WED: [{ start: '09:00am', end: '05:00pm' }],\n      THU: [{ start: '09:00am', end: '05:00pm' }],\n      FRI: [{ start: '09:00am', end: '05:00pm' }],\n      SAT: [],\n    };\n    const newSchedule = {\n      SUN: [],\n      MON: [\n        { start: '09:00am', end: '05:00pm' },\n        { start: '10:00am', end: '06:00pm' },\n      ],\n      TUE: [],\n      WED: [],\n      THU: [],\n      FRI: [],\n      SAT: [],\n    };\n    element.scheduleChanged(newSchedule, oldSchedule);\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n    const days = await page.root?.shadowRoot?.querySelectorAll('.availability-day');\n    expect(days).not.toBeNull();\n    const monday = days?.[1];\n    expect(monday).not.toBeNull();\n    const error = await monday?.querySelector('.error');\n    expect(error).not.toBeNull();\n    expect(error?.textContent).toEqual('Overlapping time ranges');\n  });\n\n  it('selects default timezone that is passed', async () => {\n    const page = await newSpecPage({\n      components: [NylasAvailabilityPicker, SelectDropdown],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-availability-picker name=\"availability\" defaultTimezone=\"America/Vancouver\"></nylas-availability-picker>\n          </form>\n        );\n      },\n    });\n    await page.waitForChanges();\n    const timezoneDropdown = page.root?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;\n    const timezoneButton = timezoneDropdown?.querySelector('button');\n    expect(timezoneButton).not.toBeNull();\n    expect(timezoneButton?.textContent).toEqual('America / Vancouver');\n  });\n\n  it('selects browser timezone if defaultTimezone is not passed', async () => {\n    const page = await newSpecPage({\n      components: [NylasAvailabilityPicker, SelectDropdown],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-availability-picker name=\"availability\"></nylas-availability-picker>\n          </form>\n        );\n      },\n    });\n\n    await page.waitForChanges();\n    const timezoneDropdown = page.root?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;\n    const timezoneButton = timezoneDropdown?.querySelector('button');\n    expect(timezoneButton).not.toBeNull();\n    expect(timezoneButton?.textContent).toEqual('America / New York');\n  });\n});\n"]}