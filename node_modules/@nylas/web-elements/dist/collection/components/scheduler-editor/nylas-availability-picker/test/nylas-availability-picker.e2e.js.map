{"version":3,"file":"nylas-availability-picker.e2e.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-availability-picker/test/nylas-availability-picker.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { TIMEZONE_MAP } from '@/common/constants';\nimport { newE2EPage } from '@stencil/core/testing';\n\ndescribe('nylas-availability-picker', () => {\n  beforeEach(() => {\n    // Backup the original Intl.DateTimeFormat\n    const RealDateTimeFormat = Intl.DateTimeFormat;\n\n    // Mock Intl.DateTimeFormat\n    jest.spyOn(Intl, 'DateTimeFormat').mockImplementation((...args) => {\n      const instance = new RealDateTimeFormat(...args);\n      return {\n        ...instance,\n        resolvedOptions: () => ({\n          ...instance.resolvedOptions(),\n          timeZone: 'America/Toronto', // Mocked timezone\n        }),\n      };\n    });\n  });\n\n  afterEach(() => {\n    // Restore the original Intl.DateTimeFormat after each test\n    jest.restoreAllMocks();\n  });\n\n  it('renders', async () => {\n    const page = await newE2EPage();\n    await page.setContent(\n      `<form id=\"availability-picker\">\n        <nylas-availability-picker name=\"availability\"></nylas-availability-picker>\n      </form>`,\n    );\n\n    const screenshot = await page.compareScreenshot();\n    expect(screenshot).toMatchScreenshot();\n  });\n\n  it('renders correctly with default props', async () => {\n    const page = await newE2EPage();\n    await page.setContent(\n      `<form id=\"availability-picker\">\n        <nylas-availability-picker name=\"availability\"></nylas-availability-picker>\n      </form>`,\n    );\n    const element = await page.find('nylas-availability-picker');\n    expect(element).toHaveClass('hydrated');\n  });\n\n  it('renders correctly with availability days', async () => {\n    const page = await newE2EPage();\n\n    // Inject initial openHours as a prop to the component\n    await page.setContent(`<form id=\"availability-picker\">\n      <nylas-availability-picker name=\"availability\"></nylas-availability-picker>\n    </form>`);\n\n    const element = await page.find('nylas-availability-picker');\n    expect(element).toHaveClass('hydrated');\n\n    // Check if the component properly processed and rendered the openHours\n    const availabilityDays = await page.findAll('nylas-availability-picker >>> .availability-day');\n    expect(availabilityDays.length).toBeGreaterThan(0); // Expecting at least one day to be rendered\n  });\n\n  it('correctly marks days from the default state', async () => {\n    const page = await newE2EPage();\n\n    await page.setContent(`<nylas-availability-picker></nylas-availability-picker>`);\n\n    await page.waitForChanges();\n\n    const daysMarked = await page.findAll('nylas-availability-picker >>> .availability-day input[type=\"checkbox\"]:checked');\n    expect(daysMarked.length).toEqual(5); // Expecting 5 days to be marked as checked\n    const allDays = await page.findAll('nylas-availability-picker >>> .availability-day input[type=\"checkbox\"]');\n    expect(allDays.length).toEqual(7); // Expecting 7 days to be rendered\n\n    expect(await allDays[0].getProperty('checked')).toEqual(false); // Expecting Sunday to be unchecked\n    expect(await allDays[1].getProperty('checked')).toEqual(true); // Expecting Monday to be checked\n    expect(await allDays[2].getProperty('checked')).toEqual(true); // Expecting Tuesday to be checked\n    expect(await allDays[3].getProperty('checked')).toEqual(true); // Expecting Wednesday to be checked\n    expect(await allDays[4].getProperty('checked')).toEqual(true); // Expecting Thursday to be checked\n    expect(await allDays[5].getProperty('checked')).toEqual(true); // Expecting Friday to be checked\n    expect(await allDays[6].getProperty('checked')).toEqual(false); // Expecting Saturday to be unchecked\n  });\n\n  it('displays correct time ranges', async () => {\n    const page = await newE2EPage();\n\n    // Inject initial openHours as a prop to the component\n    await page.setContent(`\n      <nylas-availability-picker></nylas-availability-picker>\n    `);\n\n    // Find the time range display elements for one of the days, for example, Monday (1)\n    const days = await page.findAll('nylas-availability-picker >>> .availability-day');\n    const monday = days[1];\n    const timeRangeStart = await monday.find('.time-ranges .time-range nylas-time-window-picker[id=\"MON:0_start\"] >>> .time-picker input');\n    expect(timeRangeStart).not.toBeNull();\n    expect(await timeRangeStart.getProperty('value')).toEqual('09:00am');\n    const timeRangeEnd = await monday.find('.time-ranges .time-range nylas-time-window-picker[id=\"MON:0_end\"] >>> .time-picker input');\n    expect(timeRangeEnd).not.toBeNull();\n    expect(await timeRangeEnd.getProperty('value')).toEqual('05:00pm');\n  });\n\n  it('displays correct timezone and selects timezone', async () => {\n    const page = await newE2EPage();\n\n    await page.evaluateOnNewDocument(() => {\n      const originalDateTimeFormat = Intl.DateTimeFormat;\n      (Intl as any).DateTimeFormat = function (...args: any[]) {\n        const instance = new originalDateTimeFormat(...args);\n        return {\n          ...instance,\n          resolvedOptions: function () {\n            return {\n              ...instance.resolvedOptions(),\n              timeZone: 'America/Toronto',\n            };\n          },\n          supportedLocalesOf: function (_locales: string | string[], _options?: Intl.DateTimeFormatOptions): string[] {\n            return [];\n          },\n        };\n      };\n    });\n\n    await page.setContent(`\n      <nylas-availability-picker></nylas-availability-picker>\n    `);\n    const defaultTimezone = TIMEZONE_MAP[Intl.DateTimeFormat().resolvedOptions().timeZone];\n    // Find the timezone display element\n    const selectTimezone = await page.find('nylas-availability-picker >>> .select-timezone');\n    expect(selectTimezone).not.toBeNull();\n    const timezone = await selectTimezone.find('select-dropdown >>> .dropdown button');\n    expect(timezone).not.toBeNull();\n    expect(await timezone.innerText).toEqual(defaultTimezone);\n    await timezone.click();\n    await page.waitForChanges();\n    await page.keyboard.press('ArrowDown');\n    const timezoneInput = await selectTimezone.find('select-dropdown >>> .dropdown-content input[type=\"text\"]');\n    expect(timezoneInput).not.toBeNull();\n    await timezoneInput.type('Toronto');\n    await page.waitForChanges();\n    const li = await selectTimezone.find('select-dropdown >>> .dropdown-content ul li');\n    await li.click();\n    await page.waitForChanges();\n    expect(await timezone.innerText).toEqual('America / Toronto');\n  });\n\n  it('selects a day successfully', async () => {\n    const page = await newE2EPage();\n\n    await page.setContent(`\n      <nylas-availability-picker></nylas-availability-picker>\n    `);\n\n    const days = await page.findAll('nylas-availability-picker >>> .availability-day input[type=\"checkbox\"]');\n    const sunday = days[0];\n    await sunday.click();\n    await page.waitForChanges();\n    const newSelectedDays = await page.findAll('nylas-availability-picker >>> .availability-day input[type=\"checkbox\"]:checked');\n    expect(newSelectedDays.length).toEqual(6);\n  });\n\n  it('updates the time range successfully', async () => {\n    const page = await newE2EPage();\n\n    await page.setContent(`\n      <nylas-availability-picker></nylas-availability-picker>\n    `);\n\n    const days = await page.findAll('nylas-availability-picker >>> .availability-day');\n    const monday = days[1];\n    const timeRangeStart = await monday.find('.time-ranges .time-range nylas-time-window-picker[id=\"MON:0_start\"] >>> .time-picker input');\n    expect(timeRangeStart).not.toBeNull();\n    await timeRangeStart.click();\n    // Check that input value is focused in the dropdown list\n    const focusedOption = await monday.find('.time-ranges .time-range nylas-time-window-picker[id=\"MON:0_start\"] >>> .time-picker .times ul li.focused');\n    expect(focusedOption).not.toBeNull();\n    expect(await focusedOption.innerText).toEqual('09:00am');\n\n    // Pressing the down arrow key to select the next time slot\n    await timeRangeStart.press('ArrowDown');\n    await page.keyboard.press('Enter');\n    await page.waitForChanges();\n    expect(await timeRangeStart.getProperty('value')).toEqual('09:15am');\n\n    // Manually typing a time range\n    await timeRangeStart.focus();\n    await timeRangeStart.press('ArrowDown');\n    // Pressing the down arrow key 8 times to clear the input\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.press('Backspace');\n    await timeRangeStart.type('01:00pm');\n    await page.waitForChanges();\n\n    await timeRangeStart.press('ArrowDown');\n    await page.keyboard.press('Enter');\n    await page.waitForChanges();\n    expect(await timeRangeStart.getProperty('value')).toEqual('01:15pm');\n  });\n});\n"]}