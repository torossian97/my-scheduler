import { TIMEZONE_MAP } from "../../../../common/constants";
import { newE2EPage } from "@stencil/core/testing";
describe('nylas-availability-picker', () => {
    beforeEach(() => {
        const RealDateTimeFormat = Intl.DateTimeFormat;
        jest.spyOn(Intl, 'DateTimeFormat').mockImplementation((...args) => {
            const instance = new RealDateTimeFormat(...args);
            return {
                ...instance,
                resolvedOptions: () => ({
                    ...instance.resolvedOptions(),
                    timeZone: 'America/Toronto',
                }),
            };
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('renders', async () => {
        const page = await newE2EPage();
        await page.setContent(`<form id="availability-picker">
        <nylas-availability-picker name="availability"></nylas-availability-picker>
      </form>`);
        const screenshot = await page.compareScreenshot();
        expect(screenshot).toMatchScreenshot();
    });
    it('renders correctly with default props', async () => {
        const page = await newE2EPage();
        await page.setContent(`<form id="availability-picker">
        <nylas-availability-picker name="availability"></nylas-availability-picker>
      </form>`);
        const element = await page.find('nylas-availability-picker');
        expect(element).toHaveClass('hydrated');
    });
    it('renders correctly with availability days', async () => {
        const page = await newE2EPage();
        await page.setContent(`<form id="availability-picker">
      <nylas-availability-picker name="availability"></nylas-availability-picker>
    </form>`);
        const element = await page.find('nylas-availability-picker');
        expect(element).toHaveClass('hydrated');
        const availabilityDays = await page.findAll('nylas-availability-picker >>> .availability-day');
        expect(availabilityDays.length).toBeGreaterThan(0);
    });
    it('correctly marks days from the default state', async () => {
        const page = await newE2EPage();
        await page.setContent(`<nylas-availability-picker></nylas-availability-picker>`);
        await page.waitForChanges();
        const daysMarked = await page.findAll('nylas-availability-picker >>> .availability-day input[type="checkbox"]:checked');
        expect(daysMarked.length).toEqual(5);
        const allDays = await page.findAll('nylas-availability-picker >>> .availability-day input[type="checkbox"]');
        expect(allDays.length).toEqual(7);
        expect(await allDays[0].getProperty('checked')).toEqual(false);
        expect(await allDays[1].getProperty('checked')).toEqual(true);
        expect(await allDays[2].getProperty('checked')).toEqual(true);
        expect(await allDays[3].getProperty('checked')).toEqual(true);
        expect(await allDays[4].getProperty('checked')).toEqual(true);
        expect(await allDays[5].getProperty('checked')).toEqual(true);
        expect(await allDays[6].getProperty('checked')).toEqual(false);
    });
    it('displays correct time ranges', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <nylas-availability-picker></nylas-availability-picker>
    `);
        const days = await page.findAll('nylas-availability-picker >>> .availability-day');
        const monday = days[1];
        const timeRangeStart = await monday.find('.time-ranges .time-range nylas-time-window-picker[id="MON:0_start"] >>> .time-picker input');
        expect(timeRangeStart).not.toBeNull();
        expect(await timeRangeStart.getProperty('value')).toEqual('09:00am');
        const timeRangeEnd = await monday.find('.time-ranges .time-range nylas-time-window-picker[id="MON:0_end"] >>> .time-picker input');
        expect(timeRangeEnd).not.toBeNull();
        expect(await timeRangeEnd.getProperty('value')).toEqual('05:00pm');
    });
    it('displays correct timezone and selects timezone', async () => {
        const page = await newE2EPage();
        await page.evaluateOnNewDocument(() => {
            const originalDateTimeFormat = Intl.DateTimeFormat;
            Intl.DateTimeFormat = function (...args) {
                const instance = new originalDateTimeFormat(...args);
                return {
                    ...instance,
                    resolvedOptions: function () {
                        return {
                            ...instance.resolvedOptions(),
                            timeZone: 'America/Toronto',
                        };
                    },
                    supportedLocalesOf: function (_locales, _options) {
                        return [];
                    },
                };
            };
        });
        await page.setContent(`
      <nylas-availability-picker></nylas-availability-picker>
    `);
        const defaultTimezone = TIMEZONE_MAP[Intl.DateTimeFormat().resolvedOptions().timeZone];
        const selectTimezone = await page.find('nylas-availability-picker >>> .select-timezone');
        expect(selectTimezone).not.toBeNull();
        const timezone = await selectTimezone.find('select-dropdown >>> .dropdown button');
        expect(timezone).not.toBeNull();
        expect(await timezone.innerText).toEqual(defaultTimezone);
        await timezone.click();
        await page.waitForChanges();
        await page.keyboard.press('ArrowDown');
        const timezoneInput = await selectTimezone.find('select-dropdown >>> .dropdown-content input[type="text"]');
        expect(timezoneInput).not.toBeNull();
        await timezoneInput.type('Toronto');
        await page.waitForChanges();
        const li = await selectTimezone.find('select-dropdown >>> .dropdown-content ul li');
        await li.click();
        await page.waitForChanges();
        expect(await timezone.innerText).toEqual('America / Toronto');
    });
    it('selects a day successfully', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <nylas-availability-picker></nylas-availability-picker>
    `);
        const days = await page.findAll('nylas-availability-picker >>> .availability-day input[type="checkbox"]');
        const sunday = days[0];
        await sunday.click();
        await page.waitForChanges();
        const newSelectedDays = await page.findAll('nylas-availability-picker >>> .availability-day input[type="checkbox"]:checked');
        expect(newSelectedDays.length).toEqual(6);
    });
    it('updates the time range successfully', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <nylas-availability-picker></nylas-availability-picker>
    `);
        const days = await page.findAll('nylas-availability-picker >>> .availability-day');
        const monday = days[1];
        const timeRangeStart = await monday.find('.time-ranges .time-range nylas-time-window-picker[id="MON:0_start"] >>> .time-picker input');
        expect(timeRangeStart).not.toBeNull();
        await timeRangeStart.click();
        const focusedOption = await monday.find('.time-ranges .time-range nylas-time-window-picker[id="MON:0_start"] >>> .time-picker .times ul li.focused');
        expect(focusedOption).not.toBeNull();
        expect(await focusedOption.innerText).toEqual('09:00am');
        await timeRangeStart.press('ArrowDown');
        await page.keyboard.press('Enter');
        await page.waitForChanges();
        expect(await timeRangeStart.getProperty('value')).toEqual('09:15am');
        await timeRangeStart.focus();
        await timeRangeStart.press('ArrowDown');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.press('Backspace');
        await timeRangeStart.type('01:00pm');
        await page.waitForChanges();
        await timeRangeStart.press('ArrowDown');
        await page.keyboard.press('Enter');
        await page.waitForChanges();
        expect(await timeRangeStart.getProperty('value')).toEqual('01:15pm');
    });
});
//# sourceMappingURL=nylas-availability-picker.e2e.js.map
