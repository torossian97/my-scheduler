var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasEventDuration {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'duration';
        this.eventDurationMinutes = undefined;
        this.duration = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 5;
        this.durationMinutes = this.eventDurationMinutes ?? 5;
        this.durationIncrement = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? 60 : 1) : 1;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-duration', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const configDuration = newVal?.availability?.duration_minutes;
        if (configDuration) {
            this.duration = configDuration >= 60 ? configDuration / 60 : configDuration;
            this.durationMinutes = configDuration ?? 5;
            this.durationIncrement = configDuration >= 60 ? 60 : 1;
        }
    }
    durationMinutesChangedHandler(newValue, oldValue) {
        debug('nylas-event-duration', 'durationMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        debug('nylas-event-duration', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-duration', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-event-duration', 'componentDidLoad');
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    disconnectedCallback() {
        debug('nylas-event-duration', 'disconnectedCallback');
    }
    handleChange(event) {
        this.duration = event.target.value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    handleBlur() {
        if ((this.duration === null || this.duration === undefined) && this.durationIncrement === 1) {
            this.duration = 5;
        }
        if ((this.duration <= 0 || this.duration === null || this.duration === undefined) && this.durationIncrement === 60) {
            this.duration = 1;
        }
        if (this.duration < 5 && this.durationIncrement === 1) {
            this.duration = 5;
        }
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    selectedOptionChangedHandler(event) {
        debug('nylas-calendar-picker', 'selectedOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.durationIncrement = parseInt(value);
        if (this.durationIncrement === 1) {
            this.duration = 5;
        }
        else {
            this.duration = 1;
        }
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    render() {
        const durationOptions = [
            { value: 1, label: 'minutes' },
            { value: 60, label: 'hours' },
        ];
        return (h(Host, { key: '222965e76af408c0b06183e8e888b73578adb158' }, h("div", { key: 'decd15dbfd386cebc4efc880a0a8fb7fc8fc4a1a', class: "nylas-event-duration", part: "ned" }, h("label", { key: '655d4bd8aad28138573516d1a409ff4ad7f90527', htmlFor: "duration" }, "Event duration", h("span", { key: 'f53fc2692fa1b4d3265e946ddf313a8e432897d8', class: "required" }, "*"), h("span", { key: '04f0110989f72e20a836ec8552801b87fc8cc6f8', class: "label-icon" }, h("tooltip-component", { key: 'cead8ac1aa4ca82db690a38306a8987e3b5759e0' }, h("info-icon", { key: '0105ced6a6b7227b7ac39f68869e6f9fed5fc386', slot: "tooltip-icon" }), h("span", { key: '3a1a73f76723e6f0ba4b4c45a08a839f26b8c25d', slot: "tooltip-content" }, "Set the duration of your event.")))), h("div", { key: '7c85aebc13daa31d440d6b7ec4f2104f64ac4407', class: "nylas-event-duration__wrapper" }, h("input", { key: '255e4574db650850cf3396509be0dfdac65175bb', type: "number", part: "ned_input", id: "duration", name: "duration", value: this.duration, onBlur: () => this.handleBlur(), onInput: e => this.handleChange(e), min: 5 }), h("select-dropdown", { key: 'a19d552e5e537d9ebeffa1890f2ccafa61a1f761', name: 'event-duration', options: durationOptions, exportparts: "sd__dropdown: ned__dropdown, sd__dropdown-button: ned__dropdown-button, sd__dropdown-content: ned__dropdown-content", defaultSelectedOption: durationOptions.find(i => i.value == this.durationIncrement) ?? durationOptions[0], withSearch: false })))));
    }
    static get is() { return "nylas-event-duration"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-event-duration.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-event-duration.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the event duration. Default is 'duration'."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'duration'"
            },
            "eventDurationMinutes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event duration in minutes as set in the configuration."
                },
                "attribute": "event-duration-minutes",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "duration": {},
            "durationMinutes": {},
            "durationIncrement": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the event duration changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "durationMinutes",
                "methodName": "durationMinutesChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "selectedOptionChanged",
                "method": "selectedOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-event-duration',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDuration.prototype, "render", null);
//# sourceMappingURL=nylas-event-duration.js.map
