jest.mock('@/utils/utils', () => ({
    ...jest.requireActual('@/utils/utils'),
    getBrowser: jest.fn(),
}));
import { newSpecPage } from "@stencil/core/testing";
import { NylasEventTitle } from "../nylas-event-title";
import { h } from "@stencil/core";
import { getBrowser } from "../../../../utils/utils";
const title = 'Meet with ${invitee} for ${duration} minutes';
describe('nylas-event-title', () => {
    let originalCreateRange;
    let page;
    beforeAll(() => {
        originalCreateRange = window.document.createRange;
        window.document.createRange = jest.fn().mockImplementation(() => {
            return {
                setStart: jest.fn(),
                setEnd: jest.fn(),
                commonAncestorContainer: {
                    nodeName: 'BODY',
                    ownerDocument: document,
                },
            };
        });
    });
    afterAll(() => {
        window.document.createRange = originalCreateRange;
    });
    beforeEach(async () => {
        jest.clearAllMocks();
        getBrowser.mockReturnValue('Chrome');
        page = await newSpecPage({
            components: [NylasEventTitle],
            template: () => {
                return h("nylas-event-title", { name: "eventTitle", eventTitle: title });
            },
        });
        await page.waitForChanges();
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('renders title', async () => {
        const contentEditable = page.root.shadowRoot.querySelector('.title');
        expect(contentEditable.textContent).toBe(title);
    });
    it('renders title with highlighted text', async () => {
        const contentEditable = page.root.shadowRoot.querySelector('.title');
        expect(contentEditable.innerHTML).toContain('Meet with <span class="highlighted-tag">${invitee}</span> for <span class="highlighted-tag">${duration}</span> minutes');
    });
    it('handles input in content editable', async () => {
        const contentEditable = page.root.shadowRoot.querySelector('.title');
        const inputEvent = new Event('input', { bubbles: true, cancelable: true });
        contentEditable.textContent = 'New input';
        contentEditable.dispatchEvent({
            ...inputEvent,
            target: {
                textContent: 'New input',
            },
        });
        await page.waitForChanges();
        expect(contentEditable.textContent).toBe('New input');
    });
    it('open dropdown on typing $', async () => {
        const contentEditable = page.root.shadowRoot.querySelector('.title');
        expect(getBrowser()).toBe('Chrome');
        page.root.shadowRoot.getSelection = jest.fn().mockReturnValue({
            focusOffset: 1,
            focusNode: {
                data: '$',
                nodeValue: '$',
            },
        });
        await page.waitForChanges();
        const inputEvent = new Event('input', { bubbles: true, cancelable: true });
        contentEditable.focus();
        contentEditable.textContent = '$';
        contentEditable.dispatchEvent({
            ...inputEvent,
            target: {
                textContent: '$',
            },
        });
        await page.waitForChanges();
        const dropdown = page.root.shadowRoot.querySelector('.token-options');
        expect(dropdown).not.toBeNull();
    });
});
//# sourceMappingURL=nylas-event-title.spec.js.map
