{"version":3,"file":"nylas-event-title.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-event-title/test/nylas-event-title.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["jest.mock('@/utils/utils', () => ({\n  ...jest.requireActual('@/utils/utils'), // This will preserve other exports from the module\n  getBrowser: jest.fn(),\n}));\n\nimport { newSpecPage } from '@stencil/core/testing';\nimport { NylasEventTitle } from '../nylas-event-title';\nimport { h } from '@stencil/core';\nimport { getBrowser } from '@/utils/utils';\n\nconst title = 'Meet with ${invitee} for ${duration} minutes';\n\ndescribe('nylas-event-title', () => {\n  let originalCreateRange;\n  let page: any;\n\n  beforeAll(() => {\n    // Save the original document.createRange function if it exists\n    originalCreateRange = window.document.createRange;\n\n    // Mock document.createRange\n    window.document.createRange = jest.fn().mockImplementation(() => {\n      return {\n        // Mock the methods of the Range object you use in your component\n        setStart: jest.fn(),\n        setEnd: jest.fn(),\n        commonAncestorContainer: {\n          nodeName: 'BODY',\n          ownerDocument: document,\n        },\n        // Add any other Range methods needed by your component\n      };\n    });\n  });\n  afterAll(() => {\n    // Restore the original document.createRange function\n    window.document.createRange = originalCreateRange;\n  });\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    (getBrowser as jest.Mock).mockReturnValue('Chrome');\n\n    page = await newSpecPage({\n      components: [NylasEventTitle],\n      template: () => {\n        return <nylas-event-title name=\"eventTitle\" eventTitle={title} />;\n      },\n    });\n    await page.waitForChanges();\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders title', async () => {\n    const contentEditable = page.root.shadowRoot.querySelector('.title');\n    expect(contentEditable.textContent).toBe(title);\n  });\n\n  it('renders title with highlighted text', async () => {\n    const contentEditable = page.root.shadowRoot.querySelector('.title');\n    expect(contentEditable.innerHTML).toContain('Meet with <span class=\"highlighted-tag\">${invitee}</span> for <span class=\"highlighted-tag\">${duration}</span> minutes');\n  });\n\n  it('handles input in content editable', async () => {\n    const contentEditable = page.root.shadowRoot.querySelector('.title');\n    const inputEvent = new Event('input', { bubbles: true, cancelable: true });\n\n    contentEditable.textContent = 'New input';\n    contentEditable.dispatchEvent({\n      ...inputEvent,\n      target: {\n        textContent: 'New input',\n      },\n    });\n\n    await page.waitForChanges();\n    expect(contentEditable.textContent).toBe('New input');\n  });\n\n  it('open dropdown on typing $', async () => {\n    const contentEditable = page.root.shadowRoot.querySelector('.title');\n    expect(getBrowser()).toBe('Chrome');\n    page.root.shadowRoot.getSelection = jest.fn().mockReturnValue({\n      focusOffset: 1,\n      focusNode: {\n        data: '$',\n        nodeValue: '$',\n      },\n    });\n    await page.waitForChanges();\n    const inputEvent = new Event('input', { bubbles: true, cancelable: true });\n\n    contentEditable.focus();\n    contentEditable.textContent = '$';\n    contentEditable.dispatchEvent({\n      ...inputEvent,\n      target: {\n        textContent: '$',\n      },\n    });\n\n    await page.waitForChanges();\n    const dropdown = page.root.shadowRoot.querySelector('.token-options');\n    expect(dropdown).not.toBeNull();\n  });\n});\n"]}