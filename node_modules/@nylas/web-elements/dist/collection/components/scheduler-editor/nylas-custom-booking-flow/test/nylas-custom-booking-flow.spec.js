import { newSpecPage } from "@stencil/core/testing";
import { NylasCustomBookingFlow } from "../nylas-custom-booking-flow";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
describe('nylas-custom-booking-flow', () => {
    let nylasCustomBookingFlow;
    let page;
    beforeEach(async () => {
        page = await newSpecPage({
            components: [NylasCustomBookingFlow, SelectDropdown],
            template: () => {
                return (h("nylas-custom-booking-flow", { name: "booking-type" }, h("select-dropdown", { name: "booking-type" })));
            },
        });
        nylasCustomBookingFlow = page.rootInstance;
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('selects booking as the booking type if no prop provided', async () => {
        const selectDropdownButton = page.root.shadowRoot.querySelector('select-dropdown').shadowRoot.querySelector('button');
        expect(selectDropdownButton.textContent).toBe('Automatically accept bookings');
    });
    it('selects booking type', async () => {
        const spyEvent = jest.fn();
        nylasCustomBookingFlow.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('selectedOptionChanged', {
            detail: { value: 'pre-booking', name: 'booking-calendar' },
            bubbles: true,
            composed: true,
        });
        nylasCustomBookingFlow.selectedOptionChangedHandler(mockEvent);
        expect(spyEvent).toHaveBeenCalled();
    });
    it('selects the booking type based on the prop provided', async () => {
        page = await newSpecPage({
            components: [NylasCustomBookingFlow, SelectDropdown],
            template: () => {
                return (h("nylas-custom-booking-flow", { name: "booking-type", bookingType: 'pre-booking' }, h("select-dropdown", { name: "booking-type" })));
            },
        });
        nylasCustomBookingFlow = page.rootInstance;
        const selectDropdownButton = page.root.shadowRoot.querySelector('select-dropdown').shadowRoot.querySelector('button');
        expect(selectDropdownButton.textContent).toBe('Manually confirm/decline bookings');
    });
});
//# sourceMappingURL=nylas-custom-booking-flow.spec.js.map
