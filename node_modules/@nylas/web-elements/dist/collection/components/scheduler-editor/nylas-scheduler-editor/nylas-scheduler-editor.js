import { NylasBaseProvider } from "../../../common/abstract-provider";
import { NylasIdentityRequestWrapper } from "../../../common/nylas-api-request";
import { NylasSchedulerConfigConnector } from "../../../connector/nylas-scheduler-config-connector/index";
import { CreateNylasSchedulerConfigStore } from "../../../stores/scheduler-config-store";
import { debug } from "../../../utils/utils";
import { NylasSessions } from "@nylas/identity";
import { Host, h } from "@stencil/core";
import { LoginRequired } from "./LoginRequired";
export class NylasSchedulerEditor {
    constructor() {
        this.handleSchedulerConfigCloseClicked = (_event) => {
            this.schedulerConfigCloseClicked.emit(this.host);
        };
        this.authenticationUrl = async (provider) => {
            if (!this.nylasApiRequest) {
                console.error(`[nylas-scheduler-editor] Nylas API Request is not initialized.`);
                return '';
            }
            const url = await this.nylasApiRequest.authenticationUrl({ provider });
            return url || '';
        };
        this.defaultRequiresSessionAuth = true;
        this.configurationId = undefined;
        this.nylasApiRequest = undefined;
        this.nylasSessionsConfig = undefined;
        this.defaultAuthArgs = undefined;
        this.eventOverrides = {};
        this.schedulerPreviewLink = '';
        this.defaultSchedulerConfigState = undefined;
        this.mode = 'app';
        this.automaticComponentRegistration = true;
    }
    connectedCallback() {
        debug(`[nylas-scheduler-editor] connectedCallback`);
    }
    async componentWillLoad() {
        debug(`[nylas-scheduler-editor] componentWillLoad`);
        this.stores = {
            schedulerConfig: CreateNylasSchedulerConfigStore({
                ...this.defaultSchedulerConfigState,
            }),
        };
        if (!this.nylasApiRequest && this.nylasSessionsConfig) {
            const nylasSession = new NylasSessions(this.nylasSessionsConfig);
            await nylasSession.isLoggedIn();
            nylasSession.onLoginSuccess(async () => {
                const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();
                if (currentUser) {
                    this.loggedIn.emit(this.host);
                    this.loggedInHandler(currentUser);
                }
            });
            nylasSession.onLoginFail(async () => {
                this.stores?.schedulerConfig?.set('currentUser', null);
                this.loggedOut.emit(this.host);
            });
            this.nylasApiRequest = new NylasIdentityRequestWrapper(nylasSession);
        }
        if (this.nylasApiRequest && this.defaultAuthArgs) {
            this.nylasApiRequest.setDefaultAuthArgs(this.defaultAuthArgs);
        }
        this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        const nylasSchedulerConfigStore = this.baseProvider.getStore('schedulerConfig');
        this.nylasSchedulerConfigConnector = new NylasSchedulerConfigConnector({
            nylasApiRequest: this.nylasApiRequest,
            nylasSchedulerConfigStore: nylasSchedulerConfigStore,
        });
        const initEvent = this.init.emit(this.host);
        if (!initEvent.defaultPrevented) {
            const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();
            if (currentUser) {
                this.loggedIn.emit(this.host);
                await this.loggedInHandler(currentUser);
            }
            else {
                this.stores?.schedulerConfig?.set('currentUser', null);
                this.loggedOut.emit(this.host);
            }
        }
        this.stores?.schedulerConfig?.onChange('selectedConfiguration', async (config) => {
            if (config && config.id) {
                this.configurationId = config.id;
            }
        });
        this.baseProvider?.componentWillLoad(this.nylasSchedulerConfigConnector);
    }
    async componentDidLoad() {
        debug(`[nylas-scheduler-editor] componentDidLoad`);
        this.baseProvider?.componentDidLoad();
    }
    componentDisconnected() {
        this.baseProvider?.componentDisconnected();
    }
    async configurationIdChanged(newConfigurationId) {
        if (newConfigurationId) {
            await this.nylasSchedulerConfigConnector?.schedulerConfig?.getConfigurationById(newConfigurationId);
            this.stores?.schedulerConfig?.set('action', 'edit');
        }
        else {
            this.stores?.schedulerConfig?.set('selectedConfiguration', {});
            this.stores?.schedulerConfig?.set('action', null);
        }
    }
    async store() {
        return this.stores?.schedulerConfig;
    }
    async schedulerConnector() {
        return this.nylasSchedulerConfigConnector;
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async loggedInHandler(currentUser) {
        this.stores?.schedulerConfig?.set('currentUser', currentUser);
        if (!this.nylasSchedulerConfigConnector) {
            return;
        }
        if (this.configurationId) {
            await this.nylasSchedulerConfigConnector.schedulerConfig?.getConfigurationById(this.configurationId);
        }
        await this.nylasSchedulerConfigConnector.schedulerConfig?.getCalendars();
    }
    render() {
        return (h(Host, { key: '9e7d484239633ec60552c6a400fbcda85f2d9ab2' }, h("div", { key: '6a360964ca93641b4f62750e95c75d81c8d62daa', class: "scheduler-editor-header", part: "nse__header" }, h("h1", { key: 'bdae7fcf66ce0a82d1596b6465d3317226ecc9de', class: "scheduler-editor-title", part: "nse__title" }, h("calendar-icon", { key: '2cc5546c75928257239a2fb4aadd0db480a5cd83', width: "18", height: "18" }), "Scheduler editor"), h("button", { key: '5429863bb4cb904ad6194db4a425320eab010dab', class: "scheduler-editor-close", onClick: e => this.handleSchedulerConfigCloseClicked(e), part: "nse__close-button" }, h("close-icon", { key: '8db91364286cb2be1c9f6b608f27f2def59664e6', width: "18", height: "18" }))), this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === null && (h("div", { class: "list-configurations" }, h("nylas-list-configurations", null))), this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'create' && (h("nylas-editor-tabs", { mode: "composable" }, h("nylas-event-info", null, h("div", { slot: "inputs" }, h("nylas-event-title", null), h("nylas-event-duration", null), h("nylas-location-component", null))), h("nylas-booking-calendar-picker", null))), this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'edit' && (h("nylas-editor-tabs", { mode: this.mode }, this.mode === 'composable' && h("slot", null))), !this.stores?.schedulerConfig?.state.currentUser && (h("slot", { name: "login-required" }, h(LoginRequired, { authenticationUrl: this.authenticationUrl })))));
    }
    static get is() { return "nylas-scheduler-editor"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-scheduler-editor.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-scheduler-editor.css"]
        };
    }
    static get properties() {
        return {
            "defaultRequiresSessionAuth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default requires_session_auth flag to use to set the default value for the requireSessionAuth\nproperty when creating a configuration. If set to true, a session token must be provided\nto the <nylas-scheduling/> component. If set to false, then a session token is not required,\nand the configuration id can be passed to the <nylas-scheduling/> component instead."
                },
                "attribute": "default-requires-session-auth",
                "reflect": false,
                "defaultValue": "true"
            },
            "configurationId": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "*\nThe configuration id to use for the scheduler editor.\nIf provided, then the scheduler editor will try and fetch the configuration\nwith the provided id. If found, it will automatically load the editor\nwith the configuration settings for editing."
                },
                "attribute": "configuration-id",
                "reflect": false
            },
            "nylasApiRequest": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "NylasApiRequest",
                    "resolved": "NylasApiRequest | undefined",
                    "references": {
                        "NylasApiRequest": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::NylasApiRequest"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The Nylas Api Request instance.\nUsed to make requests to the Nylas API."
                }
            },
            "nylasSessionsConfig": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Config",
                    "resolved": "Config | undefined",
                    "references": {
                        "Config": {
                            "location": "import",
                            "path": "@nylas/identity",
                            "id": "../nylas-identity/esm/index.d.ts::Config"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The Nylas Sessions configuration.\nUsed to configure the Nylas Sessions instance."
                }
            },
            "defaultAuthArgs": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AuthArgs",
                    "resolved": "undefined | { provider?: string | undefined; scope?: string[] | undefined; loginHint?: string | undefined; includeGrantScopes?: boolean | undefined; prompt?: string | undefined; metadata?: string | undefined; state?: string | undefined; }",
                    "references": {
                        "AuthArgs": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::AuthArgs"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default authentication arguments to use when authenticating a user."
                }
            },
            "eventOverrides": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "SchedulerEditorEventOverride",
                    "resolved": "Partial<{ valueChanged: (event: CustomEvent<{ value: string[]; name: string; valueChangedHandler?: ((event: CustomEvent<{ value: string[]; name: string; }>) => void) | undefined; } | { value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; } | { value: string; name: string; } | { value: string; name: string; } | { value: string; name: string; } | { value: { openHours: OpenHours[]; timezone: string; }; name: string; }>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; formSubmitted: (event: CustomEvent<void>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; schedulerConfigChanged: (event: CustomEvent<SchedulerEventDetail>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; cancelButtonClick: (event: CustomEvent<void>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; previewButtonClicked: (event: CustomEvent<HTMLNylasEditorTabsElement>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; initListConfigurations: (event: CustomEvent<HTMLNylasListConfigurationsElement>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; createButtonClick: (event: CustomEvent<HTMLNylasListConfigurationsElement>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; editButtonClick: (event: CustomEvent<{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; deleteButtonClick: (event: CustomEvent<{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }>, connector?: NylasSchedulerConnectorInterface | undefined) => Promise<void>; }> & EventOverride<NylasSchedulerConfigConnectorInterface>",
                    "references": {
                        "SchedulerEditorEventOverride": {
                            "location": "import",
                            "path": "@/common/component-types",
                            "id": "src/common/component-types.ts::SchedulerEditorEventOverride"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This provides a way to override the default event handlers."
                },
                "defaultValue": "{}"
            },
            "schedulerPreviewLink": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The scheduler preview link to use when the user clicks on the preview button.\nYou can use the placeholder `{config.id}` to replace the configuration id anywhere in the link."
                },
                "attribute": "scheduler-preview-link",
                "reflect": false,
                "defaultValue": "''"
            },
            "defaultSchedulerConfigState": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Partial<NylasSchedulerConfigStoreState>",
                    "resolved": "undefined | { selectedConfiguration?: RecursivePartial<Configuration> | undefined; configurations?: Configuration[] | undefined; calendars?: Calendar[] | undefined; currentUser?: User | null | undefined; action?: \"create\" | \"edit\" | null | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "NylasSchedulerConfigStoreState": {
                            "location": "import",
                            "path": "@/stores/scheduler-config-store",
                            "id": "src/stores/scheduler-config-store.ts::NylasSchedulerConfigStoreState"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default scheduler config store state.\nUsed to set the initial state of the scheduler config store.\nThis state can be used to pass defaults to newly created configurations."
                }
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'app' | 'composable'",
                    "resolved": "\"app\" | \"composable\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This is used to set the mode for the scheduler config.\nThe mode can be 'app' or 'composable'.\nThe default mode is 'app'."
                },
                "attribute": "mode",
                "reflect": false,
                "defaultValue": "'app'"
            }
        };
    }
    static get states() {
        return {
            "automaticComponentRegistration": {}
        };
    }
    static get events() {
        return [{
                "method": "init",
                "name": "init",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the provider is initialized.\nBy default, this event handles determining if the user is logged in or not.\nIn addition, it fetches the provided configuration if a valid configuration id is provided."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "loggedIn",
                "name": "loggedIn",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NylasAuth isAuthenticated state changes\nto true."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "loggedOut",
                "name": "loggedOut",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NylasAuth isAuthenticated state changes\nto true."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "schedulerConfigCloseClicked",
                "name": "schedulerConfigCloseClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the close button on scheduler config is clicked."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "store": {
                "complexType": {
                    "signature": "() => Promise<NylasSchedulerConfigStoreType | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasSchedulerConfigStoreType": {
                            "location": "import",
                            "path": "@/stores/scheduler-config-store",
                            "id": "src/stores/scheduler-config-store.ts::NylasSchedulerConfigStoreType"
                        }
                    },
                    "return": "Promise<CreateNylasSchedulerConfigStoreReturnType | undefined>"
                },
                "docs": {
                    "text": "This method is used to get the NylasSchedulerConfigStore instance.\nYou can use this instance to update or get the state of the store.",
                    "tags": [{
                            "name": "returns",
                            "text": "Promise<NylasSchedulerConfigStoreType | undefined>"
                        }]
                }
            },
            "schedulerConnector": {
                "complexType": {
                    "signature": "() => Promise<NylasSchedulerConfigConnector | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasSchedulerConfigConnector": {
                            "location": "import",
                            "path": "@/connector/nylas-scheduler-config-connector",
                            "id": "src/connector/nylas-scheduler-config-connector/index.ts::NylasSchedulerConfigConnector"
                        }
                    },
                    "return": "Promise<NylasSchedulerConfigConnector | undefined>"
                },
                "docs": {
                    "text": "This method is used to get the NylasSchedulerConfigConnector instance.\nYou can use this instance to make requests to the Nylas API.",
                    "tags": [{
                            "name": "returns",
                            "text": "Promise<NylasSchedulerConfigConnector | undefined>"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "configurationId",
                "methodName": "configurationIdChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "registerComponent",
                "method": "registerComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "unregisterComponent",
                "method": "unregisterComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=nylas-scheduler-editor.js.map
