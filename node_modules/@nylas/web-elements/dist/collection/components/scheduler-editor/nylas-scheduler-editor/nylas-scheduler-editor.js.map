{"version":3,"file":"nylas-scheduler-editor.js","sourceRoot":"","sources":["../../../../src/components/scheduler-editor/nylas-scheduler-editor/nylas-scheduler-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import { NylasBaseProvider } from '@/common/abstract-provider';\nimport type { SchedulerEditorEventOverride } from '@/common/component-types';\nimport { AuthArgs, NylasIdentityRequestWrapper, User, type NylasApiRequest } from '@/common/nylas-api-request';\nimport { RegisteredComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { CreateNylasSchedulerConfigStore, NylasSchedulerConfigStoreState, NylasSchedulerConfigStoreType } from '@/stores/scheduler-config-store';\nimport { debug } from '@/utils/utils';\nimport { Config, NylasSessions } from '@nylas/identity';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { LoginRequired } from './LoginRequired';\n\n/**\n * The `nylas-scheduler-editor` component is a form that allows users to configure the settings for the Nylas Scheduler.\n *\n * @slot login-required - This slot is used to display a message when the user is not logged in.\n */\n@Component({\n  tag: 'nylas-scheduler-editor',\n  styleUrl: 'nylas-scheduler-editor.scss',\n  shadow: true,\n})\nexport class NylasSchedulerEditor {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: {\n    schedulerConfig: NylasSchedulerConfigStoreType;\n  };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Scheduler Config Connector instance.\n   * The brains of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasSchedulerConfigConnector?: NylasSchedulerConfigConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasSchedulerEditorElement;\n\n  /**\n   * The default requires_session_auth flag to use to set the default value for the requireSessionAuth\n   * property when creating a configuration. If set to true, a session token must be provided\n   * to the <nylas-scheduling/> component. If set to false, then a session token is not required,\n   * and the configuration id can be passed to the <nylas-scheduling/> component instead.\n   */\n  @Prop() defaultRequiresSessionAuth: boolean = true;\n\n  /***\n   * The configuration id to use for the scheduler editor.\n   * If provided, then the scheduler editor will try and fetch the configuration\n   * with the provided id. If found, it will automatically load the editor\n   * with the configuration settings for editing.\n   */\n  @Prop({ mutable: true }) configurationId?: string;\n\n  /**\n   * The Nylas Api Request instance.\n   * Used to make requests to the Nylas API.\n   */\n  @Prop({ mutable: true }) nylasApiRequest?: NylasApiRequest;\n\n  /**\n   * The Nylas Sessions configuration.\n   * Used to configure the Nylas Sessions instance.\n   */\n  @Prop() nylasSessionsConfig?: Config;\n\n  /**\n   * The default authentication arguments to use when authenticating a user.\n   */\n  @Prop() defaultAuthArgs?: AuthArgs;\n\n  /**\n   * This provides a way to override the default event handlers.\n   */\n  @Prop() eventOverrides: SchedulerEditorEventOverride = {};\n\n  /**\n   * The scheduler preview link to use when the user clicks on the preview button.\n   * You can use the placeholder `{config.id}` to replace the configuration id anywhere in the link.\n   */\n  @Prop({ attribute: 'scheduler-preview-link' }) schedulerPreviewLink: string = '';\n\n  /**\n   * The default scheduler config store state.\n   * Used to set the initial state of the scheduler config store.\n   * This state can be used to pass defaults to newly created configurations.\n   */\n  @Prop({ attribute: 'default-scheduler-config-store-state' }) readonly defaultSchedulerConfigState?: Partial<NylasSchedulerConfigStoreState>;\n\n  /**\n   * This is used to set the mode for the scheduler config.\n   * The mode can be 'app' or 'composable'.\n   * The default mode is 'app'.\n   */\n  @Prop({ attribute: 'mode' }) readonly mode: 'app' | 'composable' = 'app';\n\n  /**\n   * This event is fired when the provider is initialized.\n   * By default, this event handles determining if the user is logged in or not.\n   * In addition, it fetches the provided configuration if a valid configuration id is provided.\n   */\n  @Event({ cancelable: true }) readonly init!: EventEmitter<HTMLNylasSchedulerEditorElement>;\n\n  /**\n   * This event is fired when the the NylasAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) readonly loggedIn!: EventEmitter<HTMLNylasSchedulerEditorElement>;\n\n  /**\n   * This event is fired when the the NylasAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) readonly loggedOut!: EventEmitter<HTMLNylasSchedulerEditorElement>;\n\n  /**\n   * This event is fired when the close button on scheduler config is clicked.\n   */\n  @Event({ cancelable: true }) readonly schedulerConfigCloseClicked!: EventEmitter<HTMLNylasSchedulerEditorElement>;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @State() automaticComponentRegistration: boolean = true;\n\n  connectedCallback() {\n    debug(`[nylas-scheduler-editor] connectedCallback`);\n  }\n\n  async componentWillLoad() {\n    debug(`[nylas-scheduler-editor] componentWillLoad`);\n    this.stores = {\n      schedulerConfig: CreateNylasSchedulerConfigStore({\n        ...this.defaultSchedulerConfigState,\n      }),\n    };\n\n    if (!this.nylasApiRequest && this.nylasSessionsConfig) {\n      const nylasSession = new NylasSessions(this.nylasSessionsConfig);\n\n      // We must check if the user is logged in before continuing\n      // otherwise, a PCKE code will not be generated and the user\n      // will not be able to log in.\n      await nylasSession.isLoggedIn();\n\n      // Watch for login events so that we can automatically update the state\n      nylasSession.onLoginSuccess(async () => {\n        const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();\n        if (currentUser) {\n          this.loggedIn.emit(this.host);\n          this.loggedInHandler(currentUser);\n        }\n      });\n\n      // Watch for logout events so that we can automatically update the state\n      nylasSession.onLoginFail(async () => {\n        this.stores?.schedulerConfig?.set('currentUser', null);\n        this.loggedOut.emit(this.host);\n      });\n\n      this.nylasApiRequest = new NylasIdentityRequestWrapper(nylasSession);\n    }\n\n    if (this.nylasApiRequest && this.defaultAuthArgs) {\n      this.nylasApiRequest.setDefaultAuthArgs(this.defaultAuthArgs);\n    }\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    const nylasSchedulerConfigStore = this.baseProvider.getStore('schedulerConfig');\n    this.nylasSchedulerConfigConnector = new NylasSchedulerConfigConnector({\n      nylasApiRequest: this.nylasApiRequest,\n      nylasSchedulerConfigStore: nylasSchedulerConfigStore,\n    });\n\n    const initEvent = this.init.emit(this.host);\n    if (!initEvent.defaultPrevented) {\n      const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();\n      if (currentUser) {\n        this.loggedIn.emit(this.host);\n        await this.loggedInHandler(currentUser);\n      } else {\n        this.stores?.schedulerConfig?.set('currentUser', null);\n        this.loggedOut.emit(this.host);\n      }\n    }\n\n    // Watch for store changes\n    this.stores?.schedulerConfig?.onChange('selectedConfiguration', async config => {\n      if (config && config.id) {\n        this.configurationId = config.id;\n      }\n    });\n\n    this.baseProvider?.componentWillLoad(this.nylasSchedulerConfigConnector);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-scheduler-editor] componentDidLoad`);\n    this.baseProvider?.componentDidLoad();\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  /**\n   * Watch for changes to the configuration id and automatically fetch the configuration\n   * when the configuration id changes. If the configuration id is cleared, then the\n   * configuration is cleared as well.\n   * @param newConfigurationId The new configuration id\n   */\n  @Watch('configurationId')\n  async configurationIdChanged(newConfigurationId: string) {\n    if (newConfigurationId) {\n      await this.nylasSchedulerConfigConnector?.schedulerConfig?.getConfigurationById(newConfigurationId);\n      this.stores?.schedulerConfig?.set('action', 'edit');\n    } else {\n      // Clear the configuration\n      this.stores?.schedulerConfig?.set('selectedConfiguration', {});\n      this.stores?.schedulerConfig?.set('action', null);\n    }\n  }\n\n  /**\n   * This method is used to get the NylasSchedulerConfigStore instance.\n   * You can use this instance to update or get the state of the store.\n   * @returns Promise<NylasSchedulerConfigStoreType | undefined>\n   */\n  @Method()\n  async store(): Promise<NylasSchedulerConfigStoreType | undefined> {\n    return this.stores?.schedulerConfig;\n  }\n\n  /**\n   * This method is used to get the NylasSchedulerConfigConnector instance.\n   * You can use this instance to make requests to the Nylas API.\n   * @returns Promise<NylasSchedulerConfigConnector | undefined>\n   */\n  @Method()\n  async schedulerConnector(): Promise<NylasSchedulerConfigConnector | undefined> {\n    return this.nylasSchedulerConfigConnector;\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * Upon login, set the current user and fetch the configuration and calendars.\n   * @param currentUser The current user that is logged in\n   */\n  private async loggedInHandler(currentUser: User) {\n    this.stores?.schedulerConfig?.set('currentUser', currentUser);\n\n    if (!this.nylasSchedulerConfigConnector) {\n      return;\n    }\n\n    if (this.configurationId) {\n      await this.nylasSchedulerConfigConnector.schedulerConfig?.getConfigurationById(this.configurationId);\n    }\n\n    await this.nylasSchedulerConfigConnector.schedulerConfig?.getCalendars();\n  }\n\n  /**\n   * This is a custom event handler that is used to update the state of the provider.\n   */\n  private handleSchedulerConfigCloseClicked = (_event: Event) => {\n    this.schedulerConfigCloseClicked.emit(this.host);\n  };\n\n  /**\n   * This method is used to get the authentication URL for a provider.\n   * @param provider The provider to get the authentication URL for (e.g. google, microsoft, etc.)\n   * @returns Promise<string> The authentication URL to redirect the user for the provider\n   */\n  private authenticationUrl = async (provider?: string) => {\n    if (!this.nylasApiRequest) {\n      console.error(`[nylas-scheduler-editor] Nylas API Request is not initialized.`);\n      return '';\n    }\n    const url = await this.nylasApiRequest.authenticationUrl({ provider });\n\n    return url || '';\n  };\n\n  render() {\n    return (\n      <Host>\n        <div class=\"scheduler-editor-header\" part=\"nse__header\">\n          <h1 class=\"scheduler-editor-title\" part=\"nse__title\">\n            <calendar-icon width=\"18\" height=\"18\" />\n            Scheduler editor\n          </h1>\n          <button class=\"scheduler-editor-close\" onClick={e => this.handleSchedulerConfigCloseClicked(e)} part=\"nse__close-button\">\n            <close-icon width=\"18\" height=\"18\" />\n          </button>\n        </div>\n        {this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === null && (\n          <div class=\"list-configurations\">\n            <nylas-list-configurations></nylas-list-configurations>\n          </div>\n        )}\n        {this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'create' && (\n          // If the mode is 'app', then render the editor tabs in a composable mode with children for creating a new configuration (Express flow).\n          <nylas-editor-tabs mode=\"composable\">\n            <nylas-event-info>\n              <div slot=\"inputs\">\n                <nylas-event-title />\n                <nylas-event-duration />\n                <nylas-location-component />\n              </div>\n            </nylas-event-info>\n            <nylas-booking-calendar-picker />\n          </nylas-editor-tabs>\n        )}\n        {this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'edit' && (\n          <nylas-editor-tabs mode={this.mode}>{this.mode === 'composable' && <slot />}</nylas-editor-tabs>\n        )}\n        {!this.stores?.schedulerConfig?.state.currentUser && (\n          <slot name=\"login-required\">\n            <LoginRequired authenticationUrl={this.authenticationUrl} />\n          </slot>\n        )}\n      </Host>\n    );\n  }\n}\n"]}