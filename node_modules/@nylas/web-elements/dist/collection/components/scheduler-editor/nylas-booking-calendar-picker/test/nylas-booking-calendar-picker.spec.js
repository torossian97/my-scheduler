import { newSpecPage } from "@stencil/core/testing";
import { NylasBookingCalendarPicker } from "../nylas-booking-calendar-picker";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
const calendars = [
    {
        id: 'new-calendar-id',
        name: 'New Calendar',
        grant_id: 'new-grant-id',
        hex_color: '#000000',
        hex_foreground_color: '#FFFFFF',
        is_primary: false,
        is_owned_by_user: true,
        read_only: false,
        timezone: 'America/Toronto',
        object: 'calendar',
    },
    {
        id: 'another-new-calendar-id',
        name: 'Another New Calendar',
        grant_id: 'new-grant-id',
        hex_color: '#000000',
        hex_foreground_color: '#FFFFFF',
        is_primary: false,
        is_owned_by_user: true,
        read_only: false,
        timezone: 'America/Toronto',
        object: 'calendar',
    },
];
describe('nylas-calendar-picker', () => {
    let nylasBookingCalendarPicker;
    let page;
    beforeEach(async () => {
        page = await newSpecPage({
            components: [NylasBookingCalendarPicker, SelectDropdown],
            template: () => {
                return (h("nylas-booking-calendar-picker", { name: "calendar", calendars: calendars, defaultBookingCalendar: calendars[0].id }, h("select-dropdown", { name: "booking-calendar" })));
            },
        });
        nylasBookingCalendarPicker = page.rootInstance;
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('selects default calendar', async () => {
        const selectDropdownButton = page.root.shadowRoot.querySelector('select-dropdown').shadowRoot.querySelector('button');
        expect(selectDropdownButton.textContent).toBe('New Calendar');
    });
    it('selects calendar', async () => {
        const spyEvent = jest.fn();
        nylasBookingCalendarPicker.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('selectedOptionChanged', {
            detail: { value: 'another-new-calendar-id', name: 'booking-calendar' },
            bubbles: true,
            composed: true,
        });
        nylasBookingCalendarPicker.selectedOptionChangedHandler(mockEvent);
        expect(spyEvent).toHaveBeenCalled();
    });
    it('selects the first available calendar if defaultBookingCalendar is not provided', async () => {
        page = await newSpecPage({
            components: [NylasBookingCalendarPicker, SelectDropdown],
            template: () => {
                return (h("nylas-booking-calendar-picker", { name: "calendar", calendars: calendars }, h("select-dropdown", { name: "booking-calendar" })));
            },
        });
        nylasBookingCalendarPicker = page.rootInstance;
        const selectDropdownButton = page.root.shadowRoot.querySelector('select-dropdown').shadowRoot.querySelector('button');
        expect(selectDropdownButton.textContent).toBe('New Calendar');
    });
});
//# sourceMappingURL=nylas-booking-calendar-picker.spec.js.map
