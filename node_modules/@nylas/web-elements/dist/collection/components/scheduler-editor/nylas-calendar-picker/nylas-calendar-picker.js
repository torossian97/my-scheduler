var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasCalendarPicker {
    constructor() {
        this.calendars = undefined;
        this.currentUser = undefined;
        this.name = 'calendar';
        this.defaultSelectedCalendars = [];
        this.selectedCalendars = [];
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    connectedCallback() {
        debug('nylas-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-calendar-picker', 'componentDidLoad');
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.defaultSelectedCalendars.toString(), 'calendar');
        }
    }
    componentWillUpdate() {
        debug('nylas-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-calendar-picker', 'componentDidRender');
    }
    selectedOptionsChangedHandler(event) {
        debug('nylas-calendar-picker', 'selectedOptionChangedHandler', event.detail);
        const valueChangedHandler = (event) => {
            const { value } = event.detail;
            this.selectedCalendars = [...value];
            this.internals.setFormValue(value.toString(), 'calendar');
        };
        this.valueChanged.emit({ ...event.detail, name: this.name, valueChangedHandler });
    }
    render() {
        const calendarOptions = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
                selected: this.defaultSelectedCalendars?.includes(calendar.id) ||
                    (this.defaultSelectedCalendars?.includes('primary') || this.defaultSelectedCalendars?.length === 0 ? calendar.id === this.currentUser?.email : false),
            };
        }) ?? [];
        return (h(Host, null, h("div", { class: "nylas-calendar-picker", part: "ncp" }, h("div", { class: "header", part: "ncp__header" }, h("h3", null, "Calendar availability"), h("p", null, "Select calendars that you\u2019d like to use for checking your availability.")), calendarOptions.length > 0 ? (h("div", { class: "nylas-calendar-picker__dropdown" }, h("multi-select-dropdown", { name: 'calendar', label: "Select calendars that will be checked for availability", options: calendarOptions, exportparts: "msd__dropdown: ncp__dropdown, msd__dropdown-button: ncp__dropdown-button, msd__dropdown-content: ncp__dropdown-content" }, h("span", { slot: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "Check availability across one or multiple calendars. If multiple calendars are selected, you must be available across all of them to be considered available. The default is your primary calendar if none are selected.")))))) : (h("div", { class: "nylas-calendar-picker__loading" }, h("span", { class: "label" }, "Select calendars that will be checked for availability ", h("info-icon", null)), h("div", { class: "loading-button" }, h("span", null, "Loading...")))))));
    }
    static get is() { return "nylas-calendar-picker"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-calendar-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-calendar-picker.css"]
        };
    }
    static get properties() {
        return {
            "calendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The calendars to choose from."
                }
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The logged in user."
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the calendar picker."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'calendar'"
            },
            "defaultSelectedCalendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default selected calendars."
                },
                "defaultValue": "[]"
            }
        };
    }
    static get states() {
        return {
            "selectedCalendars": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected calendars change."
                },
                "complexType": {
                    "original": "{\n    value: string[];\n    name: string;\n    valueChangedHandler?: (event: CustomEvent<{ value: string[]; name: string }>) => void;\n  }",
                    "resolved": "{ value: string[]; name: string; valueChangedHandler?: ((event: CustomEvent<{ value: string[]; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "selectedOptionsChanged",
                "method": "selectedOptionsChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChangedHandler } = event.detail;
                if (valueChangedHandler) {
                    valueChangedHandler(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCalendarPicker.prototype, "render", null);
//# sourceMappingURL=nylas-calendar-picker.js.map
