var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasEventDescription {
    constructor() {
        this.selectedConfiguration = undefined;
        this.eventDescription = undefined;
        this.name = 'description';
        this.description = this.eventDescription || this.selectedConfiguration?.event_booking?.description || '';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-description', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue, oldValue);
        if (newValue?.event_booking?.description) {
            this.description = newValue?.event_booking?.description;
        }
    }
    connectedCallback() {
        debug('nylas-event-description', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-description', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-event-description', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('nylas-event-description', 'disconnectedCallback');
    }
    handleChange(event) {
        this.description = event.target.value;
        this.internals.setFormValue(event.target.value, 'description');
        this.valueChanged.emit({ value: event.target.value, name: this.name });
    }
    render() {
        return (h(Host, { key: '0a1db83797453d80a3fe368c46c7c0419751ae96' }, h("div", { key: 'cb041dfd5f60a1d6969f9dd3b66bf07a30ead95d', class: "nylas-event-description", part: "nedesc" }, h("label", { key: 'f038f2c325d054408d1c4ba2ec046d811abc1b28', htmlFor: "description" }, "Event description", h("span", { key: 'b458c9fc9a283455065612b23888cf4257f7d163', class: "label-icon" }, h("tooltip-component", { key: '556fe837419cb336758136e93b91485a7900ed43' }, h("info-icon", { key: 'ac64baf6ce1f98d924a30f5fda5457f2553201a6', slot: "tooltip-icon" }), h("span", { key: 'f7c463ba89a295e3791d1c7eadc0050b925eeeb4', slot: "tooltip-content" }, "Provide any additional details for your event.")))), h("textarea", { key: '254cca296ff7e4b92626348945834a97d0d593fd', id: "description", part: "nedesc__textarea", name: "description", value: this.description, maxlength: "8192", onInput: e => this.handleChange(e) }))));
    }
    static get is() { return "nylas-event-description"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-event-description.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-event-description.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "eventDescription": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event description stored in the configuration"
                },
                "attribute": "event-description",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the event description input."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'description'"
            }
        };
    }
    static get states() {
        return {
            "description": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the event description changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-event-description',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDescription.prototype, "render", null);
//# sourceMappingURL=nylas-event-description.js.map
