import { newSpecPage } from "@stencil/core/testing";
import { NylasLocationComponent } from "../nylas-location-component";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
describe('nylas-location-component', () => {
    let nylasLocationComponent;
    let page;
    beforeEach(async () => {
        page = await newSpecPage({
            components: [NylasLocationComponent, SelectDropdown],
            template: () => {
                return (h("nylas-location-component", { name: "location", eventLocation: "" }, h("select-dropdown", { name: "location" })));
            },
        });
        nylasLocationComponent = page.rootInstance;
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('renders location', async () => {
        const dropdown = page.root.shadowRoot.querySelector('.location-input select-dropdown');
        const button = dropdown.shadowRoot.querySelector('button');
        expect(button.textContent).toBe('None');
    });
    it('selects location', async () => {
        const spyEvent = jest.fn();
        nylasLocationComponent.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('selectedOptionChanged', {
            detail: { value: 'custom', name: 'location' },
            bubbles: true,
            composed: true,
        });
        nylasLocationComponent.selectedOptionChangedHandler(mockEvent);
        await page.waitForChanges();
        const input = page.root.shadowRoot.querySelector('.location-input input');
        input.value = 'New York';
        nylasLocationComponent.handleChange({ target: input });
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('emits valueChanged when location type changed to none', async () => {
        const spyEvent = jest.fn();
        nylasLocationComponent.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('selectedOptionChanged', {
            detail: { value: 'none', name: 'location' },
            bubbles: true,
            composed: true,
        });
        nylasLocationComponent.selectedOptionChangedHandler(mockEvent);
        expect(spyEvent).toHaveBeenCalled();
    });
});
//# sourceMappingURL=nylas-location-component.spec.js.map
