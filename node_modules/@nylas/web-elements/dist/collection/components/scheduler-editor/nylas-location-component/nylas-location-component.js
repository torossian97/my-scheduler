var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasLocationComponent {
    constructor() {
        this.name = 'location';
        this.selectedConfiguration = undefined;
        this.eventLocation = undefined;
        this.location = this.eventLocation ?? '';
        this.selectedLocationOption = this.eventLocation ? 'custom' : 'none';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-location-component', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue, oldValue);
        const configLocation = newValue?.event_booking?.location;
        if (configLocation) {
            this.selectedLocationOption = configLocation ? 'custom' : 'none';
            this.location = configLocation;
        }
    }
    eventLocationChangedHandler(newValue, oldValue) {
        debug('nylas-location-component', 'eventLocationChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.selectedLocationOption = newValue ? 'custom' : 'none';
    }
    connectedCallback() {
        debug('nylas-location-component', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-location-component', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-location-component', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('nylas-location-component', 'disconnectedCallback');
    }
    selectedOptionChangedHandler(event) {
        this.selectedLocationOption = event.detail.value;
        if (this.selectedLocationOption === 'none') {
            this.location = '';
            this.setFormValue('', 'location');
            this.valueChanged.emit({ value: '', name: this.name });
        }
    }
    setFormValue(value, name) {
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(value, name);
        }
    }
    handleChange(event) {
        this.location = event.target.value;
        this.setFormValue(event.target.value, 'location');
        this.valueChanged.emit({ value: event.target.value, name: this.name });
    }
    render() {
        const locationOptions = [
            { value: 'none', label: 'None' },
            { value: 'custom', label: 'Custom location' },
        ];
        const icons = {
            none: h("location-off-icon", { key: '575c799ee8e373f1fa305166312f3192cbb1195e' }),
            custom: h("location-icon", { key: '3e9a108a256313289846487fdb5a2c8f93bf06ea' }),
        };
        return (h(Host, { key: '8038cd624df0d63608bb23d0b52ee73d62939ba6' }, h("div", { key: '3047dfeacda102f18f0413213a86676eb1c5f901', class: "nylas-event-location", part: "nel" }, h("label", { key: '8cbf08ad544cc6dbfa21f8eca510fe7700756cbb', htmlFor: "location" }, "Location type", h("span", { key: 'b806d2ab1087c5d82674d2ba1f697ab650dfff64', class: "label-icon" }, h("tooltip-component", { key: '3a67a7eb1eed2315d46d6e81fe62314bf92226d7' }, h("info-icon", { key: '4e787698acb0d0d272c13a226747c1252741cbe9', slot: "tooltip-icon" }), h("span", { key: '85eb8db37cef3482e59124b21c968dfe4ea38fec', slot: "tooltip-content" }, "Choose how you\u2019ll meet with the participants at the scheduled time. Pick from available conferencing options or add a custom location.")))), h("div", { key: '5970b85d96f9430504846d7ff66a259b639a17d7', class: "location-input" }, h("select-dropdown", { key: 'b848b8a01563c1640a0552c385ed268e15431453', withSearch: false, name: "location", options: locationOptions, defaultSelectedOption: locationOptions.find(i => i.value == this.selectedLocationOption), exportparts: "sd__dropdown: nel__dropdown, sd__dropdown-button: nel__dropdown-button, sd__dropdown-content: nel__dropdown-content" }, h("span", { key: 'c3bf4e65c37357b12892f333a3a2a22803400e46', slot: "select-icon" }, icons[this.selectedLocationOption])), this.selectedLocationOption === 'custom' && (h("input", { type: "text", part: "nel__location", id: "location", name: "location", maxlength: "1024", value: this.location, onInput: e => this.handleChange(e) }))))));
    }
    static get is() { return "nylas-location-component"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-location-component.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-location-component.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the event location input."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'location'"
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "eventLocation": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event location stored in the configuration"
                },
                "attribute": "event-location",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "location": {},
            "selectedLocationOption": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "eventLocation",
                "methodName": "eventLocationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "selectedOptionChanged",
                "method": "selectedOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-location-component',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLocationComponent.prototype, "render", null);
//# sourceMappingURL=nylas-location-component.js.map
