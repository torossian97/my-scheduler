var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasMinCancellationNotice {
    constructor() {
        this.selectedConfiguration = undefined;
        this.minCancellationNotice = undefined;
        this.name = 'min-cancellation-notice';
        this.selectedNumber = 1;
        this.selectedPeriod = 'day';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-min-cancellation-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minCancellationNotice = newVal?.scheduler?.min_cancellation_notice;
        if (minCancellationNotice) {
            this.updateNumberAndPeriodFromMinutes(minCancellationNotice);
        }
    }
    availableDaysInFutureChanged(newValue) {
        this.updateNumberAndPeriodFromMinutes(newValue);
    }
    connectedCallback() {
        debug('nylas-min-cancellation-notice', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-min-cancellation-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-min-cancellation-notice', 'componentDidLoad');
        this.availableDaysInFutureChanged(this.minCancellationNotice ?? 1);
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(this.minCancellationNotice?.toString() ?? '1', this.name);
    }
    disconnectedCallback() {
        debug('nylas-min-cancellation-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minCancellationNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        return (h(Host, { key: '473f79ba357832c63d5af02f6123d5d8a4bbee61' }, h("div", { key: '657c38462f01c79f7e830e7758859398e776ccdb', class: "nylas-min-cancellation-notice", part: "nmcn" }, h("label", { key: '9a29a3b348cf93c9de3b7f28d05c319d64ed37c6' }, "Minimum cancellation notice", h("span", { key: 'a618468ede4da9c28ec941ab4b76551cff980d8a', class: "label-icon" }, h("tooltip-component", { key: 'a44b3a7327721e17884840a9124f7c27249f050c' }, h("info-icon", { key: '177c2db8b4f868e23f5e59a08a335a1bbf4e5316', slot: "tooltip-icon" }), h("span", { key: '843ca3f89854fb398717e8fab9c54b124ef93a46', slot: "tooltip-content" }, "Set the minimum amount of time required to cancel an event.")))), h("time-period-selector", { key: '74b22ae97313a1a096d1c5ef6c791507e98da099', id: "min-cancellation-notice", exportparts: "tps__number-dropdown: nmcn__number-dropdown, tps__number-dropdown-button: nmcn__number-dropdown-button, tps__number-dropdown-content: nmcn__number-dropdown-content, tps__period-dropdown: nmcn__period-dropdown, tps__period-dropdown-button: nmcn__period-dropdown-button, tps__period-dropdown-content: nmcn__period-dropdown-content", timePeriods: ['minute', 'hour', 'day', 'week'], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod }))));
    }
    static get is() { return "nylas-min-cancellation-notice"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-min-cancellation-notice.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-min-cancellation-notice.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "minCancellationNotice": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The minimum cancellation notice stored in the configuration"
                },
                "attribute": "min-cancellation-notice",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the min cancellation notice input."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'min-cancellation-notice'"
            }
        };
    }
    static get states() {
        return {
            "selectedNumber": {},
            "selectedPeriod": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "availableDaysInFuture",
                "methodName": "availableDaysInFutureChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "timePeriodChanged",
                "method": "timePeriodChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-min-cancellation-notice',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMinCancellationNotice.prototype, "render", null);
//# sourceMappingURL=nylas-min-cancellation-notice.js.map
