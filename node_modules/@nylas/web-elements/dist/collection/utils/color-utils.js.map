{"version":3,"file":"color-utils.js","sourceRoot":"","sources":["../../src/utils/color-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from './utils';\n\nexport function hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null;\n}\n\nexport function rgbToHex(r: number, g: number, b: number): string {\n  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n}\n\nexport function invertColor(color: string): string {\n  if (!window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    return color;\n  }\n\n  if (!color) {\n    return color;\n  }\n\n  // Skip transparent colors\n  if (color === 'transparent') {\n    return 'color';\n  }\n\n  // Check for Hexadecimal colors (including short hex like #fff) or #f6f7f8\n  if (color.startsWith('#')) {\n    return invertHexColor(color);\n  }\n\n  // Check for RGB and RGBA colors\n  if (color.startsWith('rgb')) {\n    return invertRgbColor(color);\n  }\n\n  // Check for HSL and HSLA colors\n  if (color.startsWith('hsl')) {\n    return invertHslColor(color);\n  }\n\n  // Check for named colors\n  if (isNamedColor(color)) {\n    return invertNamedColor(color);\n  }\n\n  return color;\n}\n\nfunction invertHexColor(hex: string): string {\n  if (hex.length < 7) {\n    hex = '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3]; // Convert #abc to #aabbcc\n  }\n  const r = (255 - parseInt(hex.slice(1, 3), 16)).toString(16).padStart(2, '0');\n  const g = (255 - parseInt(hex.slice(3, 5), 16)).toString(16).padStart(2, '0');\n  const b = (255 - parseInt(hex.slice(5, 7), 16)).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n\nfunction invertRgbColor(rgb: string): string {\n  const match = rgb.match(/\\d+/g)?.map(Number);\n  if (!match) {\n    return rgb;\n  }\n  const [r, g, b] = match;\n  return `rgb(${255 - r}, ${255 - g}, ${255 - b})`;\n}\n\nfunction invertHslColor(hsl: string): string {\n  const match = hsl.match(/\\d+\\.?\\d*/g)?.map(Number);\n  if (!match) {\n    return hsl;\n  }\n  const [h, s, l] = match;\n  return `hsl(${h}, ${s}%, ${100 - l}%)`;\n}\n\nfunction isNamedColor(color: string): boolean {\n  // This function needs to check against a list of named colors.\n  // For simplicity, let's assume it's a known named color.\n  return /^[a-z]+$/i.test(color);\n}\n\nfunction invertNamedColor(color: string): string {\n  // This requires converting the named color to RGB, inverting it, and converting back.\n  // This is a placeholder and would need a full mapping of color names to RGB values.\n  // Assuming the function `namedColorToRgb` exists to convert named colors to RGB:\n  return invertRgbColor(namedColorToRgb(color));\n}\n\nfunction namedColorToRgb(color: string): string {\n  // Convert named colors to their RGB representation.\n  // This is a placeholder. A full implementation would need a mapping from color names to RGB.\n  // Assuming 'red' is passed, it returns its RGB representation:\n  if (color.toLowerCase() === 'red') {\n    return 'rgb(255, 0, 0)';\n  }\n  return 'rgb(0, 0, 0)'; // Default for unknown colors\n}\n\nexport function transformElement(element: Element) {\n  if (element instanceof HTMLStyleElement) {\n    // Check if the border color is set via any valid css property\n    let styleTextContent = element.textContent;\n\n    if (styleTextContent) {\n      // Remove any prefer-color-scheme media queries\n      styleTextContent = styleTextContent.replaceAll(/@media\\s*\\(prefers-color-scheme:\\s*(dark|light)\\)\\s*\\{([^}]+)\\}/g, '');\n\n      // Match border-color: #000000; or border-color: #000000 !important;\n      const borderColor = styleTextContent.matchAll(/border-color:\\s*([^;]+)/g);\n      if (borderColor) {\n        for (const match of borderColor) {\n          // Split border-color into it's part\n          const [fullMatch, color] = match;\n\n          // Regex escaped fullMatch\n          const escapedFullMatch = fullMatch.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n          // Replace the colour in the fullMatch\n          styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));\n        }\n      }\n\n      // Match border: 1px solid #000000; or border: 1px solid #000000 !important;\n      const border = styleTextContent.matchAll(/border:\\s*([^;]+)/g);\n      if (border) {\n        for (const match of border) {\n          // Get the full match\n          const fullMatch = match[0].trim();\n\n          // Regex escaped fullMatch\n          const escapedFullMatch = fullMatch.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n          // Split the border property into its parts deconstructing the array\n          const [_width, _style, color] = match[1].split(' ');\n\n          // Replace the colour in the fullMatch\n          styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));\n        }\n      }\n\n      // Match background-color: #000000; or background-color: #000000 !important; but nothing after the ; or ;\n      const backgroundColor = styleTextContent.matchAll(/background-color:\\s*([^;]+)/g);\n      if (backgroundColor) {\n        for (const match of backgroundColor) {\n          // Split border-color into it's part\n          const [fullMatch, color] = match;\n\n          // Regex escaped fullMatch\n          const escapedFullMatch = fullMatch.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n          // Replace the colour in the fullMatch\n          styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));\n\n          debug('backgroundColor', { fullMatch, replace: fullMatch.replace(color, invertColor(color)), color, invertColor: invertColor(color) });\n        }\n      }\n\n      // Match background: #000000; or background: #000000 !important;\n      const background = styleTextContent.matchAll(/background:\\s*([^;]+)/g);\n      if (background) {\n        for (const match of background) {\n          // Get the full match\n          const fullMatch = match[0].trim();\n\n          // Regex escaped fullMatch\n          const escapedFullMatch = fullMatch.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n          // Split the border property into its parts deconstructing the array\n          const [_width, _style, color] = match[1].split(' ');\n\n          // Replace the colour in the fullMatch\n          styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));\n        }\n      }\n\n      // Match color: #000000; or color: #000000 !important;\n      const color = styleTextContent.matchAll(/color:\\s*([^;]+)/g);\n      if (color) {\n        for (const match of color) {\n          // Split border-color into it's part\n          const [fullMatch, color] = match;\n\n          // Regex escaped fullMatch\n          const escapedFullMatch = fullMatch.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n          // Replace the colour in the fullMatch\n          styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));\n        }\n      }\n\n      element.textContent = styleTextContent;\n    }\n  }\n\n  if (element instanceof HTMLElement) {\n    const computedStyle = window.getComputedStyle(element);\n    const color = computedStyle.color || element.style.color;\n    const backgroundColor = computedStyle.backgroundColor || element.style.backgroundColor;\n    const borderColor = computedStyle.borderColor || element.style.borderColor;\n\n    if (color && !backgroundColor) {\n      element.style.color = '';\n    } else if (color && backgroundColor) {\n      element.style.color = invertColor(color);\n      element.style.backgroundColor = invertColor(backgroundColor);\n      debug('element', element);\n      debug('computedStyle.color', color);\n      debug('computedStyle.backgroundColor', backgroundColor);\n      debug('invertColor(color)', invertColor(color));\n      debug('invertColor(backgroundColor)', invertColor(backgroundColor));\n    } else if (!color && backgroundColor) {\n      // Remove the background color if there is no text color\n      element.style.backgroundColor = '';\n    }\n\n    if (borderColor) {\n      debug('borderColor', borderColor);\n      element.style.borderColor = invertColor(borderColor);\n    }\n\n    if (element.hasAttribute('bgcolor')) {\n      element.removeAttribute('bgcolor');\n    }\n  }\n}\n\nexport function processStyles(root: HTMLElement): void {\n  // Transform the root element\n  transformElement(root);\n\n  const elements = root.querySelectorAll('*');\n  elements.forEach(element => transformElement(element));\n}\n"]}