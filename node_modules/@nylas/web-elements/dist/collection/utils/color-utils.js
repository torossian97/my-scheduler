import { debug } from "./utils";
export function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
export function rgbToHex(r, g, b) {
    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
}
export function invertColor(color) {
    if (!window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return color;
    }
    if (!color) {
        return color;
    }
    if (color === 'transparent') {
        return 'color';
    }
    if (color.startsWith('#')) {
        return invertHexColor(color);
    }
    if (color.startsWith('rgb')) {
        return invertRgbColor(color);
    }
    if (color.startsWith('hsl')) {
        return invertHslColor(color);
    }
    if (isNamedColor(color)) {
        return invertNamedColor(color);
    }
    return color;
}
function invertHexColor(hex) {
    if (hex.length < 7) {
        hex = '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
    }
    const r = (255 - parseInt(hex.slice(1, 3), 16)).toString(16).padStart(2, '0');
    const g = (255 - parseInt(hex.slice(3, 5), 16)).toString(16).padStart(2, '0');
    const b = (255 - parseInt(hex.slice(5, 7), 16)).toString(16).padStart(2, '0');
    return `#${r}${g}${b}`;
}
function invertRgbColor(rgb) {
    const match = rgb.match(/\d+/g)?.map(Number);
    if (!match) {
        return rgb;
    }
    const [r, g, b] = match;
    return `rgb(${255 - r}, ${255 - g}, ${255 - b})`;
}
function invertHslColor(hsl) {
    const match = hsl.match(/\d+\.?\d*/g)?.map(Number);
    if (!match) {
        return hsl;
    }
    const [h, s, l] = match;
    return `hsl(${h}, ${s}%, ${100 - l}%)`;
}
function isNamedColor(color) {
    return /^[a-z]+$/i.test(color);
}
function invertNamedColor(color) {
    return invertRgbColor(namedColorToRgb(color));
}
function namedColorToRgb(color) {
    if (color.toLowerCase() === 'red') {
        return 'rgb(255, 0, 0)';
    }
    return 'rgb(0, 0, 0)';
}
export function transformElement(element) {
    if (element instanceof HTMLStyleElement) {
        let styleTextContent = element.textContent;
        if (styleTextContent) {
            styleTextContent = styleTextContent.replaceAll(/@media\s*\(prefers-color-scheme:\s*(dark|light)\)\s*\{([^}]+)\}/g, '');
            const borderColor = styleTextContent.matchAll(/border-color:\s*([^;]+)/g);
            if (borderColor) {
                for (const match of borderColor) {
                    const [fullMatch, color] = match;
                    const escapedFullMatch = fullMatch.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
                    styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));
                }
            }
            const border = styleTextContent.matchAll(/border:\s*([^;]+)/g);
            if (border) {
                for (const match of border) {
                    const fullMatch = match[0].trim();
                    const escapedFullMatch = fullMatch.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
                    const [_width, _style, color] = match[1].split(' ');
                    styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));
                }
            }
            const backgroundColor = styleTextContent.matchAll(/background-color:\s*([^;]+)/g);
            if (backgroundColor) {
                for (const match of backgroundColor) {
                    const [fullMatch, color] = match;
                    const escapedFullMatch = fullMatch.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
                    styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));
                    debug('backgroundColor', { fullMatch, replace: fullMatch.replace(color, invertColor(color)), color, invertColor: invertColor(color) });
                }
            }
            const background = styleTextContent.matchAll(/background:\s*([^;]+)/g);
            if (background) {
                for (const match of background) {
                    const fullMatch = match[0].trim();
                    const escapedFullMatch = fullMatch.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
                    const [_width, _style, color] = match[1].split(' ');
                    styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));
                }
            }
            const color = styleTextContent.matchAll(/color:\s*([^;]+)/g);
            if (color) {
                for (const match of color) {
                    const [fullMatch, color] = match;
                    const escapedFullMatch = fullMatch.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
                    styleTextContent = styleTextContent.replaceAll(escapedFullMatch, fullMatch.replace(color, invertColor(color)));
                }
            }
            element.textContent = styleTextContent;
        }
    }
    if (element instanceof HTMLElement) {
        const computedStyle = window.getComputedStyle(element);
        const color = computedStyle.color || element.style.color;
        const backgroundColor = computedStyle.backgroundColor || element.style.backgroundColor;
        const borderColor = computedStyle.borderColor || element.style.borderColor;
        if (color && !backgroundColor) {
            element.style.color = '';
        }
        else if (color && backgroundColor) {
            element.style.color = invertColor(color);
            element.style.backgroundColor = invertColor(backgroundColor);
            debug('element', element);
            debug('computedStyle.color', color);
            debug('computedStyle.backgroundColor', backgroundColor);
            debug('invertColor(color)', invertColor(color));
            debug('invertColor(backgroundColor)', invertColor(backgroundColor));
        }
        else if (!color && backgroundColor) {
            element.style.backgroundColor = '';
        }
        if (borderColor) {
            debug('borderColor', borderColor);
            element.style.borderColor = invertColor(borderColor);
        }
        if (element.hasAttribute('bgcolor')) {
            element.removeAttribute('bgcolor');
        }
    }
}
export function processStyles(root) {
    transformElement(root);
    const elements = root.querySelectorAll('*');
    elements.forEach(element => transformElement(element));
}
//# sourceMappingURL=color-utils.js.map
