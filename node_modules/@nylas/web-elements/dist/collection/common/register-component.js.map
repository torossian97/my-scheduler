{"version":3,"file":"register-component.js","sourceRoot":"","sources":["../../src/common/register-component.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseNylasConnectorInterface } from '@/connector/connector-interface';\nimport { debug, error } from '@/utils/utils';\nimport { ComponentInterface, getElement } from '@stencil/core';\nimport { CombinedStoreStateKeys, EventEmitterEventType, ExtractEventEmitterKeys, ExtractEventEmitterProperties } from './types';\nexport interface RegisteredComponent<H extends ComponentInterface, B extends BaseNylasConnectorInterface, MailboxStores = string> {\n  name: string;\n  element: HTMLElement;\n  getStoresToProp?: keyof H;\n  storeToProps?: Map<string, keyof H>;\n  stateToProps?: Map<MailboxStores, keyof H>;\n  eventToProps?: Map<ExtractEventEmitterKeys<H>, (event: CustomEvent<EventEmitterEventType<H[ExtractEventEmitterKeys<H>]>>, nylasConnector: B) => Promise<void>>;\n  localPropsToProp?: Map<string, keyof H>;\n  authToProp?: keyof H;\n  connectorToProp?: keyof H;\n  registrationEventName?: string;\n  unregistrationEventName?: string;\n}\n\nexport function createComponentEvent<T extends ComponentInterface, B extends BaseNylasConnectorInterface>(\n  instance: T,\n  registeredComponent: RegisteredComponent<T, B>,\n  eventName: string = 'registerComponent',\n) {\n  return new CustomEvent<RegisteredComponent<typeof instance, B>>(eventName, {\n    bubbles: true,\n    composed: true,\n    detail: registeredComponent,\n  });\n}\n\nexport function unregisterComponentEvent<T extends ComponentInterface, B extends BaseNylasConnectorInterface>(\n  instance: T,\n  registeredComponent: RegisteredComponent<T, B>,\n  eventName: string = 'unregisterComponent',\n) {\n  return new CustomEvent<RegisteredComponent<typeof instance, B>>(eventName, {\n    bubbles: true,\n    composed: true,\n    detail: registeredComponent,\n  });\n}\n\nexport interface RegisterComponentConfig<H extends ComponentInterface, B extends BaseNylasConnectorInterface, MailboxStores>\n  extends Omit<RegisteredComponent<H, B, MailboxStores>, 'eventToProps' | 'name' | 'element'> {\n  name: string;\n  eventToProps?: Partial<{\n    [P in ExtractEventEmitterProperties<H> as P['key']]: (event: CustomEvent<P['eventType']>, nylasConnector: B) => Promise<void>;\n  }>;\n  fireRegisterEvent?: boolean;\n}\n\nexport interface NylasComponentInterface extends ComponentInterface {\n  authToProp?: keyof this;\n  connectorToProp?: keyof this;\n}\n\nexport function RegisterComponent<H extends NylasComponentInterface, B extends BaseNylasConnectorInterface, MailboxStores extends Record<string, any>>(\n  config: RegisterComponentConfig<H, B, CombinedStoreStateKeys<keyof MailboxStores, MailboxStores>>,\n) {\n  return (target: H, propKey: string) => {\n    const componentName = config.name;\n    debug(`[${componentName}] Registering component ${componentName} being called on ${propKey}`);\n\n    const origionalCallback = target.componentWillLoad;\n    if (!origionalCallback) {\n      error(`[${componentName}] componentWillLoad lifecycle method in ${componentName} missing. Required for RegisterComponent decorator.`);\n      return;\n    }\n\n    const origionalConnectCallback = target.connectedCallback;\n    if (!origionalConnectCallback) {\n      error(`[${componentName}] connectedCallback lifecycle method in ${componentName} missing. Required for RegisterComponent decorator.`);\n      return;\n    }\n\n    const origionalDisconnectCallback = target.disconnectedCallback;\n    if (!origionalDisconnectCallback) {\n      error(`[${componentName}] disconnectedCallback lifecycle method in ${componentName} missing. Required for RegisterComponent decorator.`);\n      return;\n    }\n\n    // Detect a conflict if config.storeToProps and config.stateToProps are both defined\n    // for overlapping prop keys\n    if (config.storeToProps && config.stateToProps) {\n      const storeToPropsKeys = Array.from(config.storeToProps.values());\n      const stateToPropsKeys = Array.from(config.stateToProps.values());\n      const intersection = storeToPropsKeys.filter(key => stateToPropsKeys.includes(key));\n      if (intersection.length > 0) {\n        error(\n          `[${componentName}] Overlapping prop keys detected in ${componentName} for storeToProps and stateToProps. Make sure to only define them once. Overlapping keys: ${intersection.join(\n            ', ',\n          )}`,\n        );\n        return;\n      }\n    }\n\n    // Convert the record of eventToProps to a map\n    const eventToPropsMap = new Map<ExtractEventEmitterKeys<H>, (event: CustomEvent<EventEmitterEventType<H[ExtractEventEmitterKeys<H>]>>, nylasConnector: B) => Promise<void>>();\n    if (config.eventToProps) {\n      Object.keys(config.eventToProps).forEach(key => {\n        eventToPropsMap.set(\n          key as ExtractEventEmitterKeys<H>,\n          config.eventToProps?.[key as ExtractEventEmitterKeys<H>] as (\n            event: CustomEvent<EventEmitterEventType<H[ExtractEventEmitterKeys<H>]>>,\n            nylasConnector: B,\n          ) => Promise<void>,\n        );\n      });\n    }\n\n    target.connectedCallback = function () {\n      debug(`[~${componentName}] connectedCallback called`);\n      const origionalResult = origionalConnectCallback?.call(this);\n      const host = getElement(this);\n\n      // If the nylas id is already set, then we don't need to do anything\n      if (host.dataset.nylasId) {\n        return origionalResult;\n      }\n\n      Object.defineProperty(host, 'registerNylasComponent', {\n        get() {\n          return true;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'stateToProps', {\n        get() {\n          return config.stateToProps;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'getStoresToProp', {\n        get() {\n          return config.getStoresToProp;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'storeToProps', {\n        get() {\n          return config.storeToProps;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'eventToProps', {\n        get() {\n          return eventToPropsMap;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'authToProp', {\n        get() {\n          return config.authToProp;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'connectorToProp', {\n        get() {\n          return config.connectorToProp;\n        },\n        enumerable: true,\n      });\n      Object.defineProperty(host, 'localPropsToProp', {\n        get() {\n          return config.localPropsToProp;\n        },\n        enumerable: true,\n      });\n      return origionalResult;\n    };\n\n    if (config.fireRegisterEvent) {\n      target.componentWillLoad = function () {\n        const origionalResult = origionalCallback?.call(this);\n        const host = getElement(this);\n\n        // We use our host element to dispatch a registration event that is picked up by the\n        // the nylas-provider component.\n        const registeredComponent: RegisteredComponent<H, B> = {\n          element: host,\n          ...config,\n          eventToProps: eventToPropsMap,\n        };\n        const event = createComponentEvent(target, registeredComponent, config.registrationEventName);\n        if (host.dispatchEvent(event)) {\n          debug(`[${componentName}] Component ${componentName} successfully fired registration event`);\n        }\n\n        return origionalResult;\n      };\n\n      target.disconnectedCallback = function () {\n        const origionalResult = origionalDisconnectCallback?.call(this);\n        const host = getElement(this);\n\n        // We use our host element to dispatch a registration event that is picked up by the\n        // the nylas-provider component.\n        const registeredComponent: RegisteredComponent<H, B> = {\n          element: host,\n          ...config,\n          eventToProps: eventToPropsMap,\n        };\n        const event = unregisterComponentEvent(target, registeredComponent, config.unregistrationEventName);\n        if (host.dispatchEvent(event)) {\n          debug(`[${componentName}] Component ${componentName} successfully fired unregistration event`);\n        }\n\n        return origionalResult;\n      };\n    }\n  };\n}\n"]}