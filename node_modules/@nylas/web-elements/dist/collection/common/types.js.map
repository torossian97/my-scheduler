{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/common/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Message, NylasErrorResponse } from '@nylas/core';\nimport { EventEmitter } from '@stencil/core';\n\nexport type DataState = 'loading' | 'ready';\n\ntype StoresType = unknown;\ntype StoreInstances = {\n  [K in keyof StoresType]: StoresType[K];\n};\ntype StoreStateKeys<T> = T extends { state: infer S } ? keyof S : never;\n\n/**\n * This type is used to create a union of all possible store state keys.\n * Example:\n * type CombinedStoreStateKeys = \"nylas.messages\" | \"nylasTheme.colour\"\n */\nexport type CombinedStoreStateKeys<SK extends keyof S, S = StoreInstances> = {\n  [StoreKey in SK]: StoreStateKeys<S[StoreKey]> extends never | undefined ? never : `${StoreKey & string}.${StoreStateKeys<S[StoreKey]> & string}`;\n}[SK];\n\nexport type InternalMessage = {\n  id: string;\n  data: Message;\n  collapse: boolean;\n  showContactData: boolean;\n};\n\nexport type InternalAttachment = {\n  blob: Blob;\n  filename: string;\n  contentType: string;\n  size: number;\n  messageId: string;\n};\n\nexport type MethodKeys<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\n// TODO: Move this to @nylas/core\nexport type AvailabilityTimeslot = {\n  emails: string[];\n  start_time: number;\n  end_time: number;\n};\n\nexport type AvailabilityResponse = {\n  time_slots: AvailabilityTimeslot[];\n  participants: {\n    email: string;\n    name: string;\n  }[];\n  duration: number;\n};\n\nexport type UISettingsResponse = {\n  scheduler: {\n    available_days_in_future: number;\n    min_cancellation_notice: number;\n  };\n  organizer: {\n    name: string;\n    email: string;\n  };\n};\n\n// Extracts a mapped type with keys of T that are EventEmitters, and their corresponding types\nexport type ExtractEventEmitterKeys<T> = {\n  [K in keyof T]: T[K] extends EventEmitter<any> ? K : never;\n}[keyof T];\n\n// Extracts the event type from an EventEmitter\nexport type EventEmitterEventType<T> = T extends EventEmitter<infer U> ? U : never;\n\n// Extracts a mapped type with keys of T that are EventEmitters, and their corresponding types\nexport type ExtractEventEmitterProperties<T> = {\n  [K in keyof T]: T[K] extends EventEmitter<infer U> ? { key: K; eventType: U } : never;\n}[keyof T];\n\nexport type NylasEvent = {\n  booking_id: string;\n  organizer: {\n    email: string;\n    name: string;\n    is_organizer?: boolean;\n  };\n  title: string;\n  description: string;\n  status: string;\n};\n\nexport type DataResponseError = Exclude<NylasErrorResponse['error'], undefined>;\nexport type DataResponseReturnType<T = any> = [T, null] | [null, DataResponseError];\n"]}