{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../src/common/constants.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAErC,MAAM,CAAC,MAAM,YAAY,GAErB;IACF,OAAO,EAAE,SAAS;CACnB,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAErB,CAAC,GAAG,EAAE;IAER,MAAM,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;IAEpC,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAA8B,EAAE,QAAgB,EAAE,EAAE;QAC3E,GAAG,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC/C,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACjD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,UAAU,iBAAiB,CAAC,QAAgB;IAChD,OAAO,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC;QACE,KAAK,EAAE,UAAU;QACjB,KAAK,EAAE,YAAY;QACnB,WAAW,EAAE,kCAAkC;KAChD;IACD;QACE,KAAK,EAAE,gBAAgB;QACvB,KAAK,EAAE,kBAAkB;QACzB,WAAW,EAAE,mCAAmC;KACjD;IAMD;QACE,KAAK,EAAE,WAAW;QAClB,KAAK,EAAE,aAAa;QACpB,WAAW,EAAE,kCAAkC;KAChD;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAgB;IAC7C;QACE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrB,QAAQ,EAAE,EAAE;QACZ,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ;QAC1D,KAAK,EAAE,OAAO;QACd,GAAG,EAAE,OAAO;KACb;CACF,CAAC","sourcesContent":["import { OpenHours } from '@nylas/core';\nimport moment from 'moment-timezone';\n\nexport const LANGUAGE_MAP: {\n  [key: Navigator['language']]: string;\n} = {\n  'en-US': 'English',\n};\n\nexport const TIMEZONE_MAP: {\n  [key: string]: string;\n} = (() => {\n  // List of all time zone names known to the Intl API\n  const timeZones = moment.tz.names();\n\n  return timeZones.reduce((acc: { [key: string]: string }, timeZone: string) => {\n    acc[timeZone] = timeZone.replace(/\\//g, ' / ');\n    acc[timeZone] = acc[timeZone].replace(/_/g, ' ');\n    return acc;\n  }, {});\n})();\n\nexport function getTimezoneOffset(timezone: string): string {\n  return moment.tz(timezone).format('Z');\n}\n\nexport const EVENT_TITLE_TOKENS = [\n  {\n    token: '$invitee',\n    value: '${invitee}',\n    description: 'The name of the primary invitee.',\n  },\n  {\n    token: '$invitee_email',\n    value: '${invitee_email}',\n    description: 'The email of the primary invitee.',\n  },\n  // {\n  //   token: '$all_invitee_emails',\n  //   value: '${all_invitee_emails}',\n  //   description: 'The email of primary invitee and any additional guest emails.',\n  // },\n  {\n    token: '$duration',\n    value: '${duration}',\n    description: 'The length in time of the event.',\n  },\n];\n\nexport const DEFAULT_OPEN_HOURS: OpenHours[] = [\n  {\n    days: [1, 2, 3, 4, 5],\n    ex_dates: [],\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    start: '09:00',\n    end: '17:00',\n  },\n];\n"]}