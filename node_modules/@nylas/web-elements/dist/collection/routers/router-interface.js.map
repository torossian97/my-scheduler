{"version":3,"file":"router-interface.js","sourceRoot":"","sources":["../../src/routers/router-interface.ts"],"names":[],"mappings":"","sourcesContent":["export type RoutePath = string;\n// RouteParams is a type that takes a RoutePath and returns an object with the route params as keys\n// and the value of the route param as the value of the key\n// Example:\n//   RoutePath: '/:mailboxId/:messageId'\nexport type RouteParams<Path extends string> = Path extends `${infer _Start}:${infer Param}/${infer Rest}`\n  ? { [key in Param | keyof RouteParams<Rest>]: string }\n  : Path extends `${infer _Start}:${infer Param}`\n    ? { [key in Param]: string }\n    : {};\nexport type RouteListener<Path extends string> = (route: Path, path: string, routeParams: RouteParams<Path>) => Promise<void>;\n\nexport interface RouterInterface {\n  init(): void;\n  addRouteChangeListener<Path extends RoutePath>(route: Path, listener: RouteListener<Path>): void;\n  setRoute(route: string): void;\n  navigate(route: string, shallow: boolean): void;\n  getRoute(): string;\n  getBasePath(): string;\n  matchRoute(route: string, path: string): boolean;\n}\n"]}