{"version":3,"file":"hash-router.js","sourceRoot":"","sources":["../../src/routers/hash-router.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from '@/utils/utils';\nimport { RouteListener, RouteParams, RoutePath, RouterInterface } from './router-interface';\n\nexport class PolyFillHashChangeEvent extends Event {\n  oldURL?: string;\n  newURL?: string;\n\n  constructor(type: string, eventInitDict: HashChangeEventInit) {\n    super(type, eventInitDict);\n    this.oldURL = eventInitDict.oldURL;\n    this.newURL = eventInitDict.newURL;\n  }\n}\n\nexport class HashRouter implements RouterInterface {\n  private routeChangeListeners: [route: RoutePath, RouteListener<any>][] = [];\n\n  constructor() {\n    debug('HashRouter constructor');\n  }\n\n  // Destroy the router\n  public destroy(): void {\n    debug('HashRouter destroy');\n    window.removeEventListener('hashchange', this.onRouteChange.bind(this));\n  }\n\n  // Initialize the router\n  public init(): void {\n    debug('HashRouter init');\n    window.addEventListener('hashchange', this.onRouteChange.bind(this));\n\n    // Trigger the initial route change\n    if (typeof HashChangeEvent !== 'undefined') {\n      const event: HashChangeEvent = new HashChangeEvent('hashchange', { oldURL: '', newURL: window.location.href });\n      this.onRouteChange(event);\n    } else {\n      const event: Event = new PolyFillHashChangeEvent('hashchange', { oldURL: '', newURL: window.location.href });\n      this.onRouteChange(event as HashChangeEvent);\n    }\n  }\n\n  public addRouteChangeListener<Path extends RoutePath>(route: Path, listener: RouteListener<Path>): void {\n    debug('HashRouter addRouteChangeListener');\n    this.routeChangeListeners.push([route, listener]);\n  }\n\n  public navigate(route: string, shallow: boolean): void {\n    debug('HashRouter navigate');\n\n    // If we're navigating shallow, don't add a new history entry\n    if (shallow) {\n      return window.history.pushState(null, '', `#${route}`);\n    }\n\n    window.location.hash = route;\n  }\n\n  public setRoute(route: string): void {\n    debug('HashRouter setRoute');\n    window.location.hash = route;\n  }\n\n  // Matches a route and executes the callback\n  public matchRoute(route: string, path: string): boolean {\n    const routeParts = route.split('/');\n    const pathParts = path.split('/');\n\n    // If the route is `/` an the hash is empty, match the route\n    debug(`HashRouter matchRoute route=${route} path=${path}`, { routeParts, pathParts });\n    if (routeParts[1] === '' && pathParts[0] === '') {\n      return true;\n    }\n\n    if (routeParts.length !== pathParts.length) {\n      return false;\n    }\n\n    for (let i = 0; i < routeParts.length; i++) {\n      const routePart = routeParts[i];\n      const pathPart = pathParts[i];\n      if (routePart.startsWith(':')) {\n        continue;\n      }\n      if (routePart !== pathPart) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Parse the route and return the route params\n  public getRouteParams<Path extends RoutePath>(route: Path): RouteParams<Path> {\n    debug('HashRouter getRouteParams');\n    const routeParams: RouteParams<Path> = {} as RouteParams<Path>;\n    const routeParts = route.split('/');\n    const routeConfigParts = window.location.hash.split('/');\n    routeParts.forEach((routePart, index) => {\n      if (routePart.startsWith(':')) {\n        const key = routePart.substring(1) as keyof RouteParams<Path>;\n        routeParams[key] = routeConfigParts[index] as RouteParams<Path>[keyof RouteParams<Path>]; // Cast the value to string\n      }\n    });\n    return routeParams;\n  }\n\n  public getRouteWithParams(route: string, routeParams: Record<string, any>): string {\n    debug('HashRouter getRouteWithParams');\n    let routeWithParams = route;\n    Object.keys(routeParams).forEach(key => {\n      routeWithParams = routeWithParams.replace(`:${key}`, routeParams[key]);\n    });\n    return routeWithParams;\n  }\n\n  public getRoute(): string {\n    debug('HashRouter getRoute');\n    return window.location.hash;\n  }\n\n  public onRouteChange(event: HashChangeEvent): void {\n    this.routeChangeListeners.forEach(async ([route, listener]) => {\n      const path = event.newURL.indexOf('#') === -1 ? '' : event.newURL.substring(event.newURL.indexOf('#') + 1);\n      debug(`HashRouter onRouteChange route=${route} path=${path}`, { event });\n      if (!this.matchRoute(route, path)) {\n        debug(`HashRouter onRouteChange route=${route} path=${path} does not match`);\n        return;\n      }\n      const routeParams = this.getRouteParams(route) as RouteParams<RoutePath>;\n      await listener(route, path, routeParams);\n    });\n  }\n\n  public getBasePath(): string {\n    debug('HashRouter getBasePath');\n    return '';\n  }\n}\n"]}