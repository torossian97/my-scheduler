{"file":"nylas-mailbox-toolbar-button.entry.cjs.js","mappings":"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","names":["debug","h","Host","RegisterComponent"],"sources":["src/components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button.scss?tag=nylas-mailbox-toolbar-button&encapsulation=shadow","src/components/mailbox/nylas-mailbox-toolbar-button/nylas-mailbox-toolbar-button.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nsp-button {\n  border-radius: var(--nylas-border-radius);\n  background-color: var(--nylas-color-primary-400);\n  color: var(--nylas-color-primary-900);\n  fill: var(--nylas-color-primary-900);\n\n  &:hover {\n    background-color: var(--nylas-color-primary-500);\n  }\n\n  &:disabled {\n    background-color: var(--nylas-color-primary-200);\n    color: var(--nylas-color-primary-600);\n    cursor: not-allowed;\n  }\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { MethodKeys } from '@/common/types';\nimport { NylasMailboxConnectorInterface } from '@/connector/connector-interface';\nimport { debug } from '@/utils/utils';\nimport { Component, Element, Host, Prop, h } from '@stencil/core';\nimport { ObservableMap } from '@stencil/store';\n\nexport type Stores = Record<string, ObservableMap<any>>;\nexport type PublicMethodsOfNylasMailboxConnector = Pick<NylasMailboxConnectorInterface, MethodKeys<NylasMailboxConnectorInterface>>;\nexport type PropertyPaths<T> = T extends object\n  ? {\n      [K in keyof T]: T[K] extends Function ? `${K & string}` : `${K & string}.${PropertyPaths<T[K]>}`;\n    }[keyof T]\n  : '';\nexport type MethodsOfNylasMailboxConnector = PropertyPaths<NylasMailboxConnectorInterface>;\n\n@Component({\n  tag: 'nylas-mailbox-toolbar-button',\n  styleUrl: 'nylas-mailbox-toolbar-button.scss',\n  shadow: true,\n})\nexport class NylasMailboxToolbarButton {\n  @Element() private host!: HTMLNylasMailboxToolbarButtonElement;\n\n  /**\n   * The name of the mailbox connector method to call.\n   */\n  @Prop({ attribute: 'method' }) readonly method!: MethodsOfNylasMailboxConnector;\n\n  /**\n   * The value of the state to compare against to check if the data is loading, error, or ready.\n   */\n  @Prop({ attribute: 'data-state' }) readonly dataState?: string;\n\n  /**\n   * If true, then the component will render the icon only.\n   */\n  @Prop() readonly iconOnly: boolean = false;\n\n  /**\n   * If true, then the component will render if the state is true.\n   * This prop is used with the `state` prop.\n   */\n  @Prop() readonly mailboxConnector?: NylasMailboxConnectorInterface;\n\n  constructor() {}\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-if-state] Component will load`);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-if-state] Component did load`);\n  }\n\n  /**\n   * The click handler for the button.\n   */\n  private onClick = async () => {\n    const method = this.method as unknown as string;\n    debug(`[nylas-mailbox-toolbar-button] onClick`, { method, mailboxConnector: this.mailboxConnector });\n    if (this.mailboxConnector && method) {\n      const methodToCall = this.callMethod(this.mailboxConnector, method);\n      if (methodToCall) {\n        await methodToCall();\n      }\n    }\n  };\n\n  /**\n   * Traverses the object to find the method.\n   * @param obj The object to traverse.\n   * @param accessString The string to access the method.\n   * @returns The method if it exists, undefined otherwise.\n   */\n  private callMethod(obj: any, accessString: string): (() => void) | undefined {\n    // Split the string into parts\n    const parts = accessString.split('.');\n\n    // Traverse the object to find the method\n    let current = obj;\n    for (const part of parts.slice(0, -1)) {\n      current = current[part];\n      if (!current) {\n        return undefined;\n      }\n    }\n\n    // Get the method\n    const methodName = parts[parts.length - 1];\n    const method = current[methodName];\n\n    // Check if the method is a function\n    if (typeof method === 'function') {\n      return method.bind(current);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Renders the slot based on the state.\n   * @param state The state of the data.\n   */\n  private renderByState(state: boolean) {\n    return state ? <slot name=\"loading\">Loading...</slot> : <slot>Click</slot>;\n  }\n\n  /**\n   * Checks if the slot exists.\n   * @param name The name of the slot.\n   * @returns True if the slot exists, false otherwise.\n   */\n  private hasSlot(name: string) {\n    return !!this.host.querySelector(`[slot=\"${name}\"]`);\n  }\n\n  @RegisterComponent({\n    name: 'nylas-mailbox-toolbar-button',\n    connectorToProp: 'mailboxConnector',\n    fireRegisterEvent: true,\n  })\n  render() {\n    let state = false;\n    const store = this.mailboxConnector?.nylasMailboxStore;\n    if (typeof store !== 'undefined') {\n      const storeKey = String(this.dataState) as keyof typeof store.state;\n      state = this.dataState ? store.get(storeKey) === 'loading' : false;\n    }\n    const key = state ? `state-loading` : 'state-ready';\n    return (\n      <Host>\n        <sp-theme scale=\"medium\" color=\"dark\">\n          <sp-button onClick={this.onClick} disabled={state} key={key} icon-only={this.iconOnly} label={this.renderByState(state)}>\n            {this.hasSlot('icon') && (\n              <div slot=\"icon\" class={'slot'}>\n                <slot name=\"icon\" />\n              </div>\n            )}\n            {!this.iconOnly && this.renderByState(state)}\n          </sp-button>\n        </sp-theme>\n      </Host>\n    );\n  }\n}\n"],"version":3}