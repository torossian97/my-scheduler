'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-4f8ae42c.js');
const utils = require('./utils-85bd0909.js');
require('./_commonjsHelpers-ef8cd0cd.js');

const nylasListThreadsCss = ":host{display:block;font-size:var(--nylas-font-size, inherit);font-family:var(--nylas-font-family, inherit)}.list-thread{display:grid;grid-auto-flow:row;color:var(--nylas-color-primary-800);width:100%}.thread{position:relative;width:100%;display:grid;padding:0.5rem 1rem;column-gap:0.25rem;grid-template-areas:\"........ from    count   ....... date actions\" \"checkbox subject subject subject subject actions\" \"........ snippet snippet snippet snippet actions\";grid-template-columns:auto auto auto auto auto auto;margin-bottom:0.75rem;border-radius:var(--nylas-border-radius-2x);color:var(--nylas-color-primary-00);background-color:var(--nylas-color-primary-50);border:0;box-sizing:border-box;text-align:left;cursor:pointer;box-shadow:1px 1px 3px 0px rgba(0, 0, 0, 0.3);font-size:inherit;font-family:inherit}.thread.loading{animation:pulsate 1.5s infinite ease-in-out;width:100%;height:90px}.thread:last-of-type{margin-bottom:0}.thread.selected{box-shadow:0 2px 0 0 var(--nylas-color-primary-200);background-color:var(--nylas-color-primary-100)}.thread:hover{box-shadow:0 2px 0 0 var(--nylas-color-primary-200);background-color:var(--nylas-color-primary-100)}.thread>div{align-self:center;pointer-events:all !important}.thread .actions{grid-area:actions}.thread .actions sp-action-menu{pointer-events:initial !important}.thread .actions sp-action-button{pointer-events:initial !important}.thread .actions sp-menu-item{pointer-events:initial !important}.thread .checkbox{grid-area:checkbox;margin-right:0.5rem;pointer-events:initial !important}.thread .checkbox sp-checkbox{pointer-events:initial !important}.thread .star{grid-area:star;justify-self:end}.thread .from{grid-area:from;color:var(--nylas-color-primary-600)}.thread .count{grid-area:count;color:var(--nylas-color-primary-600)}.thread .subject{grid-area:subject;color:var(--nylas-color-primary-600)}.thread .snippet{grid-area:snippet;color:var(--nylas-color-primary-500)}.thread .date{grid-area:date;align-self:center;color:var(--nylas-color-primary-500)}.thread.unread .from,.thread.unread .count,.thread.unread .subject,.thread.unread .date{font-weight:600;color:var(--nylas-color-primary-800)}.thread.unread .snippet{color:var(--nylas-color-primary-700)}.thread .from{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.thread .snippet{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.thread .subject{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}@media only screen and (min-width: 768px){.thread{column-gap:1rem;grid-template-areas:\"checkbox from count subject snippet date actions\";grid-template-columns:auto minmax(auto, 200px) auto auto 1fr auto auto;margin-bottom:0.5rem;border:1px solid var(--nylas-color-primary-100)}.thread.no-checkbox{grid-template-areas:\"from count subject snippet date actions\";grid-template-columns:minmax(auto, 200px) auto auto 1fr auto auto}.thread .checkbox{margin-right:0}}@keyframes pulsate{0%{background-color:var(--nylas-color-primary-50)}50%{background-color:var(--nylas-color-primary-100)}100%{background-color:var(--nylas-color-primary-50)}}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasListThreads = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.threadSelected = index.createEvent(this, "threadSelected", 7);
        this.handleThreadSelected = async (thread) => {
            utils.debug(`[nylas-list-threads] Thread selected`, { thread });
            const event = this.threadSelected.emit(thread);
            if (!event.defaultPrevented) {
                utils.debug(`[nylas-list-threads] Default event not prevented, selecting thread`);
            }
        };
        this.handleCheckboxClick = async (event) => {
            utils.debug(`[nylas-list-threads] Checkbox clicked`, { event });
            event.stopPropagation();
        };
        this.threads = [];
        this.isAuthenticated = false;
        this.tokenInfo = undefined;
        this.state = 'ready';
        this.showCheckbox = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-list-threads] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-list-threads] Component did load`, { isAuthenticated: this.isAuthenticated });
    }
    render() {
        return (index.h(index.Host, { key: 'f943d924f47f9e1133bf87fcd32ee78e5b9bbf01' }, index.h("div", { key: '2159737dbb20305da9f966959d9da7a1830b9b2b', class: 'list-thread', part: "list-thread" }, this.state === 'loading' && new Array(10).fill(0).map((_, i) => index.h("div", { class: "thread loading", style: { animationDelay: `${i * 20}ms` } })), this.state === 'ready' &&
            this.threads.map(thread => (index.h("button", { key: thread?.id, class: {
                    'thread': true,
                    'unread': thread?.unread === true,
                    'no-checkbox': this.showCheckbox === false,
                }, part: "thread", "aria-label": `Thread with subject ${thread?.subject}`, onClick: () => this.handleThreadSelected(thread) }, this.showCheckbox && (index.h("div", { class: "checkbox", part: "checkbox" }, index.h("sp-checkbox", { size: "s", value: thread?.id, onClick: this.handleCheckboxClick }))), index.h("div", { class: "from", part: "from" }, utils.formatParticipants(thread.participants ?? [], this.tokenInfo?.email, thread?.message_ids?.length || 1, 1)), index.h("div", { class: "subject", part: "subject" }, thread?.subject), index.h("div", { class: "count", part: "count" }, thread?.message_ids?.length || 1), index.h("div", { class: "snippet", part: "snippet" }, thread?.snippet?.trim()), thread.latest_message_received_date && (index.h("div", { class: "date", "aria-label": `${Intl.DateTimeFormat(undefined, { dateStyle: 'full' }).format(new Date(thread.latest_message_received_date * 1000))}`, part: "date" }, utils.formatDateTime(thread.latest_message_received_date)))))))));
    }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-list-threads',
        stateToProps: new Map([
            ['auth.isAuthenticated', 'isAuthenticated'],
            ['auth.tokenInfo', 'tokenInfo'],
            ['mailbox.threads', 'threads'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            threadSelected: async (event, nylasConnector) => {
                utils.debug(`[nylas-list-threads] Thread selected`, { event });
                await nylasConnector.threads.selectThread(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListThreads.prototype, "render", null);
NylasListThreads.style = nylasListThreadsCss;

exports.nylas_list_threads = NylasListThreads;

//# sourceMappingURL=nylas-list-threads.cjs.entry.js.map