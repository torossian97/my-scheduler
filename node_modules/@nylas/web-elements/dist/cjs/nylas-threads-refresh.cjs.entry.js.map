{"file":"nylas-threads-refresh.entry.cjs.js","mappings":"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","names":["debug","h","Host","RegisterComponent"],"sources":["src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.scss?tag=nylas-threads-refresh&encapsulation=shadow","src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.tsx"],"sourcesContent":[":host {\n  display: contents;\n}\n\n.container {\n  width: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.pull-to-refresh {\n  display: none;\n  border: 0;\n  background-color: transparent;\n  text-align: center;\n  width: 100%;\n  justify-content: center;\n}\n\n.pulling {\n  position: relative;\n  display: flex;\n  margin: 0 auto;\n  padding: 1rem;\n  svg {\n    width: 24px;\n    height: 24px;\n    color: var(--nylas-color-primary-500);\n    transform: rotate(90deg);\n  }\n}\n\n.refreshing {\n  position: relative;\n  display: flex;\n  margin: 0 auto;\n  padding: 1rem;\n  svg {\n    width: 24px;\n    height: 24px;\n    fill: var(--nylas-color-primary-500);\n    animation: rotate 1s linear infinite;\n  }\n}\n\n@keyframes rotate {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { Component, Event, EventEmitter, Host, Method, State, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../../components';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { debug } from '@/utils/utils';\n\nexport type RefreshEvent = {\n  updateState: (state: 'ready' | 'loading' | 'error') => Promise<void>;\n};\n\n@Component({\n  tag: 'nylas-threads-refresh',\n  styleUrl: 'nylas-threads-refresh.scss',\n  shadow: true,\n})\nexport class NylasThreadsRefresh {\n  private readonly threshold: number = 100;\n\n  @State() start: number = 0;\n\n  @State() state: 'ready' | 'loading' | 'error' = 'ready';\n\n  @State() pulling: boolean = false;\n\n  @Event() refresh!: EventEmitter<RefreshEvent>;\n\n  private containerElement?: HTMLElement;\n  private contentElement?: HTMLElement;\n\n  constructor() {\n    debug(`[nylas-threads-refresh] Constructor`);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  connectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-threads-refresh] Component will load`);\n  }\n\n  componentDidLoad() {\n    debug(`[nylas-threads-refresh] Component did load`);\n    this.containerElement?.addEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.addEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.addEventListener('touchend', this.onTouchEnd);\n  }\n\n  disconnectedCallback() {\n    debug(`[nylas-threads-refresh] Component disconnected`);\n    this.containerElement?.removeEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.removeEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.removeEventListener('touchend', this.onTouchEnd);\n  }\n\n  @Method()\n  public async updateState(state: 'ready' | 'loading' | 'error') {\n    this.state = state;\n  }\n\n  private onTouchStart = (e: TouchEvent) => {\n    debug(`[nylas-threads-refresh] Touch start`, e.touches[0].pageY, this.containerElement?.scrollTop, this.containerElement?.offsetHeight, this.contentElement?.scrollTop);\n    if (this.containerElement?.scrollTop === 0) {\n      this.start = e.touches[0].pageY;\n    } else {\n      this.start = 0;\n    }\n  };\n\n  private onTouchMove = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.touches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = true;\n      } else {\n        this.pulling = false;\n      }\n    }\n  };\n\n  private onTouchEnd = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.changedTouches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = false;\n        this.refresh.emit({\n          updateState: this.updateState,\n        });\n      }\n      this.start = 0;\n    }\n  };\n  @RegisterComponent<NylasThreadsRefresh, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-threads-refresh',\n    eventToProps: {\n      refresh: async (event: CustomEvent<RefreshEvent>, nylasConnector: NylasMailboxConnector) => {\n        debug(`[nylas-threads-refresh] Refreshing threads`);\n        const { updateState } = event.detail;\n        await updateState('loading');\n        await nylasConnector.threads.getThreads(undefined, 'overwrite', false);\n        await updateState('ready');\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"container\" ref={r => (this.containerElement = r)}>\n          <button\n            class={{\n              'pull-to-refresh': true,\n              'pulling': this.pulling,\n              'refreshing': this.state === 'loading',\n            }}\n            aria-label=\"Refreshing...\"\n          >\n            {this.state === 'loading' && <refresh-icon slot=\"icon\" />}\n            {this.state !== 'loading' && <arrow-icon slot=\"icon\" />}\n          </button>\n          <div class=\"content\" ref={r => (this.contentElement = r)}>\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}