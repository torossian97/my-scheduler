'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const utils = require('./utils-85bd0909.js');
require('./_commonjsHelpers-ef8cd0cd.js');

const timePeriodSelectorCss = ".time-period-selector.sc-time-period-selector{display:flex;gap:0.5rem}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.time-period-selector.sc-time-period-selector select-dropdown#time-period.sc-time-period-selector::part(sd_dropdown-button){min-width:108px}.time-period-selector.sc-time-period-selector select-dropdown#time-number.sc-time-period-selector::part(sd_dropdown-button){min-width:84px}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-button){padding:1rem;gap:1rem}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-content){width:100%;max-height:200px}";

const TimePeriodSelector = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.timePeriodChanged = index.createEvent(this, "timePeriodChanged", 7);
        this.timePeriods = ['hour', 'day', 'week', 'month'];
        this.defaultSelectedPeriod = 'hour';
        this.defaultSelectedNumber = 1;
        this.selectedPeriod = this.defaultSelectedPeriod;
        this.selectedNumber = this.defaultSelectedNumber;
        this.numberOptions = this.calculateOptions('hour').map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
        this.timePeriodOptions = this.timePeriods.map(period => {
            return {
                label: period,
                value: period,
            };
        });
    }
    defaultSelectedPeriodChangedHandler(newValue) {
        this.selectedPeriod = newValue;
        this.updateNumberOptionsAndSelectedNumber(newValue);
    }
    defaultSelectedNumberChangedHandler(newValue) {
        this.selectedNumber = newValue;
    }
    timePeriodsChangedHandler(newValue) {
        this.timePeriodOptions = newValue.map(period => {
            return {
                label: period,
                value: period,
            };
        });
    }
    calculateOptions(period) {
        switch (period) {
            case 'hour':
                return Array.from({ length: 23 }, (_, i) => i + 1);
            case 'minute':
                return Array.from({ length: 60 }, (_, i) => i);
            case 'day':
                return Array.from({ length: 30 }, (_, i) => i + 1);
            case 'week':
                return Array.from({ length: 4 }, (_, i) => i + 1);
            case 'month':
                return Array.from({ length: 12 }, (_, i) => i + 1);
            default:
                return [];
        }
    }
    selectedOptionChangedHandler(event) {
        utils.debug('time-period-selector', 'selectedOptionChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'time-period') {
            this.selectedPeriod = value;
            this.updateNumberOptionsAndSelectedNumber(value);
        }
        else if (name === 'time-number') {
            this.selectedNumber = parseInt(value);
        }
        const selected = {
            number: this.selectedNumber,
            period: this.selectedPeriod,
        };
        this.timePeriodChanged.emit(selected);
    }
    updateNumberOptionsAndSelectedNumber(period) {
        const numberOptions = this.calculateOptions(period);
        this.numberOptions = numberOptions.map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
        this.selectedNumber = parseInt(this.numberOptions[0].value);
    }
    render() {
        return (index.h("div", { key: 'eaec00db41b0c2410fc4a9ccc341fc4ec4012e10', class: "time-period-selector" }, index.h("select-dropdown", { key: '0d53efe90429a05d4f52a8f1b92bf46b14b1e6ad', id: "time-number", name: 'time-number', exportparts: "sd__dropdown: tps__number-dropdown, sd__dropdown-button: tps__number-dropdown-button, sd__dropdown-content: tps__number-dropdown-content", options: this.numberOptions, defaultSelectedOption: this.numberOptions.find(i => i.value == this.selectedNumber.toString()) ?? this.numberOptions[0], withSearch: false }), index.h("select-dropdown", { key: 'bce764e3e959eb4fad73d1e410173d584f243ee5', id: "time-period", name: 'time-period', options: this.timePeriodOptions, exportparts: "sd__dropdown: tps__period-dropdown, sd__dropdown-button: tps__period-dropdown-button, sd__dropdown-content: tps__period-dropdown-content", pluralizedLabel: this.selectedNumber > 1 ? 's' : '', defaultSelectedOption: this.timePeriodOptions.find(i => i.value == this.selectedPeriod) ?? this.timePeriodOptions[0], withSearch: false })));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "defaultSelectedPeriod": ["defaultSelectedPeriodChangedHandler"],
        "defaultSelectedNumber": ["defaultSelectedNumberChangedHandler"],
        "timePeriods": ["timePeriodsChangedHandler"]
    }; }
};
TimePeriodSelector.style = timePeriodSelectorCss;

exports.time_period_selector = TimePeriodSelector;

//# sourceMappingURL=time-period-selector.cjs.entry.js.map