'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-4f8ae42c.js');
const utils = require('./utils-85bd0909.js');
require('./_commonjsHelpers-ef8cd0cd.js');

const nylasListConfigurationsCss = ":host{display:grid;grid-auto-flow:row;width:100%;font-family:inherit;font-optical-sizing:auto;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem;gap:1rem}@media screen and (max-width: 768px){.header{flex-direction:column;gap:0.5rem;align-items:unset}}.header h2{margin:0;font-size:1.25rem;color:var(--nylas-base-900);font-weight:600}.header p{margin:0;font-size:1rem;color:var(--nylas-base-700)}.header .actions{justify-self:end}@media screen and (max-width: 768px){.header .actions{width:100%}}.configurations{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);background:var(--nylas-base-0);height:100%;display:flex;overflow-y:auto}.configurations table{width:100%;border-spacing:0;border-collapse:collapse;font-family:inherit;height:max-content}.configurations table.no-configurations{height:100%}.configurations table tr{color:var(--nylas-base-800);border-bottom:1px solid var(--nylas-base-200);font-family:inherit}.configurations table tr:last-of-type{border-bottom:0}.configurations table tr.hide{display:none}.configurations table th{font-weight:600;text-transform:uppercase}.configurations table th.actions-header{text-align:right}.configurations table tr.no-configurations td>div{display:flex;height:100%;justify-content:center;align-items:center;flex-direction:column;padding:var(--nylas-border-radius-3x)}.configurations table tr.no-configurations td>div h3{margin:0 0 1rem 0;color:var(--nylas-base-700)}.configurations table tr.no-configurations td>div p{margin:0 0 1rem 0;color:var(--nylas-base-600)}.configurations table tr.no-configurations td>div calendar-icon{margin-bottom:1rem;color:var(--nylas-base-200)}.configurations table th,.configurations table td{text-align:left;padding:1rem;font-family:inherit}.configurations table .actions{text-align:right}.configurations table .actions{display:flex;justify-content:flex-end;gap:1rem}@media screen and (max-width: 768px){.configurations table .actions{flex-direction:column;gap:0.5rem}}.configurations table .title{display:flex;flex-direction:column}.configurations table .title .config-event-title{font-weight:600}.configurations table .title .config-event-description{font-size:0.75rem}.error-container{margin-top:1.5rem}.error-container .error{color:var(--nylas-error);padding:0.5rem 0;margin:1rem 0 0}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasListConfigurations = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.initListConfigurations = index.createEvent(this, "initListConfigurations", 7);
        this.createButtonClick = index.createEvent(this, "createButtonClick", 7);
        this.editButtonClick = index.createEvent(this, "editButtonClick", 7);
        this.deleteButtonClick = index.createEvent(this, "deleteButtonClick", 7);
        this.configurations = [];
        this.schedulerPreviewLink = '';
        this.state = 'loading';
        this.error = '';
    }
    connectedCallback() {
        utils.debug('[nylas-list-configurations]', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('[nylas-list-configurations]', 'componentWillLoad');
        if (this.configurations && this.configurations.length > 0) {
            this.state = 'loaded';
        }
    }
    componentDidLoad() {
        utils.debug('[nylas-list-configurations]', 'componentDidLoad');
        this.initListConfigurations.emit(this.host);
    }
    disconnectedCallback() {
        utils.debug('[nylas-list-configurations]', 'disconnectedCallback');
    }
    async getState() {
        return this.state;
    }
    async setState(state) {
        this.state = state;
    }
    async setError(error) {
        this.error = error;
    }
    render() {
        return (index.h(index.Host, null, index.h("div", { class: "header" }, index.h("div", { class: "description" }, index.h("h2", null, "All scheduling pages"), index.h("p", null, "Create, edit and manage all your scheduling pages.")), this.configurations && this.configurations.length > 0 && (index.h("div", { class: "actions" }, index.h("button-component", { clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new")))), index.h("div", { class: "configurations" }, index.h("table", { class: {
                'no-configurations': this.state !== 'loading' && (!this.configurations || this.configurations.length === 0),
            } }, index.h("tr", { class: {
                hide: this.state === 'loading' || (this.configurations && this.configurations.length === 0),
            } }, index.h("th", null, "Scheduling page event title"), index.h("th", null, "Duration"), index.h("th", { class: "actions-header" }, "Actions")), this.state === 'loading' && (index.h("tr", { class: "no-configurations" }, index.h("td", { colSpan: 3 }, index.h("div", null, index.h("h3", null, "Loading..."), index.h("p", null, "Please wait while we fetch the scheduling pages"))))), this.state !== 'loading' && (!this.configurations || this.configurations.length === 0) && (index.h("tr", { class: "no-configurations" }, index.h("td", { colSpan: 3 }, index.h("div", null, index.h("calendar-icon", { width: "48", height: "48" }), index.h("h3", null, "No scheduling pages found"), index.h("p", null, "Get started with creating your first scheduling page"), index.h("button-component", { clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new"))))), this.state !== 'loading' &&
            this.configurations.map(config => (index.h("tr", { key: config.id }, index.h("td", null, index.h("div", { class: "title" }, index.h("span", { class: 'config-event-title' }, config.event_booking.title), index.h("span", { class: 'config-event-description' }, config.event_booking.description))), index.h("td", null, index.h("div", null, config.availability.duration_minutes, " mins")), index.h("td", null, index.h("div", { class: "actions" }, index.h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    window.open(utils.parsePreviewLink(this.schedulerPreviewLink, config), '_blank');
                } }, "Preview"), index.h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    this.editButtonClick.emit({ host: this.host, configuration: config });
                } }, "Edit"), index.h("button-component", { variant: 'basic', clickHandler: event => {
                    event.preventDefault();
                    this.deleteButtonClick.emit({ host: this.host, configuration: config });
                } }, "Delete")))))))), this.state === 'error' && (index.h("div", { class: "error-container" }, index.h("p", { class: 'error' }, this.error)))));
    }
    get host() { return index.getElement(this); }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-list-configurations',
        stateToProps: new Map([['schedulerConfig.configurations', 'configurations']]),
        localPropsToProp: new Map([['schedulerPreviewLink', 'schedulerPreviewLink']]),
        eventToProps: {
            initListConfigurations: async (event, connector) => {
                const host = event.detail;
                await host.setState('loading');
                const [data, error] = await connector.schedulerConfig.getConfigurations();
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                    return;
                }
                await host.setState('loaded');
            },
            createButtonClick: async (_, connector) => {
                connector.schedulerConfigStore.resetSelectedConfiguration();
                connector.schedulerConfigStore.state.action = 'create';
            },
            deleteButtonClick: async (event, connector) => {
                const { host, configuration } = event.detail;
                const [data, error] = await connector.schedulerConfig.deleteConfiguration(configuration.id);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                }
            },
            editButtonClick: async (event, connector) => {
                const { configuration } = event.detail;
                connector.schedulerConfigStore.state.selectedConfiguration = configuration;
                connector.schedulerConfigStore.state.action = 'edit';
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListConfigurations.prototype, "render", null);
NylasListConfigurations.style = nylasListConfigurationsCss;

exports.nylas_list_configurations = NylasListConfigurations;

//# sourceMappingURL=nylas-list-configurations.cjs.entry.js.map