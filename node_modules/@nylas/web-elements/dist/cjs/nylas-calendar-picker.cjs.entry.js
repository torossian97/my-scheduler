'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-4f8ae42c.js');
const utils = require('./utils-85bd0909.js');
require('./_commonjsHelpers-ef8cd0cd.js');

const nylasCalendarPickerCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-calendar-picker{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-calendar-picker .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-calendar-picker .header h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-calendar-picker .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-calendar-picker .nylas-calendar-picker__loading{padding-bottom:1rem;display:flex;flex-direction:column;gap:4px}.nylas-calendar-picker .nylas-calendar-picker__loading .label{display:flex;align-items:center;gap:0.5rem;margin:1rem 1rem 0;color:var(--nylas-base-800)}.nylas-calendar-picker .nylas-calendar-picker__loading .label tooltip-component{display:flex}.nylas-calendar-picker .nylas-calendar-picker__loading .loading-button{margin:0 1rem;padding:0;width:inherit;height:48px;color:black;font-size:1rem;cursor:not-allowed;display:flex;gap:0.5rem;justify-content:space-between;align-items:center;background:transparent;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-calendar-picker .nylas-calendar-picker__loading .loading-button span{padding:0 1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown{padding:1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown){width:100%;display:flex;flex-direction:column;gap:4px}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-content){width:100%;max-width:unset}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCalendarPicker = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.calendars = undefined;
        this.currentUser = undefined;
        this.name = 'calendar';
        this.defaultSelectedCalendars = [];
        this.selectedCalendars = [];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    connectedCallback() {
        utils.debug('nylas-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-calendar-picker', 'componentDidLoad');
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.defaultSelectedCalendars.toString(), 'calendar');
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-calendar-picker', 'componentDidRender');
    }
    selectedOptionsChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'selectedOptionChangedHandler', event.detail);
        const valueChangedHandler = (event) => {
            const { value } = event.detail;
            this.selectedCalendars = [...value];
            this.internals.setFormValue(value.toString(), 'calendar');
        };
        this.valueChanged.emit({ ...event.detail, name: this.name, valueChangedHandler });
    }
    render() {
        const calendarOptions = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
                selected: this.defaultSelectedCalendars?.includes(calendar.id) ||
                    (this.defaultSelectedCalendars?.includes('primary') || this.defaultSelectedCalendars?.length === 0 ? calendar.id === this.currentUser?.email : false),
            };
        }) ?? [];
        return (index.h(index.Host, null, index.h("div", { class: "nylas-calendar-picker", part: "ncp" }, index.h("div", { class: "header", part: "ncp__header" }, index.h("h3", null, "Calendar availability"), index.h("p", null, "Select calendars that you\u2019d like to use for checking your availability.")), calendarOptions.length > 0 ? (index.h("div", { class: "nylas-calendar-picker__dropdown" }, index.h("multi-select-dropdown", { name: 'calendar', label: "Select calendars that will be checked for availability", options: calendarOptions, exportparts: "msd__dropdown: ncp__dropdown, msd__dropdown-button: ncp__dropdown-button, msd__dropdown-content: ncp__dropdown-content" }, index.h("span", { slot: "label-icon" }, index.h("tooltip-component", null, index.h("info-icon", { slot: "tooltip-icon" }), index.h("span", { slot: "tooltip-content" }, "Check availability across one or multiple calendars. If multiple calendars are selected, you must be available across all of them to be considered available. The default is your primary calendar if none are selected.")))))) : (index.h("div", { class: "nylas-calendar-picker__loading" }, index.h("span", { class: "label" }, "Select calendars that will be checked for availability ", index.h("info-icon", null)), index.h("div", { class: "loading-button" }, index.h("span", null, "Loading...")))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChangedHandler } = event.detail;
                if (valueChangedHandler) {
                    valueChangedHandler(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCalendarPicker.prototype, "render", null);
NylasCalendarPicker.style = nylasCalendarPickerCss;

exports.nylas_calendar_picker = NylasCalendarPicker;

//# sourceMappingURL=nylas-calendar-picker.cjs.entry.js.map