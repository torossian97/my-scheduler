'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const index_es = require('./index.es-cc2d145f.js');
const utils = require('./utils-85bd0909.js');
const mailboxStore = require('./mailbox-store-5ea7604e.js');
require('./_commonjsHelpers-ef8cd0cd.js');
require('./index-5ba61c57.js');

class NylasMailboxConnector {
    constructor(router, nylasAuth, nylasAuthStore, nylasStore) {
        this.router = router;
        this.nylasAuth = nylasAuth;
        this.nylasAuthStore = nylasAuthStore;
        this.nylasMailboxStore = nylasStore;
    }
    init() {
        utils.debug('NylasMailboxConnector init');
    }
    get mailboxStore() {
        return this.nylasMailboxStore;
    }
    get authStore() {
        return this.nylasAuthStore;
    }
    get auth() {
        if (this._authConnector) {
            return this._authConnector;
        }
        this._authConnector = new mailboxStore.NylasAuthConnector(this.nylasAuth, this.nylasAuthStore);
        return this._authConnector;
    }
    get threads() {
        if (this._threadConnector) {
            return this._threadConnector;
        }
        this._threadConnector = new mailboxStore.NylasThreadsConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore, this.router);
        return this._threadConnector;
    }
    get messages() {
        if (this._messageConnector) {
            return this._messageConnector;
        }
        this._messageConnector = new mailboxStore.NylasMessagesConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);
        return this._messageConnector;
    }
    get folders() {
        if (this._foldersConnector) {
            return this._foldersConnector;
        }
        this._foldersConnector = new mailboxStore.NylasFoldersConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);
        return this._foldersConnector;
    }
    getAuth() {
        return this.nylasAuth;
    }
    resetStores() {
        this.nylasMailboxStore.reset();
        this.nylasAuthStore.reset();
    }
    async logout() {
        await this.nylasAuth.logout();
        this.resetStores();
    }
}

const nylasMailboxCss = ":host{display:contents}";

const NylasMailbox = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.init = index.createEvent(this, "init", 7);
        this.loggedIn = index.createEvent(this, "loggedIn", 7);
        this.loggedOut = index.createEvent(this, "loggedOut", 7);
        this.handleAuthChange = async (isAuthenticated) => {
            if (isAuthenticated) {
                this.loggedIn.emit(this.host);
            }
            else {
                const loggedOutEvent = this.loggedOut.emit(this.host);
                if (!loggedOutEvent.defaultPrevented) {
                    await this.nylasMailboxConnector?.logout();
                }
            }
        };
        this.automaticComponentRegistration = true;
        this.eventOverrides = {};
        this.authConfig = undefined;
        this.defaultAuthStoreState = undefined;
        this.defaultMailboxStoreState = undefined;
    }
    connectedCallback() {
        utils.debug('[nylas-mailbox] connectedCallback');
    }
    async componentWillLoad() {
        this.stores = {
            auth: mailboxStore.CreateNylasAuthStore(this.defaultAuthStoreState),
            mailbox: mailboxStore.CreateNylasMailboxStore(this.defaultMailboxStoreState),
        };
        this.baseProvider = new index_es.NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        this.router = new mailboxStore.HashRouter();
        this.nylasAuth = index_es.es({
            apiUri: 'https://api.us.nylas.com',
            elementsApiUri: 'https://elements.us.nylas.com',
            storageType: 'indexeddb',
            clientId: 'YOUR_CLIENT_ID',
            defaultScopes: [],
            redirectURI: '/',
            ...this.authConfig,
        });
        const authStore = this.baseProvider?.getStore('auth');
        if (!authStore) {
            throw new Error('Auth store is not defined');
        }
        const mailboxStore$1 = this.baseProvider?.getStore('mailbox');
        if (!mailboxStore$1) {
            throw new Error('Mailbox store is not defined');
        }
        this.nylasMailboxConnector = new NylasMailboxConnector(this.router, this.nylasAuth, authStore, mailboxStore$1);
        const initEvent = this.init.emit(this.host);
        if (!initEvent.defaultPrevented) {
            await this.nylasMailboxConnector?.auth.validateSession();
        }
        this.router?.addRouteChangeListener(`/thread/:threadId`, async (_route, _path, routeParams) => {
            const threadId = routeParams.threadId;
            const thread = await this.nylasMailboxConnector?.threads.getThread(threadId);
            if (thread) {
                this.nylasMailboxConnector?.mailboxStore.set('selectedThread', thread);
            }
        });
        this.router?.addRouteChangeListener(`/`, async (_route, _path, _routeParams) => {
            if (!authStore.state.isAuthenticated) {
                return;
            }
            this.nylasMailboxConnector?.threads.unSelectThread();
            this.nylasMailboxConnector?.folders.getFolders();
            const queryParams = window.location.hash.split('?')[1];
            if (queryParams) {
                const params = new URLSearchParams(queryParams);
                const searchQuery = params.get('query');
                if (searchQuery) {
                    await this.nylasMailboxConnector?.threads.getThreads({
                        search_query_native: searchQuery,
                        page_token: undefined,
                    });
                }
            }
            else {
                this.nylasMailboxConnector?.threads.getThreads();
            }
        });
        this.router?.init();
        this.handleAuthChange(authStore.state.isAuthenticated);
        this.baseProvider?.componentWillLoad(this.nylasMailboxConnector);
    }
    async componentDidLoad() {
        const authStore = this.baseProvider?.getStore('auth');
        if (!authStore) {
            throw new Error('Auth store is not defined');
        }
        authStore.onChange('isAuthenticated', this.handleAuthChange);
        this.baseProvider?.componentDidLoad();
    }
    componentDisconnected() {
        this.baseProvider?.componentDisconnected();
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async getMailboxStore() {
        return this.baseProvider?.getStore('mailbox');
    }
    async getAuthStore() {
        return this.baseProvider?.getStore('auth');
    }
    async getNylasAuth() {
        return this.nylasAuth;
    }
    async getNylasMailboxConnector() {
        return this.nylasMailboxConnector;
    }
    render() {
        return (index.h(index.Host, { key: '662c4d3f763c5cf9db31c4d2ba26bcdf47ead164' }, index.h("slot", { key: '5c2b75a569779dd2af6388648a4304721e82ba76' })));
    }
    get host() { return index.getElement(this); }
};
NylasMailbox.style = nylasMailboxCss;

exports.nylas_mailbox = NylasMailbox;

//# sourceMappingURL=nylas-mailbox.cjs.entry.js.map