'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-4f8ae42c.js');
const utils = require('./utils-85bd0909.js');
require('./_commonjsHelpers-ef8cd0cd.js');

const nylasEventDurationCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-duration{display:flex;flex-direction:column;gap:4px}.nylas-event-duration label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-duration label span.required{color:var(--nylas-error, #cc4841)}.nylas-event-duration label span.label-icon{margin-left:4px}.nylas-event-duration label span.label-icon tooltip-component{display:flex}.nylas-event-duration__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-event-duration__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-event-duration__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:12px 16px}.nylas-event-duration__wrapper select-dropdown::part(sd_dropdown-button-selected-label){font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDuration = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'duration';
        this.eventDurationMinutes = undefined;
        this.duration = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 5;
        this.durationMinutes = this.eventDurationMinutes ?? 5;
        this.durationIncrement = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? 60 : 1) : 1;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-duration', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const configDuration = newVal?.availability?.duration_minutes;
        if (configDuration) {
            this.duration = configDuration >= 60 ? configDuration / 60 : configDuration;
            this.durationMinutes = configDuration ?? 5;
            this.durationIncrement = configDuration >= 60 ? 60 : 1;
        }
    }
    durationMinutesChangedHandler(newValue, oldValue) {
        utils.debug('nylas-event-duration', 'durationMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        utils.debug('nylas-event-duration', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-duration', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-duration', 'componentDidLoad');
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    disconnectedCallback() {
        utils.debug('nylas-event-duration', 'disconnectedCallback');
    }
    handleChange(event) {
        this.duration = event.target.value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    handleBlur() {
        if ((this.duration === null || this.duration === undefined) && this.durationIncrement === 1) {
            this.duration = 5;
        }
        if ((this.duration <= 0 || this.duration === null || this.duration === undefined) && this.durationIncrement === 60) {
            this.duration = 1;
        }
        if (this.duration < 5 && this.durationIncrement === 1) {
            this.duration = 5;
        }
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    selectedOptionChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'selectedOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.durationIncrement = parseInt(value);
        if (this.durationIncrement === 1) {
            this.duration = 5;
        }
        else {
            this.duration = 1;
        }
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    render() {
        const durationOptions = [
            { value: 1, label: 'minutes' },
            { value: 60, label: 'hours' },
        ];
        return (index.h(index.Host, { key: '222965e76af408c0b06183e8e888b73578adb158' }, index.h("div", { key: 'decd15dbfd386cebc4efc880a0a8fb7fc8fc4a1a', class: "nylas-event-duration", part: "ned" }, index.h("label", { key: '655d4bd8aad28138573516d1a409ff4ad7f90527', htmlFor: "duration" }, "Event duration", index.h("span", { key: 'f53fc2692fa1b4d3265e946ddf313a8e432897d8', class: "required" }, "*"), index.h("span", { key: '04f0110989f72e20a836ec8552801b87fc8cc6f8', class: "label-icon" }, index.h("tooltip-component", { key: 'cead8ac1aa4ca82db690a38306a8987e3b5759e0' }, index.h("info-icon", { key: '0105ced6a6b7227b7ac39f68869e6f9fed5fc386', slot: "tooltip-icon" }), index.h("span", { key: '3a1a73f76723e6f0ba4b4c45a08a839f26b8c25d', slot: "tooltip-content" }, "Set the duration of your event.")))), index.h("div", { key: '7c85aebc13daa31d440d6b7ec4f2104f64ac4407', class: "nylas-event-duration__wrapper" }, index.h("input", { key: '255e4574db650850cf3396509be0dfdac65175bb', type: "number", part: "ned_input", id: "duration", name: "duration", value: this.duration, onBlur: () => this.handleBlur(), onInput: e => this.handleChange(e), min: 5 }), index.h("select-dropdown", { key: 'a19d552e5e537d9ebeffa1890f2ccafa61a1f761', name: 'event-duration', options: durationOptions, exportparts: "sd__dropdown: ned__dropdown, sd__dropdown-button: ned__dropdown-button, sd__dropdown-content: ned__dropdown-content", defaultSelectedOption: durationOptions.find(i => i.value == this.durationIncrement) ?? durationOptions[0], withSearch: false })))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "durationMinutes": ["durationMinutesChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-event-duration',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDuration.prototype, "render", null);
NylasEventDuration.style = nylasEventDurationCss;

exports.nylas_event_duration = NylasEventDuration;

//# sourceMappingURL=nylas-event-duration.cjs.entry.js.map