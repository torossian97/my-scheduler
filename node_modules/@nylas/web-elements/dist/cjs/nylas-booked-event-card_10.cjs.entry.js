'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7af03e3f.js');
const registerComponent = require('./register-component-2c3ad1d1.js');
const utils = require('./utils-e6d76818.js');
const constants = require('./constants-3e962931.js');
require('./_commonjsHelpers-0a7b82d9.js');

const nylasBookedEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}sp-theme{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.event-card-wrapper{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;margin-bottom:2rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 4rem;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:1rem;font-weight:400}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.booking-date-time,.booking-participants{padding:0 1rem;margin-top:1.5rem;margin-left:3rem;display:flex;flex-direction:column;justify-content:space-between;align-self:flex-start;position:relative}.booking-date-time svg,.booking-participants svg{color:var(--nylas-base-700);position:absolute;left:-10px}.booking-date-time .block,.booking-participants .block{display:block}.booking-date-time h3,.booking-participants h3{color:var(--nylas-base-600);margin:0;font-size:1rem;font-weight:600;line-height:1.25rem;text-align:justify;margin-bottom:4px}.booking-date-time p,.booking-participants p{font-size:16px;margin:0;font-weight:400;text-align:justify;color:var(--nylas-base-800)}.booking-participants{margin-bottom:1.5rem}.booked-event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:1.5rem;gap:4px;margin:2rem;align-items:center;align-self:flex-end}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}sp-button{background-color:var(--nylas-base-0);color:var(--nylas-base-700);border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);font-size:16px;padding:8px;font-family:var(--nylas-font-family);font-weight:600;height:48px;line-height:24px}sp-button.cancel{color:var(--nylas-error)}sp-button.cancel:hover,sp-button.cancel:focus{border-color:var(--nylas-error)}sp-button.cancel:active{color:var(--nylas-error-pressed);border-color:var(--nylas-error-pressed)}sp-button.reschedule:hover,sp-button.reschedule:focus{border-color:var(--nylas-primary)}sp-button.reschedule:active{border-color:var(--nylas-base-600)}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}";
const NylasBookedEventCardStyle0 = nylasBookedEventCardCss;

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookedEventCard = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.cancelBookingButtonClicked = index.createEvent(this, "cancelBookingButtonClicked", 7);
        this.rescheduleButtonClicked = index.createEvent(this, "rescheduleButtonClicked", 7);
        this.rescheduleBookedEventError = index.createEvent(this, "rescheduleBookedEventError", 7);
        this.cancelBookedEventValidationError = index.createEvent(this, "cancelBookedEventValidationError", 7);
        this.handleCancelBookingButtonClicked = () => {
            const today = new Date();
            const minCancellationNotice = this.configSettings?.scheduler.min_cancellation_notice;
            const dateTillCancellation = utils.addMinutesToCurrentTime(today, minCancellationNotice);
            if (today.getTime() < dateTillCancellation.getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getOrganizer = (eventInfo) => {
            const organizer = eventInfo?.organizer;
            return organizer;
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-booked-event-card] Component did load`);
    }
    render() {
        return (index.h(index.Host, { key: '5bd3216b60b7cdb86a44435706fb43b6a898e61c', part: "nbec" }, index.h("sp-theme", { key: 'f6059be8647e7340db11f12db85596b2493a3032', theme: "spectrum", color: "dark", scale: "medium" }, index.h("div", { key: '5f6cf3edb7b911c7c2c24d4ce82357298cc10108', class: "booked-event-timezone" }, index.h("globe-icon", { key: 'b23ca20aa43dc402a2071ed0019ff103f455e769' }), constants.TIMEZONE_MAP[this.selectedTimezone]), index.h("div", { key: '664f226bd33a6ee1ee938ac76eca60085e822915', class: "event-card-wrapper", part: "nbec__card" }, index.h("div", { key: '0de5fccaf726cc6a6fb1917249ffcccbaf45190f', class: "calendar-icon" }, index.h("calendar-check-icon", { key: '94bbe15e7acddbc88916355337170a6753fa70b3' })), index.h("div", { key: 'f3876bccacb3a99e7c337aff930095884b3e6be3', class: "booked-event-header" }, index.h("h2", { key: 'da46d3cb4865421827cd7b3f499cae06ca09e365', slot: "card-title", part: "nbec__title" }, "Booking ", !!this.rescheduleBookingId ? 'rescheduled' : 'confirmed', "!"), index.h("div", { key: '57ed93864ee0cbdbf5755b0fe9a6b2803ca7a869', part: "nbec__description" }, this.getOrganizer(this.eventInfo)?.name || this.getOrganizer(this.eventInfo)?.email, "\u00A0&\u00A0", this.bookingInfo?.primaryParticipant?.name || this.bookingInfo?.primaryParticipant?.email)), index.h("sp-divider", { key: '4fab8afdbdc7e9a2b55e35779ff087a5497b0c3e' }), index.h("div", { key: '54ffc748a0da3bd9ae866137b600d0dc1da5eb5e', class: "booking-date-time" }, index.h("checkmark-circle-icon", { key: '674edd7058565b837a618089c653d20b8b8f08e7' }), index.h("h3", { key: '51f406b68b2e310e354e79703aea3efd14236d57' }, "Booking date and time"), index.h("p", { key: '404211c1b06bb80da3eb7274f4a41fba962ce0b9' }, new Date(this.selectedTimeslot?.start_time).toLocaleDateString(undefined, { dateStyle: 'full' }), " ", index.h("br", { key: '221f96d994e440affff5a347fbb9da5a2566ab29' }), new Date(this.selectedTimeslot?.start_time).toLocaleTimeString(undefined, { timeStyle: 'short' }), " -", ' ', new Date(this.selectedTimeslot?.end_time).toLocaleTimeString(undefined, { timeStyle: 'short' }))), index.h("div", { key: 'd333515e59086254d2484c5f55ad9b69a21bf0bb', class: "booking-participants" }), index.h("sp-divider", { key: 'f6ee5cd38d186d943a345f037357419f2af7e3c7' }), index.h("div", { key: 'c6eb21904c9db747ceb7a2daed88bf86057f4046', class: "footer" }, index.h("sp-button", { key: 'ee4a439cd71eb0c9c6a1a82be35698a3b027c6c5', variant: "secondary", treatment: "outline", class: "cancel", onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, "Cancel booking"), index.h("sp-button", { key: '36aa6cc83eb259f21098787e61d36c4a8ca5b3df', variant: "secondary", treatment: "outline", class: "reschedule", onClick: this.handleRescheduleButtonClicked, part: "nbec__button-outline nbec__reschedule-cta" }, "Reschedule"))))));
    }
};
__decorate$7([
    registerComponent.RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$7("design:type", Function),
    __metadata$7("design:paramtypes", []),
    __metadata$7("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
NylasBookedEventCard.style = NylasBookedEventCardStyle0;

const nylasBookingFormCss = ":host{display:block;height:100%;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-booking-form{width:100%;padding:1.5rem;box-sizing:border-box;height:450px;overflow-y:auto;height:100%}form{height:100%;display:flex;flex-direction:column;justify-content:space-between;align-items:center}sp-textfield{--spectrum-corner-radius-100:var(--nylas-border-radius-2x);--spectrum-textfield-border-color:var(--nylas-base-300);position:relative;width:100%;height:48px;margin-bottom:16px;color:var(--nylas-base-500)}.cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;justify-content:space-between;gap:0.5rem;padding:10px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.cta{flex-direction:column-reverse}}sp-button{background-color:transparent;color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);--button-width:50%;font-family:var(--nylas-font-family);font-size:16px;font-weight:600;border:none;height:48px;padding:14px}@media screen and (max-width: 768px){sp-button{--button-width:100%}}sp-button:hover,sp-button:focus{background-color:var(--nylas-base-100);color:var(--nylas-primary);border-radius:var(--nylas-border-radius-2x)}sp-button:active{background-color:var(--nylas-base-200);color:var(--nylas-base-800)}sp-button.back{width:var(--button-width);background-color:transparent;color:var(--nylas-base-700);outline:1px solid var(--nylas-base-300)}sp-button.back:hover,sp-button.back:focus{outline-color:var(--nylas-primary)}sp-button.back:active{outline:2px solid var(--nylas-base-600)}sp-button.book{width:var(--button-width);background-color:var(--nylas-primary);color:var(--nylas-base-0)}sp-button.book:hover,sp-button.book:focus{background-color:var(--nylas-base-600)}sp-button.book:active{background-color:var(--nylas-base-800)}.input-wrapper{width:100%;display:flex;flex-direction:column;align-items:flex-start;gap:4px;margin-bottom:1rem}.input-wrapper input::placeholder{color:var(--nylas-base-300)}.input-wrapper label,.input-wrapper input{font-family:var(--nylas-font-family)}.input-wrapper .help-text{margin:0;color:var(--nylas-error)}.button-wrapper{width:100%;align-items:flex-start;height:max-content;position:relative}sp-infield-button{--spectrum-infield-button-background-color:transparent;--spectrum-infield-button-background-color-hover:transparent;--spectrum-infield-button-background-color-active:transparent;--spectrum-infield-button-border-color:transparent;--spectrum-infield-button-border-width:1px;--spectrum-infield-button-border-radius:0;color:var(--nylas-base-600);background:transparent;border:none;outline:1px solid var(--nylas-base-300);border-radius:0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x) 0;height:52px;width:52px;display:flex;position:absolute;right:0;align-items:center;justify-content:center;cursor:pointer}sp-infield-button sp-icon-cross300{color:var(--nylas-base-600)}sp-infield-button.error{border-width:2px;border-color:var(--nylas-error)}input[type=text],input[type=email]{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%}input[type=text].error,input[type=email].error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}input[type=text].error::placeholder,input[type=email].error::placeholder{font-weight:400}input[type=text].guest-email,input[type=email].guest-email{color:var(--nylas-base-900);padding-right:52px}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}";
const NylasBookingFormStyle0 = nylasBookingFormCss;

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
const NylasBookingForm = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.nameChanged = index.createEvent(this, "nameChanged", 7);
        this.emailChanged = index.createEvent(this, "emailChanged", 7);
        this.backButtonClicked = index.createEvent(this, "backButtonClicked", 7);
        this.detailsConfirmed = index.createEvent(this, "detailsConfirmed", 7);
        this.bookingFormError = index.createEvent(this, "bookingFormError", 7);
        this.handleGuestChange = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests[guestIndex] = email;
            this.guestEmails = [...guests];
        };
        this.handleGuestBlur = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            if (email === '') {
                this.guestEmailErrors[guestIndex] = 'Email is required';
                return;
            }
            if (!emailRegex.test(email)) {
                this.guestEmailErrors[guestIndex] = 'Enter a valid email address';
                return;
            }
            this.handleGuestChange(guestIndex, email);
        };
        this.addGuestButtonClickedHandler = () => {
            this.guestEmails = [...this.guestEmails, ''];
        };
        this.removeGuestButtonClickHandler = (e, guestIndex) => {
            e.preventDefault();
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests.splice(guestIndex, 1);
            this.guestEmails = [...guests];
        };
        this.handleBackButtonClicked = () => {
            this.backButtonClicked.emit();
        };
        this.bookButtonClickedHandler = async (e) => {
            e.preventDefault();
            utils.debug('nylas-booking-form', 'bookButtonClickedHandler', this.bookingInfo);
            const name = this.name || this.bookingInfo?.primaryParticipant?.name;
            const email = this.email || this.bookingInfo?.primaryParticipant?.email;
            if (!name || name === '') {
                this.isNameValid = false;
                this.validationError.name = 'Name is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Name is required',
                });
                return;
            }
            if (!email || email === '') {
                this.isEmailValid = false;
                this.validationError.email = 'Email is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Email is required',
                });
                return;
            }
            if (!emailRegex.test(email)) {
                this.isEmailValid = false;
                this.validationError.email = 'Enter a valid email address';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Invalid email',
                });
                return;
            }
            let guests = [];
            if (this.guestEmails.length > 0) {
                let hasError = false;
                this.guestEmails.forEach((email, i) => {
                    if (email === '') {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Email is required' };
                    }
                    else if (!emailRegex.test(email)) {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Enter a valid email address' };
                    }
                });
                if (hasError) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: 'Invalid guest email',
                    });
                    return;
                }
                guests = this.guestEmails.map((email) => ({ name: '', email: email.trim() }));
            }
            else if (this.bookingInfo?.guests) {
                guests = this.bookingInfo?.guests;
            }
            this.detailsConfirmed.emit({
                primaryParticipant: {
                    name: name,
                    email: email,
                },
                guests: guests,
                additionalFields: {
                    ...this.bookingInfo?.additionalFields,
                },
            });
        };
        this.isLoading = undefined;
        this.bookingInfo = undefined;
        this.eventInfo = undefined;
        this.name = '';
        this.email = '';
        this.guestEmails = [];
        this.guestEmailErrors = {};
        this.isNameValid = true;
        this.isEmailValid = true;
        this.validationError = { name: '', email: '' };
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() {
        utils.debug('nylas-booking-form', 'componentWillLoad', this.bookingInfo);
        if (this.bookingInfo) {
            this.name = this.bookingInfo.primaryParticipant?.name;
            this.email = this.bookingInfo.primaryParticipant?.email;
        }
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue.primaryParticipant) {
            this.name = newValue.primaryParticipant.name;
            this.email = newValue.primaryParticipant.email;
        }
    }
    changeName(name) {
        this.isNameValid = true;
        this.validationError.name = '';
        this.name = name;
        this.nameChanged.emit(name);
    }
    changeEmail(email) {
        this.isEmailValid = true;
        this.validationError.email = '';
        this.email = email;
        this.emailChanged.emit(email);
    }
    resetGuestEmailError(guestIndex) {
        const errors = { ...this.guestEmailErrors };
        delete errors[guestIndex];
        this.guestEmailErrors = { ...errors };
    }
    render() {
        return (index.h(index.Host, { key: '018357db1ce7dbbeb11ebc236b869a3baf246c69' }, index.h("form", { key: '5f26a98903372d4c587df1d1045bcb240c4ee7cd', onSubmit: e => this.bookButtonClickedHandler(e), noValidate: true }, index.h("div", { key: '4ad84c89bb19933cb5d8403939104c38705ddfba', class: "nylas-booking-form" }, index.h("slot", { key: 'c594f51e9d8cbd40e1d42f9aa86baae536a9c7e7', name: "custom-booking-form" }, index.h("div", { key: 'fe026c1562cb85c773e31cec8a0a3574b3515e0c', class: "input-wrapper" }, index.h("label", { key: '27ecf20858dd3133ec4914970f7148720bc603ed', htmlFor: "name", class: { 'input-label': true, 'error': !this.isNameValid }, part: "nbf__input-label" }, "Name ", index.h("span", { key: '4a39ea8d7aa693f860c17aa28b2130ae49f31a1c', class: "required" }, "*")), index.h("input", { key: '69fb70d74fe3b3cd883ca7fc0a9f174b6f81936a', id: "name", type: "text", placeholder: "Enter your name", value: this.name, class: {
                input: true,
                error: !this.isNameValid,
            }, part: "nbf__input-textfield", onInput: (e) => this.changeName(e.target?.value) }), index.h("p", { key: 'e4be03fd299cbc94713e5561fb9ed69a78af200c', class: "help-text" }, this.validationError.name)), index.h("div", { key: '017e724bfd408c5bde7714ae8b2a941d4a1194d9', class: "input-wrapper" }, index.h("label", { key: 'ed19f30d50d5d2ae95bcbf567b5c888b7906463d', htmlFor: "email", class: { 'input-label': true, 'error': !this.isEmailValid }, part: "nbf__input-label" }, "Email ", index.h("span", { key: '9b3ab493851edfcc407a38fad0994da171ac9976', class: "required" }, "*")), index.h("input", { key: '768690b3cc350537be1fa39cc7a295f688c1d91d', id: "email", type: "email", placeholder: "Enter your email", value: this.email, class: {
                input: true,
                error: !this.isEmailValid,
            }, part: "nbf__input-textfield", onInput: (e) => this.changeEmail(e.target?.value) }), index.h("p", { key: '24a39d859e700d000a363fe8df2f000365542fb0', class: "help-text" }, this.validationError.email)))), index.h("div", { key: '40b4b99dcf471afb8079d49fb9a0efe6bb7e406c', class: "cta" }, index.h("sp-button", { key: 'ae6bc3f620953f355184c7aef3ce692c2509c81d', treatment: "outline", variant: "secondary", class: 'back', part: "nbf__button-outline", onClick: this.handleBackButtonClicked }, index.h("slot", { key: 'e5a10ff0978756f7c3f8751a7aca6e3281f5046b', name: "booking-form-back-label" }, "Back")), index.h("sp-button", { key: '3aa5fe99000d52ef64db4191950109caeb526878', variant: "primary", class: 'book', part: "nbf__button-primary", type: "submit" }, this.isLoading && index.h("loading-icon", { slot: "icon" }), index.h("slot", { key: '83c5332efd5eb82617dc0a0f5275950431d95c26', name: "booking-form-book-label" }, "Book now"))))));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "bookingInfo": ["bookingInfoChangedHandler"]
    }; }
};
__decorate$6([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-form',
        stateToProps: new Map([
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.eventInfo', 'eventInfo'],
        ]),
        eventToProps: {
            backButtonClicked: async (_event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.toggleAdditionalData(false);
            },
            nameChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantName(event.detail);
            },
            emailChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantEmail(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", []),
    __metadata$6("design:returntype", void 0)
], NylasBookingForm.prototype, "render", null);
NylasBookingForm.style = NylasBookingFormStyle0;

const nylasCancelBookingFormCss = ":host{display:block;width:400px;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}sp-theme{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.nylas-cancel-booking-form{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}.nylas-cancel-booking-form__title{font-size:18px;font-weight:600;margin-bottom:0;color:var(--nylas-base-900)}.nylas-cancel-booking-form__description{font-size:1rem;font-style:normal;font-weight:400;line-height:140%;color:var(--nylas-base-600)}.nylas-cancel-booking-form__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}sp-button{background-color:var(--nylas-base-0);color:var(--nylas-base-700);border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);font-size:16px;font-weight:600;width:100%;height:48px;padding:8px;line-height:24px;font-family:var(--nylas-font-family)}sp-button.cancel{margin-top:1.25rem;background-color:var(--nylas-primary);color:var(--nylas-base-0)}sp-button.cancel:hover,sp-button.cancel:focus{background-color:var(--nylas-base-600)}sp-button.cancel:active{background-color:var(--nylas-base-800)}sp-button.back{margin-top:0.5rem}sp-button.back:hover,sp-button.back:focus{border-color:var(--nylas-primary)}sp-button.back:active{border-color:var(--nylas-base-600)}sp-field-label{margin-top:1rem;display:flex;color:var(--nylas-base-800);font-size:14px}sp-field-label.error{color:var(--nylas-error)}sp-field-label span.required{color:var(--nylas-error)}sp-textfield{--spectrum-textfield-border-color:var(--nylas-base-300);--spectrum-textfield-icon-color-invalid:var(--nylas-error);position:relative;width:100%;height:48px;margin-bottom:16px;background-color:var(--nylas-base-0);color:var(--nylas-base-500)}sp-textfield.error{--spectrum-textfield-border-color:var(--nylas-error)}sp-help-text{margin:0.25rem 0 1rem 0;color:var(--nylas-error)}";
const NylasCancelBookingFormStyle0 = nylasCancelBookingFormCss;

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelBookingForm = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.goBackButtonClicked = index.createEvent(this, "goBackButtonClicked", 7);
        this.cancelBookingFormSubmitted = index.createEvent(this, "cancelBookingFormSubmitted", 7);
        this.cancelBookedEventError = index.createEvent(this, "cancelBookedEventError", 7);
        this.cancelBookingFormError = index.createEvent(this, "cancelBookingFormError", 7);
        this.handleGoBackClicked = () => {
            this.goBackButtonClicked.emit();
        };
        this.handleSubmitCancelBooking = (event) => {
            event.preventDefault();
            if (!this.cancellationReason) {
                this.cancellationError = 'Please provide a reason for cancellation.';
                this.cancelBookingFormError.emit({ title: 'Cancel booking form error', description: 'Please provide a reason for cancellation.' });
                return;
            }
            utils.debug(`[nylas-cancel-booking-form] Cancel booking form submitted with reason: ${this.cancellationReason}`);
            const errorHandler = (error) => {
                this.cancelBookedEventError.emit(error);
            };
            this.cancelBookingFormSubmitted.emit({ bookingId: this.cancelBookingId, reason: this.cancellationReason, errorHandler });
        };
        this.handleOnChangeCancellationReason = (event) => {
            this.cancellationError = '';
            this.cancellationReason = event.target.value;
        };
        this.cancelBookingId = undefined;
        this.cancellationReason = '';
        this.cancellationError = '';
    }
    connectedCallback() {
        utils.debug(`[nylas-cancel-booking-form] Component connected`);
    }
    async componentWillLoad() {
        utils.debug(`[nylas-cancel-booking-form] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-cancel-booking-form] Component did load`);
    }
    disconnectedCallback() {
        utils.debug(`[nylas-cancel-booking-form] Component disconnected`);
    }
    render() {
        return (index.h(index.Host, { key: '98dc29d53d8a05beb16dea271cab5c574df4dfd0', part: "ncec" }, index.h("sp-theme", { key: '04feb774090fb57270a3d3c05576687ec78c230d', theme: "spectrum", scale: "medium" }, index.h("div", { key: '024a947c805b9f2ab6204a8548e9c775078fa969', class: "nylas-cancel-booking-form", part: "ncec__card" }, index.h("div", { key: '93295919797719199fbbe6eccdef4e42045c330d', class: "nylas-cancel-booking-form__calendar-icon", part: "ncec__icon" }, index.h("calendar-cancel-icon", { key: 'b8da092aa626ebdef64dd3f2f54ca2df5082d1f3' })), index.h("h3", { key: '8e33cc23c5bc26aa8e5c979814fa5a398c798237', class: "nylas-cancel-booking-form__title", part: "ncec__title" }, "Cancel booking?"), index.h("div", { key: '2c8cd37241e6cfe38bb012be4d700ae03c33876e', class: "nylas-cancel-booking-form__description", part: "ncec__description" }, "Your current timeslot will become available to others."), index.h("form", { key: 'be720382bd84086cd8a25279dd4ec58dbfc113e6', onSubmit: this.handleSubmitCancelBooking }, index.h("sp-field-label", { key: 'fadd2793a898975b8ba8da0549bcbb37879a68bf', for: "cancel-reason", class: this.cancellationError ? 'error' : '' }, "Reason for cancellation ", index.h("span", { key: '0748781625ea7ec8332b4ca20eae8986ad9e8efb', class: "required" }, "*")), index.h("sp-textfield", { key: 'e8daf40a5c26b1e6b9b59ab42bbe613da72c987a', id: "cancel-reason", class: this.cancellationError ? 'error' : '', part: "ncec__reason-textarea", multiline: true, value: this.cancellationReason, onInput: this.handleOnChangeCancellationReason, onFocus: this.handleOnChangeCancellationReason, invalid: !!this.cancellationError }, index.h("sp-help-text", { key: 'f876e2f41098845a235fe2b563e85891843d5351', slot: "negative-help-text" }, this.cancellationError)), index.h("sp-button", { key: 'a05211715fda7fa75935c974bd20ce6c6ef4206a', variant: "primary", class: "cancel", type: "submit", part: "ncec__button-cta" }, "Cancel booking"), index.h("sp-button", { key: '3dd7832e698181eaca4df52835d64c09b664f5f9', variant: "secondary", class: "back", treatment: "outline", part: "ncec__button-outline", onClick: this.handleGoBackClicked }, "Go back"))))));
    }
};
__decorate$5([
    registerComponent.RegisterComponent({
        name: 'nylas-cancel-booking-form',
        eventToProps: {
            cancelBookingFormSubmitted: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.cancelBooking(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$5("design:type", Function),
    __metadata$5("design:paramtypes", []),
    __metadata$5("design:returntype", void 0)
], NylasCancelBookingForm.prototype, "render", null);
NylasCancelBookingForm.style = NylasCancelBookingFormStyle0;

const nylasCancelledEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}sp-theme{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.nylas-cancelled-event-card{display:flex;align-items:center;flex-direction:column;width:400px;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.nylas-cancelled-event-card{width:inherit}}.nylas-cancelled-event-card__title{font-size:18px;font-weight:600;line-height:24px;color:var(--nylas-base-900);text-align:center}.nylas-cancelled-event-description{font-size:16px;font-weight:500;color:var(--nylas-base-600)}.nylas-cancelled-event-card__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}.nylas-cancelled-event-card__cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;margin-top:1rem}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}sp-button{background-color:var(--nylas-base-0);color:var(--nylas-base-700);border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);font-size:1rem;height:48px;padding:8px;line-height:24px;width:100%}sp-button:hover,sp-button:focus{border-color:var(--nylas-primary)}sp-button:active{border-color:var(--nylas-base-600)}";
const NylasCancelledEventCardStyle0 = nylasCancelledEventCardCss;

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelledEventCard = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.closeCancelEventCardClicked = index.createEvent(this, "closeCancelEventCardClicked", 7);
        this.cancelledEventCardError = index.createEvent(this, "cancelledEventCardError", 7);
        this.handleCloseClicked = () => {
            this.isClosing = true;
            const errorHandler = (error) => {
                this.cancelledEventCardError.emit(error);
                this.isClosing = false;
            };
            this.closeCancelEventCardClicked.emit({ errorHandler });
        };
        this.cancelledEventInfo = undefined;
        this.isClosing = false;
        this.configSettings = undefined;
    }
    connectedCallback() {
        utils.debug(`[nylas-cancelled-event-card] Component connected`);
    }
    async componentWillLoad() {
        utils.debug(`[nylas-cancelled-event-card] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-cancelled-event-card] Component did load`);
    }
    disconnectedCallback() {
        utils.debug(`[nylas-cancelled-event-card] Component disconnected`);
    }
    render() {
        return (index.h(index.Host, { key: '105954b6497f7a8cf45faedb592896629e90c6d0', part: "ncec" }, index.h("sp-theme", { key: 'd248975c2139a611ab60c5c585d87e8701327a4b', theme: "spectrum", color: "dark", scale: "medium" }, index.h("div", { key: '090b767111679ca9968ac0b128c6685fed6e39db', class: "nylas-cancelled-event-card", part: "ncec__card" }, index.h("div", { key: 'ae1e57f0f2a39f5ad7f4b7b9ed493f3e93ccdeba', class: "nylas-cancelled-event-card__calendar-icon", part: "ncec__icon" }, index.h("calendar-cancel-icon", { key: '06250b1c0f330957f0f691d0f7724c608dffa28b' })), index.h("h3", { key: '1826c12ca770476cfd206d9d1a3b80f0d890da56', class: "nylas-cancelled-event-card__title", part: "ncec__title" }, "Your booking has been cancelled successfully!"), index.h("div", { key: '93c4c7e4ed245372e736c61c30b23e9be11453ec', class: "nylas-cancelled-event-card__description", part: "ncec__description" }, "A cancellation email has been sent to ", this.configSettings?.organizer?.name || 'the participants', "."), index.h("div", { key: '21162d4c4e2ee6c2f95038b0e25e9ad0aed63742', class: "nylas-cancelled-event-card__cta" }, index.h("sp-button", { key: 'ab6cb1da324717c3b375c9280f307a2590224f27', variant: "secondary", treatment: "outline", disabled: this.isClosing, part: "ncec__button-outline", onClick: this.handleCloseClicked }, this.isClosing ? 'Closing...' : 'Close'))))));
    }
};
__decorate$4([
    registerComponent.RegisterComponent({
        name: 'nylas-cancelled-event-card',
        stateToProps: new Map([['scheduler.configSettings', 'configSettings']]),
        eventToProps: {
            closeCancelEventCardClicked: async (_, nylasschedulerconnector) => {
                const result = await nylasschedulerconnector.scheduler.resetCancel();
                const { errorHandler } = _.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", []),
    __metadata$4("design:returntype", void 0)
], NylasCancelledEventCard.prototype, "render", null);
NylasCancelledEventCard.style = NylasCancelledEventCardStyle0;

const t0 = new Date, t1 = new Date;

function timeInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = (date) => {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = (date, step) => {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = (start, stop, step) => {
    const range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    let previous;
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? (d) => field(d) % step === 0
              : (d) => interval.count(0, d) % step === 0);
    };
  }

  return interval;
}

const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;

const timeDay = timeInterval(
  date => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  date => date.getDate() - 1
);

timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});

timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});

const nylasDatePickerCss = ":host{display:block;min-height:444px;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}@media screen and (max-width: 768px){:host{min-height:auto}}.nylas-date-picker{display:flex;gap:1rem;flex-direction:column}.header{margin:0 0.5rem;height:48px}.header h2{font-size:1.3125rem;font-weight:400;line-height:1rem;color:var(--nylas-base-800)}.header h2 strong{font-weight:600}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.dates{display:grid;justify-items:center;grid-template-columns:repeat(7, 1fr);gap:0.5rem;margin-bottom:1rem}.dates .date{position:relative;display:flex;flex-direction:row;justify-content:center;align-items:center;height:48px;width:48px;min-width:2rem;min-height:2rem;cursor:pointer;border-radius:var(--nylas-border-radius-2x);font-size:16px;font-weight:600;font-family:inherit;color:var(--nylas-base-text);background-color:var(--nylas-base-100);cursor:pointer;border:none}@media screen and (max-width: 412px){.dates .date{width:38px;height:38px;min-width:none}}.dates .date:hover:not(:disabled){box-shadow:0 0 0 2px var(--nylas-base-500) inset}.dates .date.date.current-month{color:var(--nylas-base-800)}.dates .date.date.selected{background-color:var(--nylas-primary);color:var(--nylas-base-0);font-weight:700}.dates .date.date.day-skeleton{color:var(--nylas-base-300)}.dates .date:disabled{color:var(--nylas-base-300);background-color:transparent;font-weight:400;cursor:not-allowed}.dates .day{font-size:12px;color:var(--nylas-base-800);font-weight:600;letter-spacing:0.5px;height:32px;display:flex;align-items:center}@media screen and (max-width: 768px){.dates .day{font-size:14px}}.dates .date.day-skeleton{height:48px;width:48px;border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite ease-in-out;background-color:var(--nylas-base-50)}@media screen and (max-width: 412px){.dates .date.day-skeleton{width:38px;height:38px;min-width:none}}.dates .date.current-day::after{content:\"\";position:absolute;bottom:6px;left:50%;transform:translateX(-50%);width:6px;height:6px;border-radius:50%;background-color:var(--nylas-base-500)}.dates .date.current-day.selected::after{background-color:var(--nylas-base-100)}.pagination{display:flex;flex-direction:row;justify-content:space-between;align-items:center;min-width:92px}.pagination .chevron-right{transform:rotate(180deg)}.pagination .button{display:flex;flex-direction:row;justify-content:center;align-items:center;height:3vh;width:3vh;min-width:3em;min-height:3em;cursor:pointer;border-radius:var(--nylas-border-radius-2x);background-color:transparent;color:var(--nylas-base-800);cursor:pointer;border:none}.pagination .button:hover{background-color:var(--nylas-base-50)}.pagination .button:active{background-color:var(--nylas-base-100)}.pagination .button:disabled{background-color:transparent;color:var(--nylas-base-300);cursor:not-allowed}.flex-row{display:flex;flex-direction:row;justify-content:space-between;align-items:center;color:var(--nylas-base-500)}";
const NylasDatePickerStyle0 = nylasDatePickerCss;

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasDatePicker = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.dateSelected = index.createEvent(this, "dateSelected", 7);
        this.monthChanged = index.createEvent(this, "monthChanged", 7);
        this.selectableDates = undefined;
        this.selectedDate = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.month = this.selectedDate || new Date();
        this.dates = this.getDates();
        this.disableNextMonthButton = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    getDates() {
        const lastDayOfMonth = utils.getLastDayOfMonth(this.month);
        const firstDayOfMonth = utils.getFirstDayOfMonth(this.month);
        return timeDay.range(timeDay.offset(firstDayOfMonth, -firstDayOfMonth.getDay()), timeDay.offset(lastDayOfMonth, 7 - lastDayOfMonth.getDay()));
    }
    selectDate(date) {
        this.dateSelected.emit(date);
    }
    changeMonth(change) {
        this.month = new Date(this.month.getFullYear(), this.month.getMonth() + change, 1);
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = this.configSettings?.scheduler?.available_days_in_future;
        const endDate = utils.addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
        this.dates = this.getDates();
        this.monthChanged.emit(this.month);
        this.selectDate();
    }
    isSelected(date, selectedDate, selectableDates) {
        return date && selectedDate && utils.isSameDay(date, selectedDate) && selectableDates && selectableDates?.length > 0;
    }
    isDisabled(date, selectableDates) {
        return date && selectableDates?.find(d => utils.isSameDay(d, date)) === undefined;
    }
    render() {
        return (index.h(index.Host, { key: 'd6122ec547ac33e6febfe41497a1bd3de1eeb6b3', part: "ndp" }, index.h("div", { key: 'cee58b509bf57156342c7506a020b64611f62209', class: "nylas-date-picker" }, index.h("div", { key: 'bb3a8356004b07fd86fb05961eb400215b824e3a', class: 'header flex-row' }, index.h("h2", { key: '681f87b531eaa6c26b99bb2616fd59cd388e6bd9', part: 'ndp__month-header' }, index.h("strong", { key: 'e93fb4feacb91042cbfa8bb65b0a196fafb343d2' }, this.month.toLocaleDateString(undefined, { month: 'long' })), "\u00A0", this.month.toLocaleDateString(undefined, { year: 'numeric' })), index.h("div", { key: 'fb4c4671c2cf24d4ae2ddf1077d0431a8a6261a8', class: 'pagination' }, index.h("button", { key: '6810b244baf594e6a9c69b2916704744a0d18f74', onClick: () => this.changeMonth(-1), class: { 'chevron-left': true, 'button': true }, disabled: !this.selectableDates?.length || this.month <= new Date(), part: "ndp__month-button" }, index.h("chevron-icon", { key: '8a14ef5e447da88e3c1c19b77f7d42454243dd4e' })), index.h("button", { key: 'aa6efd17b59da3308fec14032c64017849750702', onClick: () => this.changeMonth(1), class: { 'chevron-right': true, 'button': true }, disabled: !this.selectableDates?.length || this.disableNextMonthButton, part: "ndp__month-button" }, index.h("chevron-icon", { key: '3a1704b4c41d92ac54a6936e487402a98bba5de1' })))), index.h("div", { key: '85910baac9b8b411ebfede44c0a11bff2e489efe', class: 'dates' }, ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map(day => {
            return (index.h("div", { class: 'day', part: "ndp__day" }, day));
        }), this.dates.map((date, i) => {
            const isDisabled = this.isDisabled(date, this.selectableDates);
            if (this.isLoading) {
                return (index.h("button", { disabled: true, class: {
                        'date day-skeleton': true,
                        'current-month': utils.isSameMonth(date, this.month),
                    }, style: { animationDelay: `${i * 20}ms` }, part: 'ndp__date' }, date.getDate()));
            }
            return (index.h("button", { class: {
                    'date': true,
                    'selected': !!(this.selectedDate && utils.isSameDay(date, this.selectedDate) && this.selectableDates && this.selectableDates?.length > 0),
                    'current-day': utils.isSameDay(date, new Date()),
                    'current-month': utils.isSameMonth(date, this.month),
                }, "aria-lang": date.toLocaleDateString(undefined, { dateStyle: 'full' }), disabled: isDisabled, onClick: () => this.selectDate(date), part: `ndp__date ${this.isSelected(date, this.selectedDate, this.selectableDates) ? 'ndp__date--selected' : ''} ${utils.isSameDay(date, new Date()) ? 'ndp__date--current-day' : ''} ${utils.isSameMonth(date, this.month) ? 'ndp__date--current-month' : ''}` }, date.getDate()));
        })))));
    }
};
__decorate$3([
    registerComponent.RegisterComponent({
        name: 'nylas-date-picker',
        stateToProps: new Map([
            ['scheduler.selectableDates', 'selectableDates'],
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            dateSelected: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectDate(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", void 0)
], NylasDatePicker.prototype, "render", null);
NylasDatePicker.style = NylasDatePickerStyle0;

const nylasLocaleSwitchCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-locale-switch{display:flex;flex-direction:row;justify-content:space-between;align-items:center;height:68px;border-left:none;border-right:none;color:var(--nylas-base-50);font-size:14px;font-weight:600;cursor:pointer;transition:all 0.2s ease-in-out;font-family:inherit}@media screen and (max-width: 768px){.nylas-locale-switch{font-size:16px}}.select-wrapper{display:flex;align-items:center;gap:0.5rem}select{border:none;background:transparent;cursor:pointer;outline:none;background-color:transparent;margin:0 0 1px;padding:4px;vertical-align:middle}select#timezone{width:140px}select#language{width:80px}span.timezone-label{display:flex;width:-webkit-fill-available;justify-content:space-between}";
const NylasLocaleSwitchStyle0 = nylasLocaleSwitchCss;

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLocaleSwitch = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.timezoneChanged = index.createEvent(this, "timezoneChanged", 7);
        this.languageChanged = index.createEvent(this, "languageChanged", 7);
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = navigator.language;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    changeTimezone(timezone) {
        this.selectedTimezone = timezone;
        this.timezoneChanged.emit(timezone);
    }
    changeLanguage(language) {
        this.selectedLanguage = language;
        this.languageChanged.emit(language);
    }
    selectedOptionChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.changeTimezone(value);
        }
        else if (name === 'language') {
            this.changeLanguage(value);
        }
    }
    getTimezoneLabelHTML(timezone) {
        const offset = constants.getTimezoneOffset(timezone);
        return (index.h("span", { class: "timezone-label", style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                width: '-webkit-fill-available',
            } }, constants.TIMEZONE_MAP[timezone], ' ', index.h("span", { class: "timezone-offset", style: {
                fontSize: '14px',
                fontWeight: '400',
                color: 'var(--nylas-base-500)',
            } }, offset)));
    }
    render() {
        const timezoneOptions = Object.keys(constants.TIMEZONE_MAP).map(key => ({
            labelHTML: this.getTimezoneLabelHTML(key),
            label: constants.TIMEZONE_MAP[key],
            value: key,
        }));
        const languageOptions = Object.keys(constants.LANGUAGE_MAP).map(key => ({
            label: constants.LANGUAGE_MAP[key],
            value: key,
        }));
        return (index.h(index.Host, { key: '9b59f6361d95bf132b22ff7d03edd20c58d81f9a' }, index.h("div", { key: 'f2ebeeaed33b6e750f71d23ca24aa2d1ad858a10', class: "nylas-locale-switch" }, index.h("div", { key: '3bb086e794c113b62d88b458f213beaeb28bf5c7', class: {
                'select-wrapper': true,
                'timezone': true,
            } }, index.h("select-dropdown", { key: '169822d4f1c58f795f0a9189c074699814a2790e', name: "timezone", options: timezoneOptions, defaultSelectedOption: timezoneOptions.find(op => op.value == this.selectedTimezone) }, index.h("span", { key: '54fd84316990a375e60291bc68406a2fd1a43f57', slot: "select-icon" }, index.h("globe-icon", { key: '2cd6a94baef61202b97411e10cb212b48ddd527a', width: "20", height: "20" })))), index.h("div", { key: '39e1a7f52109e87ebfcd41f5eb35146a21ab7911', class: {
                'select-wrapper': true,
                'language': true,
            } }, index.h("select-dropdown", { key: 'b803b2685efe46673d125b3d10714bafd48197c1', name: "language", options: languageOptions, defaultSelectedOption: languageOptions.find(lang => lang.value == this.selectedLanguage) }, index.h("span", { key: 'b8a7d37f9bd60a14f2652fd17d7572b2bd853ee7', slot: "select-icon" }, index.h("translate-icon", { key: 'b36f31c8ddec7a70fdce4154006fce11af4e3bb3', width: "20", height: "20" })))))));
    }
};
__decorate$2([
    registerComponent.RegisterComponent({
        name: 'nylas-locale-switch',
        stateToProps: new Map([
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
        ]),
        eventToProps: {
            timezoneChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectTimezone(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$2("design:type", Function),
    __metadata$2("design:paramtypes", []),
    __metadata$2("design:returntype", void 0)
], NylasLocaleSwitch.prototype, "render", null);
NylasLocaleSwitch.style = NylasLocaleSwitchStyle0;

const iconCss = ".sc-nylas-logo-h{display:flex}";
const NylasLogoStyle0 = iconCss;

const NylasLogo = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.width = '69';
        this.height = '24';
    }
    render() {
        return (index.h("svg", { key: '5aea87a70e3fd0d4db9231f986662a0e51d5225e', width: this.width, height: this.height, viewBox: "0 0 69 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index.h("g", { key: '635ee7b2cff95d3949dc8a7aba5d7897ac42bec8', "clip-path": "url(#clip0_455_3543)" }, index.h("path", { key: '818b4ab1d5087f3dbd4b65ec92c46da729b7b034', d: "M15.8092 3.03248C14.6497 1.86996 13.1076 1.23047 11.4646 1.23047C9.82156 1.23047 8.27753 1.86996 7.11999 3.03248L0.835347 9.33381C0.686846 9.4827 0.60498 9.68123 0.60498 9.89312C0.60498 10.105 0.686846 10.3035 0.835347 10.4524C0.983848 10.6013 1.18185 10.6834 1.39318 10.6834C1.60451 10.6834 1.80251 10.6013 1.95101 10.4524L8.23374 4.15111C10.0139 2.36627 12.9134 2.36627 14.6935 4.15111C16.4736 5.93785 16.4756 8.84322 14.6935 10.6281L8.4108 16.9275C8.10428 17.2348 8.10428 17.7368 8.4108 18.0461C8.5593 18.195 8.75731 18.2771 8.96863 18.2771C9.17996 18.2771 9.37796 18.195 9.52646 18.0461L15.8092 11.7467C16.9687 10.5841 17.6064 9.03793 17.6064 7.39053C17.6064 5.74314 16.9687 4.19501 15.8092 3.03439V3.03248Z", fill: "currentColor" }), index.h("path", { key: '0519037016d40d4c264b929f042bffde6fcb4095', d: "M14.9296 7.39038C14.9296 6.46074 14.5698 5.58837 13.9148 4.93361C12.5631 3.57828 10.3641 3.57828 9.01239 4.93361L0.663961 13.3023C0.51546 13.4512 0.433594 13.6497 0.433594 13.8616C0.433594 14.0735 0.51546 14.272 0.663961 14.4209C0.812462 14.5698 1.01046 14.6519 1.22179 14.6519C1.43312 14.6519 1.63112 14.5698 1.77962 14.4209L10.0367 6.1515L10.05 6.13623C10.0747 6.10759 10.1014 6.07705 10.128 6.05033C10.1585 6.01978 10.1928 5.99115 10.2251 5.96252L10.2442 5.94534C10.9886 5.31349 12.1119 5.3593 12.8011 6.05033C13.4903 6.74135 13.536 7.78171 12.9705 8.53192L12.9648 8.53955C12.9058 8.61591 12.8544 8.67699 12.8011 8.73044C12.7497 8.78198 12.6906 8.83352 12.6069 8.90033L4.45264 17.0991C4.30414 17.248 4.22227 17.4465 4.22227 17.6584C4.22227 17.8703 4.30414 18.0689 4.45264 18.2177C4.60114 18.3666 4.79914 18.4487 5.01047 18.4487C5.2218 18.4487 5.4198 18.3666 5.5683 18.2177L13.9167 9.84716C14.5698 9.1924 14.9315 8.31812 14.9315 7.39038H14.9296Z", fill: "currentColor" }), index.h("path", { key: '10efd16fe4864b407bed8c54611001c6a0f5098f', d: "M10.6821 9.11238C10.4727 9.01694 10.2861 8.88904 10.1281 8.7306C9.97008 8.57216 9.84252 8.38508 9.74733 8.1751L9.69021 8.05103L0.467916 17.2978C0.287049 17.4792 0.174721 17.7082 0.149971 17.9411C0.125221 18.1778 0.19376 18.3897 0.344165 18.5405C0.471724 18.6684 0.65259 18.739 0.850592 18.739C1.11142 18.739 1.37796 18.6207 1.58358 18.4145L10.8059 9.16774L10.6821 9.11047V9.11238Z", fill: "currentColor" }), index.h("path", { key: '0282ae1035c07bd0f8af5c3530ce7ce799dc2dc1', d: "M68.401 10.6185C68.2126 10.2692 67.9593 9.97334 67.6433 9.73854C67.3235 9.49993 66.956 9.31094 66.5486 9.17541C66.1316 9.03606 65.7033 8.91771 65.2749 8.81844C64.7951 8.70582 64.3039 8.57983 63.8165 8.44811C63.3196 8.31258 62.9065 8.14269 62.5905 7.94225C62.4743 7.88689 62.3391 7.76663 62.3391 7.50129C62.3391 7.39821 62.3639 7.29704 62.4153 7.19587L62.4248 7.18059C62.5352 7.02216 62.7142 6.8828 62.975 6.75109C63.234 6.62128 63.609 6.55829 64.1231 6.55829C64.5286 6.55829 64.877 6.61365 65.1569 6.72436C65.4348 6.83508 65.6652 6.96871 65.8442 7.12524C66.0212 7.27986 66.1659 7.45357 66.2782 7.63873C66.3563 7.76854 66.4267 7.89262 66.4858 8.00525L68.2754 6.84081C68.1669 6.59456 68.0146 6.33495 67.8204 6.0677C67.6033 5.768 67.3254 5.4893 66.9922 5.23732C66.659 4.98534 66.2516 4.77345 65.7813 4.60929C65.3111 4.44512 64.7532 4.36304 64.1231 4.36304C63.3844 4.36304 62.7599 4.46421 62.2706 4.66083C61.7813 4.85935 61.3815 5.09988 61.0845 5.37667C60.7875 5.65346 60.5628 5.95125 60.4143 6.2605C60.2639 6.57547 60.1611 6.85799 60.1078 7.10233C60.0945 7.18059 60.0812 7.27031 60.0678 7.36767C60.0545 7.4593 60.0469 7.5452 60.0469 7.62537C60.0469 8.13314 60.1745 8.56074 60.4239 8.89671C60.679 9.24222 61.0045 9.53429 61.391 9.76336C61.7813 9.99624 62.2116 10.1852 62.6704 10.3227C63.1388 10.462 63.5862 10.5823 64.0012 10.6796C64.4067 10.777 64.7932 10.8782 65.1531 10.9774C65.5224 11.0786 65.8289 11.2122 66.0631 11.3745C66.2801 11.5425 66.3887 11.7448 66.3887 11.9777C66.3887 12.2278 66.2916 12.4263 66.0993 12.5695C65.9279 12.6954 65.7261 12.7985 65.4958 12.8711C65.273 12.9436 65.0407 12.9913 64.8066 13.0142C64.58 13.0352 64.3915 13.0467 64.2468 13.0467C63.8032 13.0467 63.4224 13.0028 63.1197 12.915C62.8151 12.8272 62.5638 12.7241 62.3734 12.6057C62.1811 12.4874 62.0288 12.3614 61.9222 12.2316C61.8213 12.1094 61.747 12.0082 61.7014 11.9319L61.4957 11.6303L59.708 12.7928C59.8508 13.0161 60.0298 13.2643 60.2392 13.5296C60.4772 13.8293 60.7837 14.1138 61.153 14.3734C61.5224 14.633 61.966 14.8525 62.4724 15.0243C62.9788 15.1961 63.5748 15.282 64.2468 15.282C64.797 15.282 65.2901 15.2324 65.7166 15.137C66.1412 15.0396 66.5162 14.9117 66.8285 14.7552C67.1388 14.6005 67.4015 14.4192 67.6109 14.2149C67.8223 14.0107 67.9974 13.8026 68.1326 13.6003C68.4563 13.1135 68.6409 12.5504 68.6828 11.9262C68.6828 11.4069 68.5876 10.9641 68.401 10.6166V10.6185Z", fill: "currentColor" }), index.h("path", { key: '16e1d732c5e6eee5f772d45085103b099c3130bf', d: "M26.3585 4.27905C23.7901 4.27905 21.6997 6.37504 21.6997 8.95017V15.0701H23.9291V8.95017C23.9291 7.6082 25.0181 6.5163 26.3565 6.5163C27.695 6.5163 28.784 7.6082 28.784 8.95017V15.0701H31.0134V8.95017C31.0134 6.37504 28.9229 4.27905 26.3546 4.27905H26.3585Z", fill: "currentColor" }), index.h("path", { key: '495550fe08ebeba1c89726b7009112e89088472a', d: "M53.4522 4.27905C50.4251 4.27905 47.9634 6.74728 47.9634 9.78245C47.9634 12.8176 50.427 15.2859 53.4522 15.2859C54.5545 15.2859 55.6188 14.9594 56.5288 14.3409L56.7116 14.2169V15.0682H58.941V9.78245C58.941 6.74728 56.4793 4.27905 53.4522 4.27905ZM53.4522 13.0505C51.655 13.0505 50.1928 11.5845 50.1928 9.78245C50.1928 7.98044 51.655 6.51439 53.4522 6.51439C55.2494 6.51439 56.7116 7.98044 56.7116 9.78245C56.7116 11.5845 55.2494 13.0505 53.4522 13.0505Z", fill: "currentColor" }), index.h("path", { key: 'effe06423b66ff0a533bfb8ec6d9a0cbbf19f765', d: "M45.5795 10.6166V0.356201H43.3501V10.6166C43.3501 13.1517 45.3758 15.2228 47.8908 15.2858V13.0486C46.6057 12.9875 45.5795 11.9204 45.5795 10.6166Z", fill: "currentColor" }), index.h("path", { key: '785098f3a2ac3a19e79056e355365fd8ccc81cd9', d: "M39.5428 4.4967V10.63C39.5428 11.6761 38.8669 12.621 37.9016 12.9284C37.1249 13.1746 36.3157 13.0486 35.6817 12.5829C35.0592 12.1247 34.6879 11.3917 34.6879 10.6186V4.4967H32.4585V10.5995C32.4585 12.7165 33.8388 14.57 35.8131 15.1084C37.0354 15.4424 38.2995 15.2973 39.3695 14.7037L39.5428 14.6063V14.9747C39.5428 16.2766 38.5166 17.3437 37.2315 17.4067V19.6439C39.7465 19.5809 41.7722 17.5117 41.7722 14.9747V4.4967H39.5428Z", fill: "currentColor" })), index.h("defs", { key: '9466fc6ad025006936d16136c6f4be4b79282759' }, index.h("clipPath", { key: '901a3ef6048680de4ddbdd8e3fd8edfbb7afc0f3', id: "clip0_455_3543" }, index.h("rect", { key: 'aee5f90208b83c446e4ac3877ce788d0dcad0de3', width: "68.7123", height: "19.2877", fill: "white", transform: "translate(0.144043 0.356201)" })))));
    }
};
NylasLogo.style = NylasLogoStyle0;

const nylasNotificationCss = ":host{display:block;margin-bottom:-12px;width:100%;z-index:1;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.notif{display:flex;padding:17px;align-items:flex-start;justify-content:space-between;gap:16px;border-radius:var(--nylas-border-radius-2x);border:1.5px solid var(--nylas-error);background:var(--nylas-base-0)}@media screen and (max-width: 768px){.notif{width:auto}}.notif .content{display:flex;flex-direction:row;gap:8px}.notif .content .message{font-size:14px;font-weight:400;color:var(--nylas-base-800)}.notif .content .message .title{font-size:16px;font-weight:600;color:var(--nylas-base-950);display:block}.notif .content .message .description{font-size:14px;font-weight:400;color:var(--nylas-base-800);display:block}.notif .content .icon.error{color:var(--nylas-error)}.notif.error{border-color:var(--nylas-error)}.notif.warning{border-color:var(--nylas-warning)}.notif.info{border-color:var(--nylas-info)}.notif.success{border-color:var(--nylas-success)}.notif .dismiss-btn{background:none;border:none;color:var(--nylas-base-950);cursor:pointer}";
const NylasNotificationStyle0 = nylasNotificationCss;

const NylasNotification = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.ttl = 5000;
        this.allowedCategories = ['component', 'api', 'validation', 'invalid_session'];
        this.notifications = [];
    }
    onError(event) {
        utils.debug(`[nylas-notification] Error: ${event.detail.title}`);
        this.handleNotification(event);
    }
    onWarning(event) {
        utils.debug(`[nylas-notification] Warning: ${event.detail.title}`);
        this.handleNotification(event);
    }
    onInfo(event) {
        utils.debug(`[nylas-notification] Info: ${event.detail.title}`);
        this.handleNotification(event);
    }
    onSuccess(event) {
        utils.debug(`[nylas-notification] Success: ${event.detail.title}`);
        this.handleNotification(event);
    }
    handleNotification(event) {
        if (event.defaultPrevented) {
            utils.debug(`[nylas-notification] Event default prevented`);
            return;
        }
        if (this.ttl === 0) {
            utils.debug(`[nylas-notification] TTL is 0`);
            return;
        }
        if (this.allowedCategories.length > 0 && !this.allowedCategories.includes(event.detail.category)) {
            utils.debug(`[nylas-notification] Category not allowed`);
            return;
        }
        this.notifications = [...this.notifications, { ...event.detail }];
        if (event.detail.ttl !== 'none') {
            const ttl = event.detail.ttl ? event.detail.ttl : this.ttl;
            window.setTimeout(() => {
                this.notifications = this.notifications.filter(notif => notif.id !== event.detail.id);
            }, ttl);
        }
    }
    dismissNotification(id) {
        this.notifications = this.notifications.filter(notif => notif.id !== id);
    }
    render() {
        return (index.h(index.Host, { key: '16bd673245819e3ed76ba5689c3292be510e3cd7' }, index.h(index.Fragment, { key: 'd88e8ea863d00a8c982c7e26007c975526c7457f' }, this.notifications.map(notif => (index.h("div", { class: `notif ${notif.type}`, key: notif.id }, index.h("div", { class: "content" }, index.h("span", { class: `icon ${notif.type}` }, (notif.type === 'error' || notif.type === 'warning') && index.h("warning-icon", null)), index.h("span", { class: "message" }, index.h("span", { class: "title" }, notif.title), notif.description && index.h("span", { class: "description" }, notif.description))), index.h("button", { class: "dismiss-btn", onClick: () => this.dismissNotification(notif.id) }, index.h("close-icon", null))))), index.h("slot", { key: 'c40cb61ce0a1dbd3416824b7c26e08e3aea01eae' }))));
    }
};
NylasNotification.style = NylasNotificationStyle0;

const nylasSelectedEventCardCss = ":host{display:block}sp-theme{position:relative;height:inherit;display:flex;flex-direction:column;justify-content:center;align-items:center;font-family:var(--nylas-font-family)}.event-card{display:flex;align-items:center;flex-direction:column;width:calc(100% - 3rem);background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:3rem 1.5rem 1.5rem 1.5rem;position:relative;box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card{margin-bottom:2rem}}.nylas-selected-event-card__date{font-size:min(max(16px, 3vw), 18px);font-weight:600}.nylas-selected-event-card__time{font-size:min(max(14px, 3vw), 16px);font-weight:500}.calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-icon{display:flex;align-items:center;justify-content:center;height:100%}.event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:8px;gap:4px;align-items:center}@media screen and (max-width: 768px){.event-timezone{margin-bottom:16px}}";
const NylasSelectedEventCardStyle0 = nylasSelectedEventCardCss;

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasSelectedEventCard = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.selectedDate = undefined;
        this.selectedTimeslot = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.startTime = '';
        this.endTime = '';
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-selected-event-card] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-selected-event-card] Component did load`);
    }
    handleSelectedTimeslotChange(selectedTimeslot) {
        this.startTime = new Date(selectedTimeslot?.start_time).toLocaleString(undefined, { timeStyle: 'short' });
        this.endTime = new Date(selectedTimeslot?.end_time).toLocaleString(undefined, { timeStyle: 'short' });
    }
    render() {
        return (index.h(index.Host, { key: 'c84565db48fc177fd6f8af71db7f9776516cf46f', part: "nsec" }, index.h("sp-theme", { key: '7de2e148c85b878e735ac6a69a62892110de9b65', theme: "spectrum", color: "dark", scale: "medium" }, index.h("div", { key: '0a9f43a55c68fdd7d93b42600b94e2f10d551dd4', class: "event-card", part: "nsec__card" }, index.h("div", { key: '18b16b39d4c3d7c1a0f9c16c084d99f1b9b9ff5b', class: "calendar-icon", part: "nsec__icon" }, index.h("calendar-icon", { key: '92202409a7e922975ab31216d8f68c3fb8767cbe' })), index.h("div", { key: '79006fdf073ed56acec50e1e11ddf101fcfca81c', class: "nylas-selected-event-card__date", part: "nsec__date" }, this.selectedDate?.toLocaleDateString(undefined, { dateStyle: 'full' })), index.h("div", { key: '1f605b2bc03f290b5a5b3ac858256f438ac33651', class: "nylas-selected-event-card__time", part: "nsec__time" }, this.startTime, " - ", this.endTime)), index.h("div", { key: '03f9f64e0229904519984305751c388886838b99', class: "event-timezone", part: "nsec__timezone" }, index.h("globe-icon", { key: '7bd33f03d96671423199113ee24fe913f78c1bca' }), constants.TIMEZONE_MAP[this.selectedTimezone]))));
    }
    static get watchers() { return {
        "selectedTimeslot": ["handleSelectedTimeslotChange"]
    }; }
};
__decorate$1([
    registerComponent.RegisterComponent({
        name: 'nylas-selected-event-card',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", []),
    __metadata$1("design:returntype", void 0)
], NylasSelectedEventCard.prototype, "render", null);
NylasSelectedEventCard.style = NylasSelectedEventCardStyle0;

const nylasTimeslotPickerCss = ":host{display:block;height:calc(100% - 48px)}.time-picker-wrapper{display:flex;flex-direction:column;height:100%}.time-slots{position:relative;display:flex;flex-direction:column;gap:0.75rem;align-items:center;overflow-y:scroll;padding:0.5rem 1.5rem;flex:1}.time{box-sizing:border-box;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:4px 12px;gap:0.5rem;font-size:16px;font-weight:500;font-family:inherit;width:100%;height:48px;color:var(--nylas-base-800);background:var(--nylas-base-0);border:none;outline:1.5px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);flex:none;order:4;align-self:stretch;flex-grow:0;cursor:pointer}.time:hover,.time:focus{color:var(--nylas-primary);outline-color:var(--nylas-primary)}.time.selected{font-weight:600;color:var(--nylas-primary);outline:2px solid var(--nylas-primary);border-color:transparent;box-shadow:0 0 0 2px var(--nylas-primary)}.empty{text-align:center;padding:0 1.5rem;color:var(--nylas-base-600);font-size:min(max(12px, 2vw), 14px);height:450px;display:flex;align-items:center;justify-content:center}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.loading{padding:0 1.5rem}.loading .time-slot-skeleton{width:100%;height:4rem;background-color:var(--nylas-base-50);margin-bottom:0.5rem;border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite ease-in-out}.footer{width:100%;padding:10px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}.footer sp-button{padding:14px;color:var(--nylas-base-100);border-radius:var(--nylas-border-radius-2x);width:100%;height:48px;font-weight:600;font-size:16px;background-color:var(--nylas-primary);border:none}.footer sp-button:hover,.footer sp-button:focus{background-color:var(--nylas-base-600)}.footer sp-button:active{background-color:var(--nylas-base-800)}";
const NylasTimeslotPickerStyle0 = nylasTimeslotPickerCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasTimeslotPicker = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.timeslotSelected = index.createEvent(this, "timeslotSelected", 7);
        this.timeslotConfirmed = index.createEvent(this, "timeslotConfirmed", 7);
        this.handleConfirmedTimeslot = async (event, timeslot) => {
            event.preventDefault();
            utils.debug(`[nylas-timeslot-picker] Confirm timeslot`, timeslot);
            this.timeslotConfirmed.emit(timeslot);
        };
        this.handleMouseEnter = (index) => {
            this.hoveredTimeslotIndex = index;
        };
        this.handleMouseLeave = () => {
            this.hoveredTimeslotIndex = -1;
        };
        this.selectedDate = new Date();
        this.availability = undefined;
        this.selectedTimeslot = undefined;
        this.isLoading = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.times = [];
        this.hoveredTimeslotIndex = undefined;
        this.selectedTimeslotIndex = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        const availableTimes = this.availability?.filter(timeslot => this.selectedDate && utils.isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
        this.times = availableTimes || [];
        utils.debug(`[nylas-timeslot-picker] Component will load`, { selectedDate: this.selectedDate, availability: this.availability, times: this.times });
    }
    async componentDidLoad() {
        utils.debug(`[nylas-timeslot-picker] Component did load`);
    }
    getTimeslotId(date, index) {
        return `${date.toLocaleDateString()}-${index}`;
    }
    onClickSelectTime(timeslot, index) {
        utils.debug(`[nylas-timeslot-picker] Time selected`, timeslot, index);
        this.selectedTimeslotIndex = this.getTimeslotId(timeslot.start_time, index);
        this.timeslotSelected.emit({
            start_time: timeslot.start_time,
            end_time: timeslot.end_time,
        });
    }
    getTimeSlotLabel(timeslot) {
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            timeZone: this.selectedTimezone,
        });
        return `${timeFormat.format(timeslot.start_time)} - ${timeFormat.format(timeslot.end_time)}`;
    }
    selectedDateChanged(newVal) {
        utils.debug(`[nylas-timeslot-picker] Selected date changed`, { newVal });
        if (newVal) {
            this.selectedTimeslotIndex = '';
            if (typeof newVal !== 'undefined') {
                const availableTimes = this.availability?.filter(timeslot => utils.isSameDay(timeslot.start_time, newVal)).map(timeslot => timeslot);
                this.times = availableTimes || [];
            }
        }
    }
    availabilityChanged(newVal) {
        utils.debug(`[nylas-timeslot-picker] Available times changed`, { newVal, selectedDate: this.selectedDate });
        if (typeof newVal !== 'undefined') {
            const availableTimes = newVal?.filter(timeslot => this.selectedDate && utils.isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
            this.times = availableTimes || [];
        }
    }
    render() {
        if (this.isLoading) {
            return (index.h(index.Host, null, index.h("div", { class: 'loading' }, new Array(6).fill(0).map((_, i) => (index.h("div", { class: 'time-slot-skeleton', style: { animationDelay: `${i * 20}ms` } }))))));
        }
        if (this.availability && this.availability.length === 0) {
            return (index.h(index.Host, null, index.h("div", { class: 'empty' }, index.h("span", null, "No dates available"))));
        }
        if ((!this.times || this.times.length === 0) && !!this.selectedDate) {
            return (index.h(index.Host, null, index.h("div", { class: 'empty' }, index.h("span", null, "No time slots available for selected date"))));
        }
        if (!this.selectedDate)
            return index.h(index.Host, null);
        return (index.h(index.Host, { part: "ntp" }, index.h("div", { class: 'time-picker-wrapper' }, index.h("div", { class: 'time-slots' }, this.times.map((timeslot, index$1) => (index.h("button", { part: `ntp__timeslot ${this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime() ? 'ntp__timeslot--selected' : ''}`, "aria-role": "button", class: {
                time: true,
                selected: typeof this.selectedTimeslot !== 'undefined' && this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime(),
            }, onClick: () => this.onClickSelectTime(timeslot, index$1), onMouseEnter: () => this.handleMouseEnter(index$1), onMouseLeave: () => this.handleMouseLeave() }, this.hoveredTimeslotIndex == index$1 || this.selectedTimeslotIndex == this.getTimeslotId(timeslot.start_time, index$1)
            ? this.getTimeSlotLabel(timeslot)
            : timeslot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZone: this.selectedTimezone }))))), this.selectedTimeslot && (index.h("div", { class: 'footer' }, index.h("sp-button", { variant: "primary", onClick: (event) => this.handleConfirmedTimeslot(event, this.selectedTimeslot), part: "ntp__button-primary" }, index.h("slot", { name: "timeslot-picker-cta-label" }, "Next")))))));
    }
    static get watchers() { return {
        "selectedDate": ["selectedDateChanged"],
        "availability": ["availabilityChanged"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-timeslot-picker',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.availability', 'availability'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.isLoading', 'isLoading'],
        ]),
        eventToProps: {
            timeslotSelected: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectTime(event.detail);
            },
            timeslotConfirmed: async (event, nylasSchedulerConnector) => {
                if (event.detail) {
                    nylasSchedulerConnector.scheduler.toggleAdditionalData(true);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotPicker.prototype, "render", null);
NylasTimeslotPicker.style = NylasTimeslotPickerStyle0;

exports.nylas_booked_event_card = NylasBookedEventCard;
exports.nylas_booking_form = NylasBookingForm;
exports.nylas_cancel_booking_form = NylasCancelBookingForm;
exports.nylas_cancelled_event_card = NylasCancelledEventCard;
exports.nylas_date_picker = NylasDatePicker;
exports.nylas_locale_switch = NylasLocaleSwitch;
exports.nylas_logo = NylasLogo;
exports.nylas_notification = NylasNotification;
exports.nylas_selected_event_card = NylasSelectedEventCard;
exports.nylas_timeslot_picker = NylasTimeslotPicker;

//# sourceMappingURL=nylas-booked-event-card_10.cjs.entry.js.map