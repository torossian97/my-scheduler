'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const constants = require('./constants-d590922e.js');
const registerComponent = require('./register-component-4f8ae42c.js');
require('./_commonjsHelpers-ef8cd0cd.js');
require('./utils-85bd0909.js');

const nylasLocaleSwitchCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-locale-switch{display:flex;flex-direction:row;justify-content:space-between;align-items:center;height:68px;border-left:none;border-right:none;color:var(--nylas-base-50);font-size:14px;font-weight:600;cursor:pointer;transition:all 0.2s ease-in-out;font-family:inherit}@media screen and (max-width: 768px){.nylas-locale-switch{font-size:16px}}.select-wrapper{display:flex;align-items:center;gap:0.5rem}select{border:none;background:transparent;cursor:pointer;outline:none;background-color:transparent;margin:0 0 1px;padding:4px;vertical-align:middle}select#timezone{width:140px}select#language{width:80px}span.timezone-label{display:flex;width:-webkit-fill-available;justify-content:space-between}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLocaleSwitch = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.timezoneChanged = index.createEvent(this, "timezoneChanged", 7);
        this.languageChanged = index.createEvent(this, "languageChanged", 7);
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = navigator.language;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    changeTimezone(timezone) {
        this.selectedTimezone = timezone;
        this.timezoneChanged.emit(timezone);
    }
    changeLanguage(language) {
        this.selectedLanguage = language;
        this.languageChanged.emit(language);
    }
    selectedOptionChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.changeTimezone(value);
        }
        else if (name === 'language') {
            this.changeLanguage(value);
        }
    }
    getTimezoneLabelHTML(timezone) {
        const offset = constants.getTimezoneOffset(timezone);
        return (index.h("span", { class: "timezone-label", style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                width: '-webkit-fill-available',
            } }, constants.TIMEZONE_MAP[timezone], ' ', index.h("span", { class: "timezone-offset", style: {
                fontSize: '14px',
                fontWeight: '400',
                color: 'var(--nylas-base-500)',
            } }, offset)));
    }
    render() {
        const timezoneOptions = Object.keys(constants.TIMEZONE_MAP).map(key => ({
            labelHTML: this.getTimezoneLabelHTML(key),
            label: constants.TIMEZONE_MAP[key],
            value: key,
        }));
        const languageOptions = Object.keys(constants.LANGUAGE_MAP).map(key => ({
            label: constants.LANGUAGE_MAP[key],
            value: key,
        }));
        return (index.h(index.Host, { key: '9b59f6361d95bf132b22ff7d03edd20c58d81f9a' }, index.h("div", { key: 'f2ebeeaed33b6e750f71d23ca24aa2d1ad858a10', class: "nylas-locale-switch" }, index.h("div", { key: '3bb086e794c113b62d88b458f213beaeb28bf5c7', class: {
                'select-wrapper': true,
                'timezone': true,
            } }, index.h("select-dropdown", { key: '169822d4f1c58f795f0a9189c074699814a2790e', name: "timezone", options: timezoneOptions, defaultSelectedOption: timezoneOptions.find(op => op.value == this.selectedTimezone) }, index.h("span", { key: '54fd84316990a375e60291bc68406a2fd1a43f57', slot: "select-icon" }, index.h("globe-icon", { key: '2cd6a94baef61202b97411e10cb212b48ddd527a', width: "20", height: "20" })))), index.h("div", { key: '39e1a7f52109e87ebfcd41f5eb35146a21ab7911', class: {
                'select-wrapper': true,
                'language': true,
            } }, index.h("select-dropdown", { key: 'b803b2685efe46673d125b3d10714bafd48197c1', name: "language", options: languageOptions, defaultSelectedOption: languageOptions.find(lang => lang.value == this.selectedLanguage) }, index.h("span", { key: 'b8a7d37f9bd60a14f2652fd17d7572b2bd853ee7', slot: "select-icon" }, index.h("translate-icon", { key: 'b36f31c8ddec7a70fdce4154006fce11af4e3bb3', width: "20", height: "20" })))))));
    }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-locale-switch',
        stateToProps: new Map([
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
        ]),
        eventToProps: {
            timezoneChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.selectTimezone(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLocaleSwitch.prototype, "render", null);
NylasLocaleSwitch.style = nylasLocaleSwitchCss;

exports.nylas_locale_switch = NylasLocaleSwitch;

//# sourceMappingURL=nylas-locale-switch.cjs.entry.js.map