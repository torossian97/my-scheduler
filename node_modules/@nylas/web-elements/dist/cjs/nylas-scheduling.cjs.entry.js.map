{"file":"nylas-scheduling.entry.cjs.js","mappings":"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","names":["debug","NylaSchedulerAPIConnector","h","Fragment","NotificationType","ErrorCategory","CreateNylasSchedulerStore","NylasBaseProvider","addDaysToCurrentDate","Host"],"sources":["src/connector/nylas-scheduler-connector/index.ts","src/components/scheduler/nylas-scheduler/scheduler-view.tsx","src/components/scheduler/nylas-scheduler/message-banner.tsx","src/components/scheduler/nylas-scheduler/nylas-scheduling.scss?tag=nylas-scheduling&encapsulation=shadow","src/components/scheduler/nylas-scheduler/nylas-scheduling.tsx"],"sourcesContent":["import { NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { debug } from '@/utils/utils';\nimport { NylasSchedulerConnectorInterface } from '../connector-interface';\nimport { NylaSchedulerAPIConnector } from '../shared/api/scheduler';\n\ntype NylasSchedulerConnectorOptions = {\n  schedulerAPIURL: string;\n  nylasSchedulerStore: NylasSchedulerStoreType;\n  sessionId?: string;\n  configId?: string;\n};\n/**\n * Base class for the Nylas connector.\n */\nexport class NylasSchedulerConnector implements NylasSchedulerConnectorInterface {\n  public schedulerAPIURL: string;\n  public nylasSchedulerStore: NylasSchedulerStoreType;\n  public sessionId: string | undefined;\n  public configId: string | undefined;\n\n  private _schedulerAPIConnector: NylaSchedulerAPIConnector | undefined;\n\n  constructor({ schedulerAPIURL, nylasSchedulerStore, sessionId, configId }: NylasSchedulerConnectorOptions) {\n    if (!schedulerAPIURL) {\n      throw new Error('schedulerAPIURL is required');\n    }\n\n    if (!nylasSchedulerStore) {\n      throw new Error('nylasSchedulerStore is required');\n    }\n\n    if (!sessionId && !configId) {\n      throw new Error('sessionId is required for private configs, if not config id is required for public configs');\n    }\n\n    // If the url is only /, then we need to add the base url.\n    // We assume that the base url is the same as the current url.\n    if (schedulerAPIURL === '/') {\n      const url = new URL(window.location.href);\n      schedulerAPIURL = url.origin;\n    }\n\n    this.configId = configId;\n    this.sessionId = sessionId;\n    this.schedulerAPIURL = schedulerAPIURL;\n    this.nylasSchedulerStore = nylasSchedulerStore;\n  }\n\n  public init() {\n    debug('NylasConnector init');\n  }\n\n  public get schedulerStore() {\n    return this.nylasSchedulerStore;\n  }\n\n  public get scheduler() {\n    if (this._schedulerAPIConnector) {\n      return this._schedulerAPIConnector;\n    }\n    this._schedulerAPIConnector = new NylaSchedulerAPIConnector({\n      schedulerAPIURL: this.schedulerAPIURL,\n      schedulerStore: this.schedulerStore,\n      sessionId: this.sessionId,\n      configId: this.configId,\n    });\n    return this._schedulerAPIConnector;\n  }\n\n  public resetStores() {\n    this.nylasSchedulerStore.reset();\n  }\n}\nexport type PublicMethods<T> = {\n  [K in keyof T]: T[K] extends Function ? (string extends K ? never : K) : never;\n}[keyof T];\n\nexport type NylasSchedulerConnectorPublicMethods = PublicMethods<NylasSchedulerConnector>;\n","import { Fragment, FunctionalComponent, h } from '@stencil/core';\n\nexport type SchedulerViewProps = {\n  isLoading?: boolean;\n  showNotification?: boolean;\n  nylasBranding?: boolean;\n};\n\n/**\n * The Scheduler view component.\n */\nexport const SchedulerView: FunctionalComponent<SchedulerViewProps> = (props: SchedulerViewProps, children) => {\n  const isLoading = props.isLoading;\n  const showNotification = props.showNotification;\n  const nylasBranding = props.nylasBranding;\n\n  return (\n    <Fragment>\n      {showNotification && <nylas-notification></nylas-notification>}\n\n      {isLoading && (\n        <div class={'loading'}>\n          <div class={'left'}>\n            <div class={'skeleton'} />\n          </div>\n          <div class={'right'}>\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n          </div>\n        </div>\n      )}\n      {!isLoading && children}\n      <div class={'footer'}>\n        {nylasBranding && (\n          <Fragment>\n            Powered by&nbsp;\n            <nylas-logo />\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { FunctionalComponent, h } from '@stencil/core';\n\nexport type HeaderBannerProps = {};\n\nexport const MessageBanner: FunctionalComponent<HeaderBannerProps> = (_props: HeaderBannerProps, children) => <div class=\"message-banner\">{children}</div>;\n","@import '../../../common/styles/variables.scss';\n\n:host {\n  display: flex;\n  flex-direction: column;\n  overflow: visible;\n  border-radius: var(--nylas-border-radius-2x);\n  width: fit-content;\n  @media #{$mobile} {\n    width: auto;\n    min-width: 325px;\n  }\n  background: var(--nylas-base-0);\n  position: relative;\n  box-shadow:\n    0px 4px 6px -2px rgba(0, 0, 0, 0.05),\n    0px 10px 15px -3px rgba(0, 0, 0, 0.1);\n  @include default-css-variables;\n  font-family: var(--nylas-font-family);\n  font-optical-sizing: auto;\n  font-style: normal;\n  font-variation-settings: 'slnt' 0;\n}\n\n:root {\n  font-family: inherit;\n}\n\n.error {\n  padding: 8rem 12rem;\n  color: var(--nylas-base-0);\n  background-color: var(--nylas-error);\n  margin: 1.5rem;\n  border-radius: var(--nylas-border-radius-2x);\n}\n\n.message-banner {\n  text-align: right;\n  color: var(--nylas-base-800);\n  padding: 1rem;\n  border-bottom: 1px solid var(--nylas-color-primary-200);\n  margin-top: 1rem;\n}\n\n.loading {\n  margin: 1.5rem;\n  display: flex;\n  gap: 1rem;\n\n  .skeleton {\n    border-radius: var(--nylas-border-radius-2x);\n    animation: pulsate 1.5s infinite;\n    &:nth-child(2) {\n      animation-delay: -100ms;\n    }\n    &:nth-child(3) {\n      animation-delay: -200ms;\n    }\n    &:nth-child(4) {\n      animation-delay: -300ms;\n    }\n    &:nth-child(5) {\n      animation-delay: -400ms;\n    }\n  }\n\n  .left .skeleton {\n    height: 100%;\n    width: 400px;\n  }\n  .right .skeleton {\n    height: 5rem;\n    width: 300px;\n    margin-bottom: 1rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n@keyframes pulsate {\n  0% {\n    background-color: var(--nylas-base-50);\n  }\n  50% {\n    background-color: var(--nylas-base-100);\n  }\n  100% {\n    background-color: var(--nylas-base-50);\n  }\n}\n\n.select-date-page,\n.additional-data-page,\n.booked-event-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  border-top-left-radius: var(--nylas-border-radius-2x);\n  border-top-right-radius: var(--nylas-border-radius-2x);\n}\n\n.select-date-page,\n.additional-data-page {\n  display: flex;\n\n  @media #{$mobile} {\n    flex-direction: column;\n  }\n}\n\n.booked-event-page {\n  background-color: var(--nylas-base-50);\n}\n\n.cancelled-event-page,\n.cancel-flow-page {\n  padding: 1rem;\n  height: 496px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.booked-event-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  min-width: 784px;\n  @media #{$mobile} {\n    min-width: 90%;\n  }\n  background: var(--nylas-base-50);\n}\n\n.left-panel {\n  padding: 1rem 20px 0;\n  gap: 1rem;\n  height: 512px;\n  min-width: 384px;\n  border-top-left-radius: inherit;\n  background: var(--nylas-base-0);\n  @media #{$mobile} {\n    border-top-right-radius: inherit;\n    min-width: unset;\n    height: auto;\n  }\n}\n\n.select-date-page .left-panel {\n  @media #{$mobile} {\n    padding: 0.5rem 4px 0;\n  }\n}\n\n.border {\n  margin-left: -20px; // Offset left padding\n  margin-right: -20px; // Offset right padding\n  border-top-width: 1px;\n  height: 1px;\n  background-color: var(--nylas-base-200);\n  @media #{$mobile} {\n    display: none;\n  }\n}\n\n.right-panel {\n  min-width: 360px;\n  width: 360px;\n  background-color: var(--nylas-base-50);\n  height: 512px;\n  padding-top: 16px;\n  border-left: 1px solid var(--nylas-base-200);\n  border-top-right-radius: inherit;\n  @media #{$mobile} {\n    border-top-right-radius: 0px;\n    width: inherit;\n    min-width: unset;\n    height: auto;\n  }\n  h2 {\n    display: flex;\n    margin: 0;\n    height: 48px;\n    gap: 0.5rem;\n    justify-content: center;\n    align-items: center;\n    width: auto;\n    font-size: 1.125rem;\n    line-height: 1.5rem;\n    font-weight: 500;\n    text-align: center;\n    color: var(--nylas-base-800);\n  }\n}\n\n.additional-data-page {\n  .left-panel {\n    background-color: var(--nylas-base-50);\n  }\n  .right-panel {\n    background-color: var(--nylas-base-0);\n  }\n}\n\nnylas-selected-event-card {\n  height: 496px;\n\n  @media #{$mobile} {\n    height: 250px;\n  }\n}\n\n.footer {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px;\n  font-size: 14px;\n  font-weight: 300;\n  color: var(--nylas-base-500);\n  border-top: 1px solid var(--nylas-base-200);\n  min-height: 24px;\n  svg {\n    fill: var(--nylas-base-500);\n  }\n}\n\n.footer svg {\n  margin-top: 1px;\n}\n\nnylas-selected-event-card::part(nsec__timezone) {\n  position: absolute;\n  bottom: 0;\n}\n","import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport type { SchedulerEventOverride } from '@/common/component-types';\nimport { NylasSchedulerConnector } from '@/connector/nylas-scheduler-connector';\nimport { CreateNylasSchedulerStore, NylasSchedulerStoreState, NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { NylasSchedulerBookingData, ThemeConfig, Notification, NotificationType, NylasSchedulerErrorResponse, Timeslot } from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { addDaysToCurrentDate, debug } from '@/utils/utils';\nimport { SchedulerView } from './scheduler-view';\nimport { ErrorCategory } from '@/connector/nylas-scheduler-connector/errors';\nimport { MessageBanner } from './message-banner';\n\nconst genericError = { title: 'Something went wrong...', type: NotificationType.Error, category: ErrorCategory.Component };\n\n/**\n * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.\n *\n * @slot custom-booking-form - This slot is used to pass a custom booking form to the Nylas Scheduling component.\n * @slot timeslot-picker-cta-label - This slot is used to pass a custom label to the timeslot picker CTA. The default label is \"Next\".\n *\n * @part ndp - [nylas-date-picker] The date picker host.\n * @part ndp__month-header - [nylas-date-picker] The month header.\n * @part ndp__month-button - [nylas-date-picker] The month button.\n * @part ndp__day - [nylas-date-picker] The day.\n * @part ndp__date - [nylas-date-picker] The date.\n * @part ndp__date--selected - [nylas-date-picker] The selected date.\n * @part ndp__date--current-day - [nylas-date-picker] The current day.\n * @part ndp__date--current-month - [nylas-date-picker] The dates in the current month.\n * @part ntp - [nylas-timeslot-picker] The timeslot picker component.\n * @part ntp__timeslot - [nylas-timeslot-picker] The timeslot button.\n * @part ntp__timeslot--selected - [nylas-timeslot-picker] The selected timeslot button.\n * @part ntp__button-primary - [nylas-timeslot-picker] The timeslot picker CTA.\n * @part nsec - [nylas-selected-event-card] The selected event card component.\n * @part nsec__card - [nylas-selected-event-card] The card component.\n * @part nsec__icon - [nylas-selected-event-card] The calendar icon.\n * @part nsec__date - [nylas-selected-event-card] The date selected.\n * @part nsec__time - [nylas-selected-event-card] The timeslot selected.\n * @part nbf - [nylas-booking-form] The booking form host.\n * @part nbf__input-label - [nylas-booking-form] The input label.\n * @part nbf__input-textfield - [nylas-booking-form] The input textfield.\n * @part nbf__button-ghost - [nylas-booking-form] The ghost button for adding guests.\n * @part nbf__button-primary - [nylas-booking-form] The primary button for booking.\n * @part nbf__button-outline - [nylas-booking-form] The outline button for canceling.\n * @part ncec - [nylas-cancelled-event-card] The cancelled event card host.\n * @part ncec__icon - [nylas-cancelled-event-card] The calendar icon.\n * @part ncec__title - [nylas-cancelled-event-card] The title of the cancelled event card.\n * @part ncec__description - [nylas-cancelled-event-card] The description of the cancelled event card.\n * @part ncec__button-outline - [nylas-cancelled-event-card] The close button CTA.\n * @part ncec__card - [nylas-cancelled-event-card] The cancelled event card.\n * @part nbec - [nylas-booked-event-card] The booked event card host.\n * @part nbec__card - [nylas-booked-event-card] The booked event card.\n * @part nbec__title - [nylas-booked-event-card] The title of the booked event card.\n * @part nbec__description - [nylas-booked-event-card] The description of the booked event card.\n * @part nbec__button-outline - [nylas-booked-event-card] The cancel & reschedule button CTA.\n * @part nbec__cancel-cta - [nylas-booked-event-card] The cancel button CTA.\n * @part nbec__reschedule-cta - [nylas-booked-event-card] The reschedule button CTA.\n */\n@Component({\n  tag: 'nylas-scheduling',\n  styleUrl: 'nylas-scheduling.scss',\n  shadow: true,\n})\nexport class NylasScheduling {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: { scheduler: NylasSchedulerStoreType };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Scheduler Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasSchedulerConnector?: NylasSchedulerConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasSchedulingElement;\n\n  /**\n   * This is used to set the mode for the Nylas Scheduler.\n   * The mode can be either `app` or `composable`. The default mode is `app`.\n   * - `app`: This mode is used to show the default Nylas Scheduler UI.\n   * - `composable`: This mode is used to show the composable Nylas Scheduler UI\n   *    by passing the individual scheduler components as children.\n   */\n  @Prop() readonly mode: 'app' | 'composable' = 'app';\n\n  /**\n   * The default scheduler store state.\n   * Used to set the initial state of the scheduler store.\n   */\n  @Prop({ attribute: 'default-scheduler-store-state' }) readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;\n\n  /**\n   * The session ID for the Nylas Scheduler.\n   * This is used to authenticate the user.\n   */\n  @Prop() readonly sessionId?: string;\n\n  /**\n   * The URL for the Nylas Scheduler API. (staging or production URL)\n   */\n  @Prop() readonly schedulerApiUrl: string = 'https://api.us.nylas.com';\n\n  /**\n   * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation.\n   * When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately\n   * invokes the handler after booking.\n   */\n  @Prop() readonly bookingInfo?: NylasSchedulerBookingData;\n\n  /**\n   * Booking Id required for rescheduling flow.\n   */\n  @Prop() readonly rescheduleBookingId?: string;\n\n  /**\n   * Booking Id required for cancelling flow.\n   */\n  @Prop() readonly cancelBookingId?: string;\n\n  /**\n   * The config ID for the Nylas Scheduler. This should be passed in when using a public config,\n   * in which case the sessionId is not required.\n   */\n  @Prop() readonly configurationId?: string;\n\n  /**\n   * This prop lets you hide the Nylas branding.\n   * Default is true.\n   */\n  @Prop() readonly nylasBranding?: boolean = true;\n\n  /**\n   * This provides an easy way to override the default function of the event emitter.\n   * An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will\n   * show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like:\n   * ```html\n   * <nylas-scheduling eventOverride={{\"timeslotConfirmed\": (event, nylasConnector) => { console.log(\"Timeslot confirmed event fired!\"); } }} />\n   * ```\n   */\n  @Prop({ attribute: 'event-overrides' }) readonly eventOverrides: SchedulerEventOverride = {};\n\n  /**\n   * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.\n   */\n  @Prop() readonly isLoading?: boolean;\n\n  /**\n   * Theme config, used to automatically generate a theme with color palette and\n   * CSS variables to customize the look and feel of the Nylas Scheduler.\n   */\n  @Prop() readonly themeConfig?: ThemeConfig;\n\n  /*\n   * Displays notifications for errors by default. When enabled (`true`), errors\n   * automatically appear as notifications. Disabling this feature (`false`) allows\n   * the parent application to capture and manage errors by listening to the\n   * `nylasSchedulerError` event, providing flexibility in error handling.\n   */\n  @Prop() readonly showNotification?: boolean = true;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @State() automaticComponentRegistration: boolean = true;\n\n  /**\n   * The selected date label for the Nylas Scheduler.\n   * This is used to set the initial date label for the Nylas Scheduler.\n   */\n  @State() selectedDateLabel: string = new Date().toLocaleDateString(undefined, { dateStyle: 'full' }) || 'No date selected';\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) init!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentWillLoad lifecycle.\n   */\n  @Event() schedulerWillLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentDidLoad lifecycle.\n   */\n  @Event() schedulerDidLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  @Event({\n    eventName: 'nylasSchedulerError',\n  })\n  nylasSchedulerError!: EventEmitter<Notification>;\n\n  /**\n   * This function is called when the component is connected to the DOM.\n   * At this point in the component lifecycle, the base provider has not yet\n   * been initialized. So avoid using the base provider in this method or stores\n   * in this method.\n   */\n  connectedCallback() {\n    debug(`[nylas-scheduler] connectedCallback`);\n  }\n\n  async componentWillLoad() {\n    debug(`[nylas-scheduler] Component will load`);\n\n    // Emit the schedulerWillLoad event to allow the parent application to set the initial\n    // state of the provider or to prevent the provider from firing some default behavior.\n    const schedulerWillLoadEvent = this.schedulerWillLoad.emit(this.host);\n    if (schedulerWillLoadEvent.defaultPrevented) {\n      return;\n    }\n\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    this.stores = {\n      scheduler: CreateNylasSchedulerStore({\n        bookingInfo: this.bookingInfo,\n        nylasBranding: this.nylasBranding,\n        ...this.defaultSchedulerState,\n      }),\n    };\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    this.nylasSchedulerConnector = new NylasSchedulerConnector({\n      schedulerAPIURL: this.schedulerApiUrl,\n      sessionId: this.sessionId,\n      configId: this.configurationId,\n      nylasSchedulerStore,\n    });\n    this.init.emit(this.host);\n\n    this.baseProvider?.componentWillLoad(this.nylasSchedulerConnector);\n    // Override theme\n    if (this.themeConfig) {\n      for (const [key, value] of Object.entries(this.themeConfig)) {\n        this.host.style.setProperty(`${key}`, value);\n      }\n    }\n  }\n\n  async componentDidLoad() {\n    this.baseProvider?.componentDidLoad();\n\n    // If sessionId is not provided, do not fetch availability\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    const settings = await this.nylasSchedulerConnector?.scheduler.getUISettings();\n    if (!settings || 'error' in settings) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(settings?.error) });\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const availableDaysInFuture = nylasSchedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');\n\n    if (selectedTimeslot && selectedTimeslot?.start_time) {\n      if (!this.isTimeslotValid(selectedTimeslot)) {\n        return;\n      }\n\n      // If the selected timeslot is already set, do not fetch availability\n      if (nylasSchedulerStore?.get('showBookingForm')) {\n        nylasSchedulerStore?.set('selectedDate', selectedTimeslot.start_time);\n        return;\n      }\n    }\n\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const availability = nylasSchedulerStore?.get('availability');\n    let result;\n\n    if (availability && availability.length > 0) {\n      return;\n    }\n\n    if (!selectedDate) {\n      const today = new Date();\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(today, availableDaysInFuture || 30);\n      if (today.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    } else {\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(selectedDate, availableDaysInFuture || 30);\n      if (selectedDate.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    }\n\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n    }\n\n    if (!selectedDate) {\n      let _selectedDate = new Date();\n      const firstAvailableDate = nylasSchedulerStore?.get('availability').find((timeslot: any) => new Date(timeslot.start_time) > new Date());\n      if (firstAvailableDate) {\n        _selectedDate = firstAvailableDate.start_time;\n      }\n      nylasSchedulerStore?.set('selectedDate', _selectedDate);\n    }\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  @Watch('bookingInfo')\n  bookingInfoChanged(newVal?: NylasSchedulerBookingData) {\n    this.stores?.scheduler.set('bookingInfo', newVal);\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to refetch the availability when the month is changed.\n   */\n  @Listen('monthChanged')\n  async monthChangedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    const availableDaysInFuture = this.nylasSchedulerConnector?.schedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(date, availableDaysInFuture || 30);\n\n    if (startTime < endTimeForAvailableDaysInFuture && date.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n      const result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n      }\n    }\n  }\n\n  /**\n   * This is a custom event handler to book an event.\n   */\n  @Listen('detailsConfirmed')\n  async bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingData>) {\n    if (this.rescheduleBookingId) {\n      const result = await this.nylasSchedulerConnector?.scheduler.rescheduleBooking(this.rescheduleBookingId, event.detail);\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n      }\n      return;\n    }\n    const result = await this.nylasSchedulerConnector?.scheduler.bookTimeslot(event.detail);\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n    }\n  }\n\n  /**\n   * This is a custom event handler to update the selected date label.\n   */\n  @Listen('dateSelected')\n  dateSelectedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    this.selectedDateLabel = date ? date.toLocaleDateString(undefined, { dateStyle: 'full' }) : 'No date selected';\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * cancel booking button is clicked on the cancel booking form.\n   */\n  @Listen('cancelBookedEventError')\n  cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  @Listen('cancelBookedEventValidationError')\n  cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * reschedule button is clicked on the booked event card.\n   */\n  @Listen('rescheduleBookedEventError')\n  rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  /**\n   * This method is used to retrieve the NylasScheduler instance\n   * @returns The NylasScheduler instance\n   */\n  @Method()\n  async getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined> {\n    return this.baseProvider?.getStore('scheduler');\n  }\n\n  /**\n   * This method is used to retrieve the NylasConnector instance\n   * @returns The NylasConnector instance\n   */\n  @Method()\n  async getNylasSchedulerConnector() {\n    return this.nylasSchedulerConnector;\n  }\n\n  @Method()\n  async getRef() {\n    return this.host;\n  }\n\n  private getErrorObject(error: NylasSchedulerErrorResponse['error']): Notification {\n    return {\n      title: error?.title || genericError.title,\n      category: error?.category || genericError.category,\n      type: NotificationType.Error,\n      description: error?.message || '',\n      id: new Date().getTime().toString(),\n      ttl: 'none',\n    };\n  }\n\n  private checkIfSessionIdOrConfigIdExists(): boolean {\n    if (!this.sessionId && !this.configurationId) {\n      this.nylasSchedulerError.emit({\n        title: 'No sessionId!',\n        category: ErrorCategory.Component,\n        type: NotificationType.Error,\n        description: 'Session ID is required',\n        id: new Date().getTime().toString(),\n        ttl: 'none',\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private isTimeslotValid(timeslot: Timeslot): boolean {\n    const selectedDate = new Date(timeslot.start_time);\n    if (selectedDate < new Date()) {\n      this.nylasSchedulerError.emit({\n        title: 'Invalid tiemslot!',\n        category: ErrorCategory.Component,\n        type: NotificationType.Error,\n        description: 'The selected timeslot is invalid.',\n        id: new Date().getTime().toString(),\n        ttl: 'none',\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private validateAvailableDaysInFuture(\n    startDate: Date,\n    availableDaysInFuture: number,\n  ): {\n    startTime: number;\n    endTime: number;\n    endTimeForAvailableDaysInFuture: number;\n  } {\n    const today = new Date();\n    const startTime = new Date(startDate.getFullYear(), startDate.getMonth(), 1).getTime() / 1000;\n    const endTimeForCurrentMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 1).getTime() / 1000;\n    const endTimeForAvailableDaysInFuture = Math.floor(addDaysToCurrentDate(today, availableDaysInFuture).getTime() / 1000);\n    const endTime = Math.min(endTimeForAvailableDaysInFuture, endTimeForCurrentMonth);\n    return { startTime, endTime, endTimeForAvailableDaysInFuture };\n  }\n\n  render() {\n    const showDefaultScheduler = this.mode === 'app';\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const eventInfo = nylasSchedulerStore?.get('eventInfo');\n    const showBookingForm = nylasSchedulerStore?.get('showBookingForm');\n    const cancelledEventInfo = nylasSchedulerStore?.get('cancelledEventInfo');\n    const cancelBookingId = nylasSchedulerStore?.get('cancelBookingId') || this.cancelBookingId;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot') as Timeslot;\n    const rescheduleBookingId = nylasSchedulerStore?.get('rescheduleBookingId') || this.rescheduleBookingId;\n    const nylasBranding = nylasSchedulerStore?.get('nylasBranding') || this.nylasBranding;\n\n    if (showDefaultScheduler && cancelBookingId && !cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancel-flow-page\" part=\"cancel-flow-page\">\n              <nylas-cancel-booking-form cancelBookingId={cancelBookingId} exportparts=\"ncbf, ncbf__input-textfield, ncbf__button-cta, ncbf__button-outline, ncbf__input-label\" />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Cancelled event card is shown when the event is cancelled\n    if (showDefaultScheduler && cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"cancelled-event-page\">\n              <nylas-cancelled-event-card\n                cancelledEventInfo={cancelledEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Booked event card is shown when the event is booked\n    if (showDefaultScheduler && eventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"booked-event-page\" part=\"booked-event-page\">\n              <nylas-booked-event-card\n                selectedTimeslot={selectedTimeslot}\n                eventInfo={eventInfo}\n                exportparts=\"nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Date and time picker is shown when the event is not booked and no additional data is shown\n    if (showDefaultScheduler && (!eventInfo || !!rescheduleBookingId) && !showBookingForm) {\n      const timeslotPickerCTALabel = this.host.querySelector('[slot=\"timeslot-picker-cta-label\"]');\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>Choose another time slot to reschedule your meeting</MessageBanner>}\n            <div class=\"select-date-page\" part=\"select-date-page\">\n              <div class=\"left-panel\">\n                <nylas-date-picker exportparts=\"ndp, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--selected, ndp__date--current-day, ndp__date--current-month\"></nylas-date-picker>\n                <div class=\"border\"></div>\n                <nylas-locale-switch></nylas-locale-switch>\n              </div>\n              <div class=\"right-panel\">\n                <h2>\n                  <calendar-icon></calendar-icon>\n                  <span id=\"selectedDate\">{this.selectedDateLabel}</span>\n                </h2>\n                <nylas-timeslot-picker exportparts=\"ntp, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary\">\n                  {timeslotPickerCTALabel && (\n                    <span slot=\"timeslot-picker-cta-label\">\n                      <slot name=\"timeslot-picker-cta-label\"></slot>\n                    </span>\n                  )}\n                </nylas-timeslot-picker>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Additional data is shown when the time is selected, event is not booked and additional data is shown\n    if (showDefaultScheduler && !eventInfo && showBookingForm) {\n      // Check if a \"custom-booking-form\" slot is provided\n      const customTemplateSlot = this.host.querySelector('[slot=\"custom-booking-form\"]');\n\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>Choose another time slot to reschedule your meeting</MessageBanner>}\n            <div class=\"additional-data-page\" part=\"additional-data-page\">\n              <div class=\"left-panel\">\n                <div class=\"wrapper\">\n                  <nylas-selected-event-card exportparts=\"nsec, nsec__card, nsec__icon, nsec__date, nsec__time\"></nylas-selected-event-card>\n                </div>\n              </div>\n              <div class=\"right-panel\">\n                <nylas-booking-form exportparts=\"nbf, nbf__input-label, nbf__input-textfield, nbf__button-ghost, nbf__button-primary, nbf__button-outline\">\n                  {customTemplateSlot && (\n                    <div slot=\"custom-booking-form\">\n                      <slot name=\"custom-booking-form\"></slot>\n                    </div>\n                  )}\n                </nylas-booking-form>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"version":3}