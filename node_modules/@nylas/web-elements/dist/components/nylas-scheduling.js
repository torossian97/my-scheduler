import { h, Fragment, proxyCustomElement, HTMLElement, createEvent, Host } from '@stencil/core/internal/client';
import { n as nr, N as NylasBaseProvider } from './index.es.js';
import { a as debug, o as addDaysToCurrentDate } from './utils.js';
import { N as NylaSchedulerAPIConnector, E as ErrorCategory, C as CreateNylasSchedulerStore } from './scheduler-store.js';
import { d as defineCustomElement$n } from './calendar-cancel.js';
import { d as defineCustomElement$m } from './calendar-check.js';
import { d as defineCustomElement$l } from './calendar.js';
import { d as defineCustomElement$k } from './checkmark-circle.js';
import { d as defineCustomElement$j } from './chevron.js';
import { d as defineCustomElement$i } from './close.js';
import { d as defineCustomElement$h } from './globe.js';
import { d as defineCustomElement$g } from './loading.js';
import { d as defineCustomElement$f } from './nylas-booked-event-card2.js';
import { d as defineCustomElement$e } from './nylas-booking-form2.js';
import { d as defineCustomElement$d } from './nylas-cancel-booking-form2.js';
import { d as defineCustomElement$c } from './nylas-cancelled-event-card2.js';
import { d as defineCustomElement$b } from './nylas-date-picker2.js';
import { d as defineCustomElement$a } from './nylas-locale-switch2.js';
import { d as defineCustomElement$9 } from './nylas-logo2.js';
import { d as defineCustomElement$8 } from './nylas-notification2.js';
import { d as defineCustomElement$7 } from './nylas-selected-event-card2.js';
import { d as defineCustomElement$6 } from './nylas-timeslot-picker2.js';
import { d as defineCustomElement$5 } from './search.js';
import { d as defineCustomElement$4 } from './select-dropdown2.js';
import { d as defineCustomElement$3 } from './translate.js';
import { d as defineCustomElement$2 } from './warning.js';

class NylasSchedulerConnector {
    constructor({ schedulerAPIURL, nylasSchedulerStore, sessionId, configId }) {
        if (!schedulerAPIURL) {
            throw new Error('schedulerAPIURL is required');
        }
        if (!nylasSchedulerStore) {
            throw new Error('nylasSchedulerStore is required');
        }
        if (!sessionId && !configId) {
            throw new Error('sessionId is required for private configs, if not config id is required for public configs');
        }
        if (schedulerAPIURL === '/') {
            const url = new URL(window.location.href);
            schedulerAPIURL = url.origin;
        }
        this.configId = configId;
        this.sessionId = sessionId;
        this.schedulerAPIURL = schedulerAPIURL;
        this.nylasSchedulerStore = nylasSchedulerStore;
    }
    init() {
        debug('NylasConnector init');
    }
    get schedulerStore() {
        return this.nylasSchedulerStore;
    }
    get scheduler() {
        if (this._schedulerAPIConnector) {
            return this._schedulerAPIConnector;
        }
        this._schedulerAPIConnector = new NylaSchedulerAPIConnector({
            schedulerAPIURL: this.schedulerAPIURL,
            schedulerStore: this.schedulerStore,
            sessionId: this.sessionId,
            configId: this.configId,
        });
        return this._schedulerAPIConnector;
    }
    resetStores() {
        this.nylasSchedulerStore.reset();
    }
}

const SchedulerView = (props, children) => {
    const isLoading = props.isLoading;
    const showNotification = props.showNotification;
    const nylasBranding = props.nylasBranding;
    return (h(Fragment, null,
        showNotification && h("nylas-notification", null),
        isLoading && (h("div", { class: 'loading' },
            h("div", { class: 'left' },
                h("div", { class: 'skeleton' })),
            h("div", { class: 'right' },
                h("div", { class: 'skeleton' }),
                h("div", { class: 'skeleton' }),
                h("div", { class: 'skeleton' }),
                h("div", { class: 'skeleton' }),
                h("div", { class: 'skeleton' })))),
        !isLoading && children,
        h("div", { class: 'footer' }, nylasBranding && (h(Fragment, null,
            "Powered by\u00A0",
            h("nylas-logo", null))))));
};

const MessageBanner = (_props, children) => h("div", { class: "message-banner" }, children);

const nylasSchedulingCss = ":host{display:flex;flex-direction:column;overflow:visible;border-radius:var(--nylas-border-radius-2x);width:fit-content;background:var(--nylas-base-0);position:relative;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.05), 0px 10px 15px -3px rgba(0, 0, 0, 0.1);--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;font-family:var(--nylas-font-family);font-optical-sizing:auto;font-style:normal;font-variation-settings:\"slnt\" 0}@media screen and (max-width: 768px){:host{width:auto;min-width:325px}}:root{font-family:inherit}.error{padding:8rem 12rem;color:var(--nylas-base-0);background-color:var(--nylas-error);margin:1.5rem;border-radius:var(--nylas-border-radius-2x)}.message-banner{text-align:right;color:var(--nylas-base-800);padding:1rem;border-bottom:1px solid var(--nylas-color-primary-200);margin-top:1rem}.loading{margin:1.5rem;display:flex;gap:1rem}.loading .skeleton{border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite}.loading .skeleton:nth-child(2){animation-delay:-100ms}.loading .skeleton:nth-child(3){animation-delay:-200ms}.loading .skeleton:nth-child(4){animation-delay:-300ms}.loading .skeleton:nth-child(5){animation-delay:-400ms}.loading .left .skeleton{height:100%;width:400px}.loading .right .skeleton{height:5rem;width:300px;margin-bottom:1rem}.loading .right .skeleton:last-child{margin-bottom:0}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.select-date-page,.additional-data-page,.booked-event-page,.cancelled-event-page,.cancel-flow-page{border-top-left-radius:var(--nylas-border-radius-2x);border-top-right-radius:var(--nylas-border-radius-2x)}.select-date-page,.additional-data-page{display:flex}@media screen and (max-width: 768px){.select-date-page,.additional-data-page{flex-direction:column}}.booked-event-page{background-color:var(--nylas-base-50)}.cancelled-event-page,.cancel-flow-page{padding:1rem;height:496px;display:flex;justify-content:center;align-items:center}.booked-event-page,.cancelled-event-page,.cancel-flow-page{min-width:784px;background:var(--nylas-base-50)}@media screen and (max-width: 768px){.booked-event-page,.cancelled-event-page,.cancel-flow-page{min-width:90%}}.left-panel{padding:1rem 20px 0;gap:1rem;height:512px;min-width:384px;border-top-left-radius:inherit;background:var(--nylas-base-0)}@media screen and (max-width: 768px){.left-panel{border-top-right-radius:inherit;min-width:unset;height:auto}}@media screen and (max-width: 768px){.select-date-page .left-panel{padding:0.5rem 4px 0}}.border{margin-left:-20px;margin-right:-20px;border-top-width:1px;height:1px;background-color:var(--nylas-base-200)}@media screen and (max-width: 768px){.border{display:none}}.right-panel{min-width:360px;width:360px;background-color:var(--nylas-base-50);height:512px;padding-top:16px;border-left:1px solid var(--nylas-base-200);border-top-right-radius:inherit}@media screen and (max-width: 768px){.right-panel{border-top-right-radius:0px;width:inherit;min-width:unset;height:auto}}.right-panel h2{display:flex;margin:0;height:48px;gap:0.5rem;justify-content:center;align-items:center;width:auto;font-size:1.125rem;line-height:1.5rem;font-weight:500;text-align:center;color:var(--nylas-base-800)}.additional-data-page .left-panel{background-color:var(--nylas-base-50)}.additional-data-page .right-panel{background-color:var(--nylas-base-0)}nylas-selected-event-card{height:496px}@media screen and (max-width: 768px){nylas-selected-event-card{height:250px}}.footer{display:flex;justify-content:flex-end;align-items:center;padding:16px;font-size:14px;font-weight:300;color:var(--nylas-base-500);border-top:1px solid var(--nylas-base-200);min-height:24px}.footer svg{fill:var(--nylas-base-500)}.footer svg{margin-top:1px}nylas-selected-event-card::part(nsec__timezone){position:absolute;bottom:0}";

const genericError = { title: 'Something went wrong...', type: nr.Error, category: ErrorCategory.Component };
const NylasScheduling$1 = proxyCustomElement(class NylasScheduling extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.init = createEvent(this, "init", 7);
        this.schedulerWillLoad = createEvent(this, "schedulerWillLoad", 7);
        this.schedulerDidLoad = createEvent(this, "schedulerDidLoad", 7);
        this.nylasSchedulerError = createEvent(this, "nylasSchedulerError", 7);
        this.mode = 'app';
        this.defaultSchedulerState = undefined;
        this.sessionId = undefined;
        this.schedulerApiUrl = 'https://api.us.nylas.com';
        this.bookingInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.cancelBookingId = undefined;
        this.configurationId = undefined;
        this.nylasBranding = true;
        this.eventOverrides = {};
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.showNotification = true;
        this.automaticComponentRegistration = true;
        this.selectedDateLabel = new Date().toLocaleDateString(undefined, { dateStyle: 'full' }) || 'No date selected';
    }
    connectedCallback() {
        debug(`[nylas-scheduler] connectedCallback`);
    }
    async componentWillLoad() {
        debug(`[nylas-scheduler] Component will load`);
        const schedulerWillLoadEvent = this.schedulerWillLoad.emit(this.host);
        if (schedulerWillLoadEvent.defaultPrevented) {
            return;
        }
        if (!this.checkIfSessionIdOrConfigIdExists()) {
            return;
        }
        this.stores = {
            scheduler: CreateNylasSchedulerStore({
                bookingInfo: this.bookingInfo,
                nylasBranding: this.nylasBranding,
                ...this.defaultSchedulerState,
            }),
        };
        this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');
        this.nylasSchedulerConnector = new NylasSchedulerConnector({
            schedulerAPIURL: this.schedulerApiUrl,
            sessionId: this.sessionId,
            configId: this.configurationId,
            nylasSchedulerStore,
        });
        this.init.emit(this.host);
        this.baseProvider?.componentWillLoad(this.nylasSchedulerConnector);
        if (this.themeConfig) {
            for (const [key, value] of Object.entries(this.themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    async componentDidLoad() {
        this.baseProvider?.componentDidLoad();
        if (!this.checkIfSessionIdOrConfigIdExists()) {
            return;
        }
        const settings = await this.nylasSchedulerConnector?.scheduler.getUISettings();
        if (!settings || 'error' in settings) {
            this.nylasSchedulerError.emit({ ...this.getErrorObject(settings?.error) });
        }
        const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');
        const availableDaysInFuture = nylasSchedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;
        const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');
        if (selectedTimeslot && selectedTimeslot?.start_time) {
            if (!this.isTimeslotValid(selectedTimeslot)) {
                return;
            }
            if (nylasSchedulerStore?.get('showBookingForm')) {
                nylasSchedulerStore?.set('selectedDate', selectedTimeslot.start_time);
                return;
            }
        }
        const selectedDate = nylasSchedulerStore?.get('selectedDate');
        const availability = nylasSchedulerStore?.get('availability');
        let result;
        if (availability && availability.length > 0) {
            return;
        }
        if (!selectedDate) {
            const today = new Date();
            const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(today, availableDaysInFuture || 30);
            if (today.getTime() < endTimeForAvailableDaysInFuture * 1000) {
                result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);
            }
        }
        else {
            const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(selectedDate, availableDaysInFuture || 30);
            if (selectedDate.getTime() < endTimeForAvailableDaysInFuture * 1000) {
                result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);
            }
        }
        if (!result || 'error' in result) {
            this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });
        }
        if (!selectedDate) {
            let _selectedDate = new Date();
            const firstAvailableDate = nylasSchedulerStore?.get('availability').find((timeslot) => new Date(timeslot.start_time) > new Date());
            if (firstAvailableDate) {
                _selectedDate = firstAvailableDate.start_time;
            }
            nylasSchedulerStore?.set('selectedDate', _selectedDate);
        }
    }
    componentDisconnected() {
        this.baseProvider?.componentDisconnected();
    }
    bookingInfoChanged(newVal) {
        this.stores?.scheduler.set('bookingInfo', newVal);
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async monthChangedHandler(event) {
        const date = event.detail;
        const availableDaysInFuture = this.nylasSchedulerConnector?.schedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;
        const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(date, availableDaysInFuture || 30);
        if (startTime < endTimeForAvailableDaysInFuture && date.getTime() < endTimeForAvailableDaysInFuture * 1000) {
            const result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);
            if (!result || 'error' in result) {
                this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });
            }
        }
    }
    async bookButtonClickedHandler(event) {
        if (this.rescheduleBookingId) {
            const result = await this.nylasSchedulerConnector?.scheduler.rescheduleBooking(this.rescheduleBookingId, event.detail);
            if (!result || 'error' in result) {
                this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });
            }
            return;
        }
        const result = await this.nylasSchedulerConnector?.scheduler.bookTimeslot(event.detail);
        if (!result || 'error' in result) {
            this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });
        }
    }
    dateSelectedHandler(event) {
        const date = event.detail;
        this.selectedDateLabel = date ? date.toLocaleDateString(undefined, { dateStyle: 'full' }) : 'No date selected';
    }
    cancelBookedEventErrorHandler(event) {
        this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });
    }
    cancelBookedEventValidationErrorHandler(event) {
        this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });
    }
    rescheduleBookedEventErrorHandler(event) {
        this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });
    }
    async getNylasSchedulerStore() {
        return this.baseProvider?.getStore('scheduler');
    }
    async getNylasSchedulerConnector() {
        return this.nylasSchedulerConnector;
    }
    async getRef() {
        return this.host;
    }
    getErrorObject(error) {
        return {
            title: error?.title || genericError.title,
            category: error?.category || genericError.category,
            type: nr.Error,
            description: error?.message || '',
            id: new Date().getTime().toString(),
            ttl: 'none',
        };
    }
    checkIfSessionIdOrConfigIdExists() {
        if (!this.sessionId && !this.configurationId) {
            this.nylasSchedulerError.emit({
                title: 'No sessionId!',
                category: ErrorCategory.Component,
                type: nr.Error,
                description: 'Session ID is required',
                id: new Date().getTime().toString(),
                ttl: 'none',
            });
            return false;
        }
        return true;
    }
    isTimeslotValid(timeslot) {
        const selectedDate = new Date(timeslot.start_time);
        if (selectedDate < new Date()) {
            this.nylasSchedulerError.emit({
                title: 'Invalid tiemslot!',
                category: ErrorCategory.Component,
                type: nr.Error,
                description: 'The selected timeslot is invalid.',
                id: new Date().getTime().toString(),
                ttl: 'none',
            });
            return false;
        }
        return true;
    }
    validateAvailableDaysInFuture(startDate, availableDaysInFuture) {
        const today = new Date();
        const startTime = new Date(startDate.getFullYear(), startDate.getMonth(), 1).getTime() / 1000;
        const endTimeForCurrentMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 1).getTime() / 1000;
        const endTimeForAvailableDaysInFuture = Math.floor(addDaysToCurrentDate(today, availableDaysInFuture).getTime() / 1000);
        const endTime = Math.min(endTimeForAvailableDaysInFuture, endTimeForCurrentMonth);
        return { startTime, endTime, endTimeForAvailableDaysInFuture };
    }
    render() {
        const showDefaultScheduler = this.mode === 'app';
        const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');
        const eventInfo = nylasSchedulerStore?.get('eventInfo');
        const showBookingForm = nylasSchedulerStore?.get('showBookingForm');
        const cancelledEventInfo = nylasSchedulerStore?.get('cancelledEventInfo');
        const cancelBookingId = nylasSchedulerStore?.get('cancelBookingId') || this.cancelBookingId;
        const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');
        const rescheduleBookingId = nylasSchedulerStore?.get('rescheduleBookingId') || this.rescheduleBookingId;
        const nylasBranding = nylasSchedulerStore?.get('nylasBranding') || this.nylasBranding;
        if (showDefaultScheduler && cancelBookingId && !cancelledEventInfo) {
            return (h(Host, null, h(SchedulerView, { nylasBranding: nylasBranding, isLoading: this.isLoading, showNotification: this.showNotification }, h("div", { class: "cancel-flow-page", part: "cancel-flow-page" }, h("nylas-cancel-booking-form", { cancelBookingId: cancelBookingId, exportparts: "ncbf, ncbf__input-textfield, ncbf__button-cta, ncbf__button-outline, ncbf__input-label" })))));
        }
        if (showDefaultScheduler && cancelledEventInfo) {
            return (h(Host, null, h(SchedulerView, { nylasBranding: nylasBranding, isLoading: this.isLoading, showNotification: this.showNotification }, h("div", { class: "cancelled-event-page", part: "cancelled-event-page" }, h("nylas-cancelled-event-card", { cancelledEventInfo: cancelledEventInfo, exportparts: "ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card" })))));
        }
        if (showDefaultScheduler && eventInfo) {
            return (h(Host, null, h(SchedulerView, { nylasBranding: nylasBranding, isLoading: this.isLoading, showNotification: this.showNotification }, h("div", { class: "booked-event-page", part: "booked-event-page" }, h("nylas-booked-event-card", { selectedTimeslot: selectedTimeslot, eventInfo: eventInfo, exportparts: "nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta" })))));
        }
        if (showDefaultScheduler && (!eventInfo || !!rescheduleBookingId) && !showBookingForm) {
            const timeslotPickerCTALabel = this.host.querySelector('[slot="timeslot-picker-cta-label"]');
            return (h(Host, null, h(SchedulerView, { nylasBranding: nylasBranding, isLoading: this.isLoading, showNotification: this.showNotification }, rescheduleBookingId && h(MessageBanner, null, "Choose another time slot to reschedule your meeting"), h("div", { class: "select-date-page", part: "select-date-page" }, h("div", { class: "left-panel" }, h("nylas-date-picker", { exportparts: "ndp, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--selected, ndp__date--current-day, ndp__date--current-month" }), h("div", { class: "border" }), h("nylas-locale-switch", null)), h("div", { class: "right-panel" }, h("h2", null, h("calendar-icon", null), h("span", { id: "selectedDate" }, this.selectedDateLabel)), h("nylas-timeslot-picker", { exportparts: "ntp, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary" }, timeslotPickerCTALabel && (h("span", { slot: "timeslot-picker-cta-label" }, h("slot", { name: "timeslot-picker-cta-label" })))))))));
        }
        if (showDefaultScheduler && !eventInfo && showBookingForm) {
            const customTemplateSlot = this.host.querySelector('[slot="custom-booking-form"]');
            return (h(Host, null, h(SchedulerView, { nylasBranding: nylasBranding, isLoading: this.isLoading, showNotification: this.showNotification }, rescheduleBookingId && h(MessageBanner, null, "Choose another time slot to reschedule your meeting"), h("div", { class: "additional-data-page", part: "additional-data-page" }, h("div", { class: "left-panel" }, h("div", { class: "wrapper" }, h("nylas-selected-event-card", { exportparts: "nsec, nsec__card, nsec__icon, nsec__date, nsec__time" }))), h("div", { class: "right-panel" }, h("nylas-booking-form", { exportparts: "nbf, nbf__input-label, nbf__input-textfield, nbf__button-ghost, nbf__button-primary, nbf__button-outline" }, customTemplateSlot && (h("div", { slot: "custom-booking-form" }, h("slot", { name: "custom-booking-form" })))))))));
        }
        return (h(Host, null, h("slot", null)));
    }
    get host() { return this; }
    static get watchers() { return {
        "bookingInfo": ["bookingInfoChanged"]
    }; }
    static get style() { return nylasSchedulingCss; }
}, [1, "nylas-scheduling", {
        "mode": [1],
        "defaultSchedulerState": [16],
        "sessionId": [1, "session-id"],
        "schedulerApiUrl": [1, "scheduler-api-url"],
        "bookingInfo": [16],
        "rescheduleBookingId": [1, "reschedule-booking-id"],
        "cancelBookingId": [1, "cancel-booking-id"],
        "configurationId": [1, "configuration-id"],
        "nylasBranding": [4, "nylas-branding"],
        "eventOverrides": [16],
        "isLoading": [4, "is-loading"],
        "themeConfig": [16],
        "showNotification": [4, "show-notification"],
        "automaticComponentRegistration": [32],
        "selectedDateLabel": [32],
        "getNylasSchedulerStore": [64],
        "getNylasSchedulerConnector": [64],
        "getRef": [64]
    }, [[0, "registerComponent", "registerComponentHandler"], [0, "unregisterComponent", "unregisterComponentHandler"], [0, "monthChanged", "monthChangedHandler"], [0, "detailsConfirmed", "bookButtonClickedHandler"], [0, "dateSelected", "dateSelectedHandler"], [0, "cancelBookedEventError", "cancelBookedEventErrorHandler"], [0, "cancelBookedEventValidationError", "cancelBookedEventValidationErrorHandler"], [0, "rescheduleBookedEventError", "rescheduleBookedEventErrorHandler"]], {
        "bookingInfo": ["bookingInfoChanged"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-scheduling", "calendar-cancel-icon", "calendar-check-icon", "calendar-icon", "checkmark-circle-icon", "chevron-icon", "close-icon", "globe-icon", "loading-icon", "nylas-booked-event-card", "nylas-booking-form", "nylas-cancel-booking-form", "nylas-cancelled-event-card", "nylas-date-picker", "nylas-locale-switch", "nylas-logo", "nylas-notification", "nylas-selected-event-card", "nylas-timeslot-picker", "search-icon", "select-dropdown", "translate-icon", "warning-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-scheduling":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasScheduling$1);
            }
            break;
        case "calendar-cancel-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$n();
            }
            break;
        case "calendar-check-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$m();
            }
            break;
        case "calendar-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$l();
            }
            break;
        case "checkmark-circle-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$k();
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$j();
            }
            break;
        case "close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$i();
            }
            break;
        case "globe-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$h();
            }
            break;
        case "loading-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "nylas-booked-event-card":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "nylas-booking-form":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "nylas-cancel-booking-form":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "nylas-cancelled-event-card":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "nylas-date-picker":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "nylas-locale-switch":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "nylas-logo":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "nylas-notification":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "nylas-selected-event-card":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "nylas-timeslot-picker":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "translate-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "warning-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const NylasScheduling = NylasScheduling$1;
const defineCustomElement = defineCustomElement$1;

export { NylasScheduling, defineCustomElement };

//# sourceMappingURL=nylas-scheduling.js.map