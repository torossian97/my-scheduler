import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './chevron.js';
import { d as defineCustomElement$1 } from './search.js';

const selectDropdownCss = ":host{display:block;position:relative;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}@media screen and (max-width: 768px){:host{position:unset}}.dropdown{display:inline-block}.dropbtn{color:var(--nylas-base-800);padding:10px;font-size:1rem;font-family:var(--nylas-font-family);cursor:pointer;display:flex;gap:0.5rem;background:transparent;border:none;border-radius:var(--nylas-border-radius-2x)}.dropbtn.focus{background:transparent}.dropbtn:hover,.dropbtn:active{outline:1px solid var(--nylas-primary)}.dropbtn:active{outline:2px solid var(--nylas-primary)}.dropbtn span.chevron{display:flex;align-self:center}.dropbtn span.open{transform:rotate(90deg)}.dropbtn span.closed{transform:rotate(270deg)}.dropbtn span.selected-option{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:144px;font-size:14px;line-height:20px}@media screen and (max-width: 768px){.dropbtn span.selected-option{max-width:124px;font-size:16px}}.dropdown-content{display:block;margin-top:0.5rem;background-color:var(--nylas-base-0);max-width:306px;width:max-content;max-height:336px;overflow:auto;z-index:1;border-radius:4px;position:absolute;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1)}@media screen and (max-width: 768px){.dropdown-content{right:0;width:325px;max-width:unset}}.search-box{border-bottom:1px solid var(--nylas-base-200);padding:10px;position:sticky;top:0;background:var(--nylas-base-0)}.search-box .icon{position:absolute;top:1.25rem;left:1.25rem;color:var(--nylas-base-300)}.dropdown-content ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px}.dropdown-content ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.dropdown-content ul li:hover,.dropdown-content ul li:focus{background-color:var(--nylas-base-100)}.dropdown-content .selected{background-color:#e7e7e7}input[type=text]{width:-webkit-fill-available;padding:inherit;border:1px solid #ccc;border-radius:4px;position:sticky;background:no-repeat scroll 7px 7px;padding-left:30px;background-size:16px 16px}";

const SelectDropdown = proxyCustomElement(class SelectDropdown extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.selectedOptionChanged = createEvent(this, "selectedOptionChanged", 7);
        this.name = undefined;
        this.options = [];
        this.defaultSelectedOption = undefined;
        this.withSearch = true;
        this.pluralizedLabel = '';
        this.selectedOption = this.defaultSelectedOption || null;
        this.isOpen = false;
        this.searchValue = '';
        this.filteredOptions = [...this.options];
        this.ariaActivedescendant = '';
    }
    optionsChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = newValue;
    }
    defaultSelectedOptionChangedHandler(newValue, oldValue) {
        if (newValue.label === oldValue.label) {
            return;
        }
        this.selectedOption = newValue;
    }
    componentWillLoad() {
        this.filteredOptions = this.options;
        if (!this.selectedOption && !!this.defaultSelectedOption) {
            this.selectedOption = this.defaultSelectedOption;
        }
        if (!this.selectedOption && this.options.length > 0) {
            this.selectedOption = this.options[0];
        }
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    filterOptions(event) {
        const value = event.target.value;
        this.searchValue = value;
        this.filteredOptions = this.options.filter(option => option.label.toLowerCase().includes(value.toLowerCase()));
    }
    selectOption(option) {
        this.selectedOption = option;
        this.toggleDropdown();
        this.selectedOptionChanged.emit({
            value: option.value,
            name: this.name,
        });
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                this.inputRef?.focus();
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleListboxKeydown(e) {
        const items = this.filteredOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === items.length - 1) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            this.ariaActivedescendant = items[nextIndex].value;
            this.focusOption(nextIndex);
        }
        else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === 0) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            this.ariaActivedescendant = items[prevIndex].value;
            this.focusOption(prevIndex);
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            if (this.ariaActivedescendant) {
                this.selectOption(items[currentIndex]);
            }
        }
        else if (e.key === 'Escape') {
            this.isOpen = false;
        }
    }
    focusOption(index) {
        const option = this.filteredOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    handleComboboxKeyDown(event) {
        if (event.key === 'ArrowDown' || (event.key == 'Tab' && !event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[0].value;
            this.focusOption(0);
        }
        else if (event.key === 'ArrowUp' || (event.key === 'Tab' && event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value;
            this.focusOption(this.filteredOptions.length - 1);
        }
        else if (event.key === 'Escape') {
            this.isOpen = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (h("div", { key: '4b92f2c224e4cb1ec751c8dd46ff5bd16883110a', class: "dropdown", part: "sd_dropdown" }, h("button", { key: 'de1f96fe628dc11b3b7991f65065ec1ae55372fa', part: "sd_dropdown-button", class: { dropbtn: true, open: this.isOpen }, onClick: () => this.toggleDropdown(), "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name, onKeyDown: e => this.handleSelectButtonKeyDown(e) }, h("slot", { key: '05166ff83a6f0cbf3a63d79e257570c996c2972d', name: "select-icon", "aria-hidden": "true" }), h("span", { key: '99d79f6d8969fa6e88092af65ed7438d06c70693', class: "selected-option", part: "sd_dropdown-button-selected-label" }, this.selectedOption?.label ? `${this.selectedOption?.label + this.pluralizedLabel}` : ''), h("span", { key: '220bed22a19b8e73a0b5f420a95169b5593138a3', class: {
                open: this.isOpen,
                closed: !this.isOpen,
                chevron: true,
            }, "aria-hidden": "true" }, h("chevron-icon", { key: '6ed5947377584f0adaa466c5f2c189e4795e72e2', width: "16", height: "16" }))), this.isOpen ? (h("div", { class: "dropdown-content", part: "sd_dropdown-content" }, this.withSearch && (h("div", { class: { 'search-box': true, 'open': this.isOpen } }, h("search-icon", { width: "15", height: "15", class: 'icon' }), h("input", { type: "text", role: "combobox", placeholder: "Search", value: this.searchValue, ref: el => (this.inputRef = el), onInput: event => this.filterOptions(event), onKeyDown: e => this.handleComboboxKeyDown(e) }))), h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.filteredOptions.map(option => (h("li", { tabindex: "0", key: option.value, id: option.value, onClick: () => this.selectOption(option), role: "option" }, option.labelHTML ? option.labelHTML : option.label)))))) : null));
    }
    get el() { return this; }
    static get watchers() { return {
        "options": ["optionsChangedHandler"],
        "defaultSelectedOption": ["defaultSelectedOptionChangedHandler"]
    }; }
    static get style() { return selectDropdownCss; }
}, [1, "select-dropdown", {
        "name": [1],
        "options": [16],
        "defaultSelectedOption": [16],
        "withSearch": [4, "with-search"],
        "pluralizedLabel": [1, "pluralized-label"],
        "selectedOption": [32],
        "isOpen": [32],
        "searchValue": [32],
        "filteredOptions": [32],
        "ariaActivedescendant": [32]
    }, [[6, "click", "handleOutsideClick"]], {
        "options": ["optionsChangedHandler"],
        "defaultSelectedOption": ["defaultSelectedOptionChangedHandler"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["select-dropdown", "chevron-icon", "search-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, SelectDropdown);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { SelectDropdown as S, defineCustomElement as d };

//# sourceMappingURL=select-dropdown2.js.map