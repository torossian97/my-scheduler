import { proxyCustomElement, HTMLElement, createEvent, h, Host, Fragment } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, y as toTitleCase, z as formatFolderName } from './utils.js';
import { d as defineCustomElement$8 } from './archive.js';
import { d as defineCustomElement$7 } from './folder.js';
import { d as defineCustomElement$6 } from './inbox.js';
import { d as defineCustomElement$5 } from './sent.js';
import { d as defineCustomElement$4 } from './spam.js';
import { d as defineCustomElement$3 } from './star.js';
import { d as defineCustomElement$2 } from './trash.js';

const nylasListFoldersCss = ":host{display:block}.folders{display:flex;flex-direction:column;align-items:self-start}.folders .folder{border:1px solid var(--nylas-color-primary-100);padding:0.5rem 0.75rem;margin-bottom:0.5rem;justify-content:left;width:100%;min-width:200px;border-radius:var(--nylas-border-radius);background-color:var(--nylas-color-primary-50)}.folders .folder:last-child{margin-bottom:0}.folders .folder.selected{background-color:var(--nylas-color-primary-100)}.folders .folder .icon{margin-right:0.5rem;stroke:var(--nylas-color-primary-900);fill:none}hr{width:100%;margin:1rem 0;border:0;border-top:1px solid var(--nylas-color-primary-100)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasListFolders$1 = proxyCustomElement(class NylasListFolders extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.folderSelected = createEvent(this, "folderSelected", 7);
        this.folderSelectedHandler = (folder) => {
            this.folderSelected?.emit(folder);
        };
        this.folders = undefined;
        this.selectedFolder = undefined;
        this.defaultFolders = undefined;
        this.otherFolders = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-list-folders] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-list-folders] Component did load`);
    }
    watchFolders(newFolders) {
        debug(`[nylas-list-folders] watchFolders`, { newFolders });
        const defaultFolders = ['inbox', 'drafts', 'sent', 'starred', 'spam', 'archive', 'trash'];
        this.defaultFolders = defaultFolders
            .filter(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .map(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .filter(folder => typeof folder !== 'undefined')
            .sort((a, b) => defaultFolders.indexOf(a?.name ?? '') - defaultFolders.indexOf(b?.name ?? ''));
        this.otherFolders = newFolders
            .filter(folder => !defaultFolders.find(folderName => folder.name?.toLowerCase() === folderName.toLowerCase()))
            .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? ''));
    }
    formatFolderName(folder) {
        return toTitleCase(folder.name?.replace('CATEGORY_', '') ?? 'Unknown');
    }
    getFolderIcon(folder) {
        switch (folder.name?.toLowerCase()) {
            case 'inbox':
                return h("inbox-icon", null);
            case 'drafts':
                return h("drafts-icon", null);
            case 'sent':
                return h("sent-icon", null);
            case 'starred':
                return h("star-icon", null);
            case 'spam':
                return h("spam-icon", null);
            case 'archive':
                return h("archive-icon", null);
            case 'trash':
                return h("trash-icon", null);
            default:
                return h("folder-icon", null);
        }
    }
    render() {
        return (h(Host, { key: '222ae81308d17cbdc7c3a44f0902fc683c88da1d' }, h("div", { key: '5ac1653c3b9ea1e3712e7597becc4d38435f3fa1', class: "folders" }, this.defaultFolders?.map(folder => (h("sp-button", { onClick: () => this.folderSelectedHandler(folder), class: {
                folder: true,
                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),
            } }, h("div", { slot: "icon", class: "icon" }, this.getFolderIcon(folder)), this.formatFolderName(folder))))), this.otherFolders && (h(Fragment, null, h("hr", null), h("div", { class: "folders" }, this.otherFolders?.map(folder => (h("sp-button", { onClick: () => this.folderSelectedHandler(folder), class: {
                folder: true,
                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),
            } }, h("div", { slot: "icon", class: "icon" }, this.getFolderIcon(folder)), this.formatFolderName(folder)))))))));
    }
    static get watchers() { return {
        "folders": ["watchFolders"]
    }; }
    static get style() { return nylasListFoldersCss; }
}, [1, "nylas-list-folders", {
        "folders": [16],
        "selectedFolder": [1, "selected-folder"],
        "defaultFolders": [32],
        "otherFolders": [32]
    }, undefined, {
        "folders": ["watchFolders"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-pagination',
        stateToProps: new Map([
            ['mailbox.folders', 'folders'],
            ['mailbox.selectedFolder', 'selectedFolder'],
        ]),
        eventToProps: {
            folderSelected: async (_event, nylasConnector) => {
                debug(`[nylas-list-folders] folderSelected event`, { _event });
                await nylasConnector.threads.getThreads({
                    page_token: undefined,
                    in: formatFolderName(_event.detail.id ?? 'inbox'),
                });
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListFolders$1.prototype, "render", null);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-list-folders", "archive-icon", "folder-icon", "inbox-icon", "sent-icon", "spam-icon", "star-icon", "trash-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-list-folders":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasListFolders$1);
            }
            break;
        case "archive-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "folder-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "inbox-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "sent-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "spam-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "star-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "trash-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const NylasListFolders = NylasListFolders$1;
const defineCustomElement = defineCustomElement$1;

export { NylasListFolders, defineCustomElement };

//# sourceMappingURL=nylas-list-folders.js.map