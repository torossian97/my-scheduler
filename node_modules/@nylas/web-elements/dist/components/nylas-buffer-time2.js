import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$3 } from './chevron.js';
import { d as defineCustomElement$2 } from './search.js';
import { d as defineCustomElement$1 } from './select-dropdown2.js';

const nylasBufferTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-buffer-time{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-buffer-time .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-buffer-time .header h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-buffer-time .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-buffer-time .nylas-buffer-time__body{display:grid;grid-template-columns:1fr auto}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body{grid-template-columns:1fr}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown{padding:1rem;display:flex;flex-direction:column;gap:1rem;border-right:1px solid var(--nylas-base-200);color:var(--nylas-base-800)}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown{border:none}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row{display:grid;grid-template-columns:auto 1fr;align-items:center;gap:1rem}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row label{width:200px}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row .dropdown-container{display:flex;gap:1rem;align-items:center;justify-content:flex-end}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview{width:208px;background:var(--nylas-base-25);border-bottom-right-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview{width:inherit;border-bottom-left-radius:var(--nylas-border-radius-2x)}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview h4{font-size:14px;line-height:24px;color:var(--nylas-base-600);font-family:var(--nylas-font-family);font-weight:500;text-align:center;margin:0.75rem 0}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container{padding:0 2rem 1rem}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot{background-color:transparent;border-top:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot.active{background-color:var(--nylas-base-100)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot:last-of-type{border-bottom:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .event-slot{background-color:var(--nylas-base-600);border-top:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-button){width:104px;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-content){width:100%}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBufferTime = proxyCustomElement(class NylasBufferTime extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.name = 'buffer-time';
        this.buffer = { before: 0, after: 0 };
        this.selectedBeforeBufferTime = this.buffer.before;
        this.selectedAfterBufferTime = this.buffer.after;
    }
    connectedCallback() {
        debug('nylas-buffer-time', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-buffer-time', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-buffer-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-buffer-time', 'componentDidLoad');
        if (typeof this.internals.setFormValue === 'function') {
            const bufferTime = {
                before: this.selectedBeforeBufferTime,
                after: this.selectedAfterBufferTime,
            };
            this.internals.setFormValue(JSON.stringify(bufferTime), this.name);
        }
        this.selectedAfterBufferTime = this.buffer.after;
        this.selectedBeforeBufferTime = this.buffer.before;
    }
    componentWillUpdate() {
        debug('nylas-buffer-time', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-buffer-time', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-buffer-time', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-buffer-time', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-buffer-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedOptionChangedHandler(event) {
        debug('nylas-buffer-time', 'selectedOptionChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value, name } = event.detail;
            if (name === 'before-buffer-time') {
                this.selectedBeforeBufferTime = parseInt(value);
            }
            else if (name === 'after-buffer-time') {
                this.selectedAfterBufferTime = parseInt(value);
            }
            const bufferTime = {
                before: this.selectedBeforeBufferTime,
                after: this.selectedAfterBufferTime,
            };
            this.internals.setFormValue(JSON.stringify(bufferTime), 'booking-calendar');
        };
        this.valueChanged.emit({ ...event.detail, valueChanged });
    }
    renderPreview() {
        const totalSlots = 4;
        const slotHeight = 10;
        const eventSlotHeight = slotHeight * 2;
        const slotFill = minutes => {
            const fullSlots = Math.floor(minutes / 30);
            const partialFillHeight = ((minutes % 30) / 30) * slotHeight;
            return {
                fullSlots,
                partialFillHeight,
            };
        };
        const createBeforeSlots = () => {
            const { fullSlots, partialFillHeight } = slotFill(this.selectedBeforeBufferTime);
            return Array.from({ length: totalSlots }, (_, index) => {
                const isActive = this.selectedBeforeBufferTime > 0 && index > totalSlots - fullSlots - 1;
                const isPartial = this.selectedBeforeBufferTime > 0 && index === totalSlots - fullSlots - 1 && partialFillHeight > 0;
                let slotStyle = {};
                if (isActive && !isPartial) {
                    slotStyle.backgroundColor = 'var(--nylas-base-100)';
                }
                else if (isPartial) {
                    slotStyle.background = `linear-gradient(to top, var(--nylas-base-100) ${partialFillHeight}px, transparent 0)`;
                }
                return (h("div", { key: index, class: `slot ${isActive ? 'active' : ''}`, style: {
                        height: `${slotHeight}px`,
                        ...slotStyle,
                    } }));
            });
        };
        const createAfterSlots = () => {
            const { fullSlots, partialFillHeight } = slotFill(this.selectedAfterBufferTime);
            return Array.from({ length: totalSlots }, (_, index) => {
                const isActive = this.selectedAfterBufferTime > 0 && index < fullSlots;
                const isPartial = index === fullSlots && partialFillHeight > 0;
                let slotStyle = {};
                if (isActive && !isPartial) {
                    slotStyle.backgroundColor = 'var(--nylas-base-100)';
                }
                else if (isPartial) {
                    slotStyle.background = `linear-gradient(to bottom, var(--nylas-base-100) ${partialFillHeight}px, transparent 0)`;
                }
                return (h("div", { key: index, class: `slot ${isActive ? 'active' : ''}`, style: {
                        height: `${slotHeight}px`,
                        ...slotStyle,
                    } }));
            });
        };
        return (h("div", { class: "preview-container" }, createBeforeSlots(), h("div", { class: "event-slot", style: { height: `${eventSlotHeight}px` } }), createAfterSlots()));
    }
    render() {
        const minuteOptions = Array.from({ length: 24 }, (_, i) => {
            const value = (i + 1) * 5;
            return {
                label: value.toString(),
                value: value,
            };
        });
        return (h(Host, null, h("div", { class: "nylas-buffer-time", part: "nbt" }, h("div", { class: "header", part: "nbt__header" }, h("h3", null, "Buffer time"), h("p", null, "Add buffer time before and after the event.")), h("div", { class: "nylas-buffer-time__body", part: "nbt__body" }, h("div", { class: "nylas-buffer-time__dropdown" }, h("div", { class: "nylas-buffer-time__row" }, h("label", null, "Before the event"), h("div", { class: "dropdown-container" }, h("select-dropdown", { id: "before-buffer-time", withSearch: false, name: "before-buffer-time", exportparts: "sd_dropdown: nbt__dropdown-before, sd_dropdown-button: nbt__dropdown-button-before, sd_dropdown-content: nbt__dropdown-content-before", options: minuteOptions, defaultSelectedOption: minuteOptions.find(min => min.value == this.selectedBeforeBufferTime) ?? minuteOptions[0] }), h("span", null, "mins"))), h("div", { class: "nylas-buffer-time__row" }, h("label", null, "After the event"), h("div", { class: "dropdown-container" }, h("select-dropdown", { id: "after-buffer-time", withSearch: false, name: "after-buffer-time", exportparts: "sd_dropdown: nbt__dropdown-after, sd_dropdown-button: nbt__dropdown-button-after, sd_dropdown-content: nbt__dropdown-content-after", options: minuteOptions, defaultSelectedOption: minuteOptions.find(min => min.value == this.selectedAfterBufferTime) ?? minuteOptions[0] }), h("span", null, "mins")))), h("div", { class: "nylas-buffer-time__preview", part: "nbt__preview" }, h("h4", null, "PREVIEW"), this.renderPreview())))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
    static get style() { return nylasBufferTimeCss; }
}, [65, "nylas-buffer-time", {
        "name": [1],
        "buffer": [16],
        "selectedBeforeBufferTime": [32],
        "selectedAfterBufferTime": [32]
    }, [[0, "selectedOptionChanged", "selectedOptionChangedHandler"]], {
        "name": ["elementNameChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-buffer-time',
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBufferTime.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-buffer-time", "chevron-icon", "search-icon", "select-dropdown"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-buffer-time":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasBufferTime);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasBufferTime as N, defineCustomElement as d };

//# sourceMappingURL=nylas-buffer-time2.js.map