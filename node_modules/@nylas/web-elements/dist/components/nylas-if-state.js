import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';

const nylasIfStateCss = ":host{display:block}div{height:inherit}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.fade-in{animation:fadeIn 1.5s}.fade-out{animation:fadeOut 1.5s}@keyframes slideIn{0%{transform:translateY(100%)}100%{transform:translateY(0)}}@keyframes slideOut{0%{transform:translateY(0)}100%{transform:translateY(100%)}}.slide-in{animation:slideIn 1.5s}.slide-out{animation:slideOut 1.5s}@keyframes swipeIn{0%{transform:translateX(100%)}100%{transform:translateX(0)}}@keyframes swipeOut{0%{transform:translateX(0)}100%{transform:translateX(100%)}}.swipe-in{animation:swipeIn 1.5s}.swipe-out{animation:swipeOut 1.5s}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasIfState$1 = proxyCustomElement(class NylasIfState extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.state = undefined;
        this.isStateSet = undefined;
        this.isBoolean = undefined;
        this.getStore = undefined;
        this.transition = 'none';
        this.show = false;
        this.classes = {};
        this.initTransition = this.initTransition.bind(this);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-if-state] Component will load`);
        this.watchStore(true);
    }
    async componentDidLoad() {
        debug(`[nylas-if-state] Component did load`);
    }
    shouldRender() {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return false;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return false;
        }
        const state = store.state[stateName];
        if (typeof this.isStateSet === 'boolean') {
            return ((this.isStateSet === false && (typeof state === 'undefined' || state === null || state.length === 0)) ||
                (this.isStateSet === true && typeof state !== 'undefined' && state !== null));
        }
        if (typeof this.isBoolean === 'boolean') {
            return (this.isBoolean === true && typeof state !== 'undefined' && state === true) || (this.isBoolean === false && typeof state !== 'undefined' && state === false);
        }
        return false;
    }
    onGetStoreChange() {
        this.watchStore(true);
    }
    watchStore(immediate = false) {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return null;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return null;
        }
        if (immediate === true) {
            this.initTransition();
        }
        store.onChange(stateName, this.initTransition);
    }
    initTransition() {
        const show = this.shouldRender();
        switch (this.transition) {
            case 'fade':
            case 'slide':
            case 'swipe':
                this.classes = {
                    [`${this.transition}-in`]: show,
                    [`${this.transition}-out`]: !show,
                };
                setTimeout(() => {
                    this.show = show;
                }, 150);
                break;
            default:
                this.show = this.shouldRender();
                break;
        }
    }
    render() {
        return (h(Host, { key: '74d76de08a4f4ccaff6231843d16b8b574a7ac04' }, h("div", { key: '30531d15d2085f779c70e0c17d072f730feb3799', class: this.classes }, this.show && h("slot", null))));
    }
    static get watchers() { return {
        "getStore": ["onGetStoreChange"]
    }; }
    static get style() { return nylasIfStateCss; }
}, [1, "nylas-if-state", {
        "state": [1],
        "isStateSet": [4, "is-state-set"],
        "isBoolean": [4, "is-boolean"],
        "getStore": [16],
        "transition": [1],
        "show": [32],
        "classes": [32]
    }, undefined, {
        "getStore": ["onGetStoreChange"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-if-state',
        getStoresToProp: 'getStore',
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasIfState$1.prototype, "render", null);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-if-state"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-if-state":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasIfState$1);
            }
            break;
    } });
}

const NylasIfState = NylasIfState$1;
const defineCustomElement = defineCustomElement$1;

export { NylasIfState, defineCustomElement };

//# sourceMappingURL=nylas-if-state.js.map