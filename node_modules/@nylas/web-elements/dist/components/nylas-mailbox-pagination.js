import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$3 } from './chevron.js';
import { d as defineCustomElement$2 } from './refresh.js';

const nylasMailboxPaginationCss = ":host{display:contents}.container{height:var(--container-height, 100dvh);overflow-y:var(--container-overflow-y, auto)}.pagination{display:flex;justify-content:center;align-items:center;margin:0 auto;padding:0;list-style:none;font-size:0.875rem;font-weight:600;color:var(--nylas-color-primary-600)}.pagination sp-button svg{animation:rotate 1s linear infinite}sp-button{border-radius:var(--nylas-border-radius);background-color:var(--nylas-color-primary-400);color:var(--nylas-color-primary-900);fill:var(--nylas-color-primary-900)}sp-button:hover{background-color:var(--nylas-color-primary-500)}sp-button:disabled{background-color:var(--nylas-color-primary-200);color:var(--nylas-color-primary-600);cursor:not-allowed}sp-button chevron-icon svg{width:15px;height:15px}.next chevron-icon{transform:rotate(180deg)}@keyframes rotate{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMailboxPagination$1 = proxyCustomElement(class NylasMailboxPagination extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.next = createEvent(this, "next", 7);
        this.previous = createEvent(this, "previous", 7);
        this.state = 'ready';
        this.hasNextPage = false;
        this.hasPreviousPage = false;
        this.scrollTarget = 'container';
        this.mobileOnlyInfiniteScroll = true;
        this.mobileViewPortWidth = 768;
        debug(`[nylas-pagination] Constructed`);
        this.isScrollAtContainerBottom = this.isScrollAtContainerBottom.bind(this);
        this.isScrollAtPageBottom = this.isScrollAtPageBottom.bind(this);
        this.nextPage = this.nextPage.bind(this);
        this.previousPage = this.previousPage.bind(this);
        this.handlePageScroll = this.handlePageScroll.bind(this);
        this.handleContainerScroll = this.handleContainerScroll.bind(this);
    }
    connectedCallback() {
        debug(`[nylas-pagination] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-pagination] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-pagination] Component did load`);
        if (this.containerElement) {
            this.containerElement.addEventListener('scroll', this.handleContainerScroll);
        }
    }
    async componentWillRender() {
        debug(`[nylas-pagination] Component will render`);
    }
    disconnectedCallback() {
        debug(`[nylas-pagination] Component disconnected`);
        if (this.containerElement) {
            this.containerElement.removeEventListener('scroll', this.handleContainerScroll);
        }
    }
    handlePageScroll(_event) {
        if (this.isScrollAtPageBottom() && this.canScroll && this.scrollTarget === 'page') {
            this.nextPage();
        }
    }
    async nextPage() {
        const hasChildren = this.host.children.length > 0;
        this.next.emit({
            hasChildren,
        });
    }
    async previousPage() {
        const hasChildren = this.host.children.length > 0;
        this.previous.emit({
            hasChildren,
        });
    }
    handleContainerScroll(_event) {
        if (this.isScrollAtContainerBottom() && this.canScroll && this.scrollTarget === 'container') {
            this.nextPage();
        }
    }
    isScrollAtContainerBottom() {
        if (!this.containerElement) {
            return false;
        }
        return this.containerElement && this.containerElement.scrollTop + this.containerElement.clientHeight >= this.containerElement.scrollHeight;
    }
    isScrollAtPageBottom() {
        return window.innerHeight + window.scrollY >= document.body.offsetHeight;
    }
    get canScroll() {
        const hasChildren = this.host.children.length > 0;
        return this.state === 'ready' && hasChildren && (!this.mobileOnlyInfiniteScroll || window.innerWidth < this.mobileViewPortWidth);
    }
    render() {
        const hasChildren = this.host.children.length > 0;
        if (hasChildren) {
            return (h(Host, null, h("div", { class: "container", ref: r => (this.containerElement = r) }, h("slot", null), this.canScroll && (h("div", { class: 'pagination' }, h("sp-theme", { scale: "medium", color: "dark" }, this.state === 'ready' && this.hasNextPage && (h("sp-button", { onClick: this.nextPage }, h("div", { slot: "icon" }, h("refresh-icon", { class: 'refres-icon' })), ' ', "Load more..."))))))));
        }
        return (h(Host, null, h("sp-theme", { scale: "medium", color: "dark" }, this.hasPreviousPage && (h("sp-button", { class: 'previous', parr: "previous", onClick: this.previousPage }, h("div", { slot: "icon" }, h("chevron-icon", { class: 'previous-icon' })), ' ', "Previous")), this.hasPreviousPage && this.hasNextPage && ' ', this.hasNextPage && (h("sp-button", { class: 'next', parr: "next", onClick: this.nextPage }, h("div", { slot: "icon" }, h("chevron-icon", { class: 'next-icon' })), ' ', "Next")))));
    }
    get host() { return this; }
    static get style() { return nylasMailboxPaginationCss; }
}, [1, "nylas-mailbox-pagination", {
        "state": [1],
        "hasNextPage": [4, "has-next-page"],
        "hasPreviousPage": [4, "has-previous-page"],
        "scrollTarget": [1, "scroll-target"],
        "mobileOnlyInfiniteScroll": [4, "mobile-only-infinite-scroll"],
        "mobileViewPortWidth": [2, "mobile-view-port-width"],
        "nextPage": [64],
        "previousPage": [64]
    }, [[9, "scroll", "handlePageScroll"]]]);
__decorate([
    RegisterComponent({
        name: 'nylas-pagination',
        stateToProps: new Map([
            ['mailbox.hasNextThreadPage', 'hasNextPage'],
            ['mailbox.hasPreviousThreadPage', 'hasPreviousPage'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            next: async (event, nylasConnector) => {
                debug(`[nylas-pagination] Next page event fired`);
                const { hasChildren } = event.detail;
                await nylasConnector.threads.nextThreadPage(hasChildren ? 'append' : 'overwrite', !hasChildren);
            },
            previous: async (event, nylasConnector) => {
                debug(`[nylas-pagination] Previous page event fired`);
                const { hasChildren } = event.detail;
                await nylasConnector.threads.previousThreadPage(hasChildren ? 'append' : 'overwrite', !hasChildren);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMailboxPagination$1.prototype, "render", null);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-mailbox-pagination", "chevron-icon", "refresh-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-mailbox-pagination":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasMailboxPagination$1);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "refresh-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const NylasMailboxPagination = NylasMailboxPagination$1;
const defineCustomElement = defineCustomElement$1;

export { NylasMailboxPagination, defineCustomElement };

//# sourceMappingURL=nylas-mailbox-pagination.js.map