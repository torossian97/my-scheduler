import { h, Fragment, proxyCustomElement, HTMLElement, createEvent, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, I as formatTimeAgo, A as formatParticipants, J as formatRecipient, y as toTitleCase } from './utils.js';
import { d as defineCustomElement$e } from './bold.js';
import { d as defineCustomElement$d } from './chevron.js';
import { d as defineCustomElement$c } from './forward.js';
import { d as defineCustomElement$b } from './italic.js';
import { d as defineCustomElement$a } from './loading.js';
import { d as defineCustomElement$9 } from './nylas-composer2.js';
import { d as defineCustomElement$8 } from './nylas-summarize-message-button2.js';
import { d as defineCustomElement$7 } from './nylas-view-email2.js';
import { d as defineCustomElement$6 } from './play.js';
import { d as defineCustomElement$5 } from './reply-all.js';
import { d as defineCustomElement$4 } from './reply.js';
import { d as defineCustomElement$3 } from './stop.js';
import { d as defineCustomElement$2 } from './underline.js';

function renderViewEmail(message, attachments, container, viewEmailElement, parent) {
    if (!viewEmailElement) {
        return;
    }
    if (!container) {
        return;
    }
    if (container.children.length > 0) {
        return;
    }
    debug(`[nylas-view-thread] Rendering email`, { message, attachments, viewEmailElement });
    const viewEmailElementClone = viewEmailElement.cloneNode(true);
    viewEmailElementClone.message = message.data;
    viewEmailElementClone.parent = parent;
    container.appendChild(viewEmailElementClone);
}
const ViewThreadMessage = ({ viewEmailElement, message, attachments, onMessageClick, onShowContactDataClick, parent }) => (h(Fragment, null,
    h("div", { key: message.id, class: 'message' },
        h("div", { class: 'sub-header', "data-id": message.data.id, onClick: onMessageClick },
            h("div", { class: 'avatar' }, message.data.from && message.data.from[0]?.name && message.data.from[0]?.name[0]?.toUpperCase()),
            h("div", { class: 'from' },
                h("span", { class: 'name' }, message.data.from && message.data.from[0]?.name),
                " ",
                h("span", { class: "email" }, message.data.from && message.data.from[0]?.email)),
            h("div", { class: 'date' },
                new Date(message.data.date * 1000).toLocaleTimeString(undefined, {
                    timeStyle: 'short',
                }),
                ' ',
                "(",
                formatTimeAgo(new Date(message.data.date * 1000)),
                ")"),
            h("sp-button-group", { class: "buttons" },
                h("nylas-summarize-message-button", { message: message.data })),
            message.collapse && h("div", { class: 'snippet' }, message.data.snippet),
            !message.collapse && message.data.to && (h("div", { class: 'to' },
                h("span", null, "to"),
                " ",
                formatParticipants(message.data.to),
                ' ',
                h("button", { type: "button", value: message.data.id, onClick: onShowContactDataClick, class: {
                        'expand': true,
                        'expand--showContactData': message.showContactData,
                    } },
                    h("chevron-icon", null))))),
        message.showContactData && (h("div", { class: 'address-info' },
            h("div", { class: 'label' }, "From"),
            h("div", { class: 'value' }, formatRecipient(message.data?.from ? message?.data?.from[0] : { name: '', email: '' })),
            message.data.to && (h(Fragment, null,
                h("div", { class: 'label' }, "To"),
                h("div", { class: 'value' }, message.data.to.map(to => (h("div", null, formatRecipient(to))))))),
            typeof message.data.cc !== 'undefined' && message.data.cc.length > 0 && (h(Fragment, null,
                h("div", { class: 'label' }, "CC"),
                h("div", { class: 'value' }, message.data.cc.map(cc => (h("div", null, formatRecipient(cc))))))))),
        !message.collapse && viewEmailElement && h("div", { key: message.id, ref: el => renderViewEmail(message, attachments, el, viewEmailElement, parent) }),
        !message.collapse && !viewEmailElement && h("nylas-view-email", { key: message.id, message: message.data, parent: parent })),
    h("hr", null)));

const nylasViewThreadCss = ":host{display:block;font-size:inherit}.avatar{z-index:1;border-radius:100%;background-color:var(--nylas-color-primary-200);height:40px;width:40px;align-items:center;display:flex;justify-content:center;border:1px solid var(--nylas-color-primary-200)}.view-thread{display:grid;grid-auto-flow:row;width:100%}.view-thread .header{display:grid;grid-gap:1rem;align-items:center;margin-bottom:1rem}.view-thread .header .subject{font-size:1.25rem;font-weight:600;line-height:1.5rem}.view-thread .header .folders{display:grid;grid-auto-flow:column;grid-auto-columns:min-content;overflow-x:auto;gap:1rem}.view-thread .header .folders .folder{padding:0 0.5rem;font-size:0.9rem;color:var(--nylas-color-primary-900);background-color:var(--nylas-color-primary-300)}.view-thread .messages{display:grid;gap:1rem}.view-thread .messages hr{margin:0;width:100%;border:1px solid var(--nylas-color-primary-200)}.view-thread .messages hr:last-of-type{display:none}.view-thread .messages .message{display:grid;grid-auto-flow:row;gap:1rem}.view-thread .messages .message:last-of-type .sub-header{cursor:default}.view-thread .messages .message .sub-header{display:grid;grid-template:\"avatar from date buttons\" \"avatar to to buttons\";grid-column-gap:1rem;grid-template-columns:auto 1fr auto auto;cursor:pointer}.view-thread .messages .message .sub-header>*{pointer-events:none}.view-thread .messages .message .sub-header .avatar{grid-area:avatar}.view-thread .messages .message .sub-header .from{grid-area:from}.view-thread .messages .message .sub-header .from span.email{display:none;color:var(--nylas-color-primary-400);font-weight:600}.view-thread .messages .message .sub-header .buttons{grid-area:buttons;align-self:center}.view-thread .messages .message .sub-header .buttons *{pointer-events:all}.view-thread .messages .message .sub-header .date{grid-area:date;align-self:center;color:var(--nylas-color-primary-400)}.view-thread .messages .message .sub-header .snippet{width:90%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--nylas-color-primary-600)}.view-thread .messages .message .sub-header .to{grid-area:to;color:var(--nylas-color-primary-400)}.view-thread .messages .message .sub-header .to>span{color:var(--nylas-color-primary-400)}.view-thread .messages .message .sub-header .to button{border:0;background-color:transparent;cursor:pointer;pointer-events:all;padding:0;margin:0}.view-thread .messages .message .sub-header .to button>*{pointer-events:none}.view-thread .messages .message .sub-header .to button chevron-icon{display:inline-table;fill:var(--nylas-color-primary-400);width:15px;height:15px;vertical-align:middle}.view-thread .messages .message .sub-header .to button chevron-icon svg{width:15px;height:15px;transform:rotate(90deg)}.view-thread .messages .message .sub-header .to button.expand--showContactData chevron-icon svg{transform:rotate(270deg)}.view-thread .messages .message .address-info{display:grid;column-gap:1rem;row-gap:0.5rem;grid-template-columns:auto 1fr;grid-template-rows:1fr;padding:1rem 2rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-color-primary-200);align-items:flex-start;color:var(--nylas-color-primary-600)}.view-thread .messages .message .address-info .label{color:var(--nylas-color-primary-400);font-weight:600}.show-more{position:relative;display:flex;width:100%}.show-more .sr-only{display:none}.show-more button{position:relative;display:inline-flex;width:100%;padding:0;border:0;background-color:transparent;cursor:pointer;text-align:left;overflow:hidden}.show-more button span{border:1px solid var(--nylas-color-primary-400)}.show-more button:hover span{background-color:var(--nylas-color-primary-700)}.show-more button::after{border-top:1px solid rgba(100, 121, 143, 0.122);border-bottom:1px solid rgba(100, 121, 143, 0.122);content:\"\";height:4px;width:100%;position:absolute;top:50%}.loading{position:absolute;width:100%;height:100%;background-color:var(--loading__background-color);top:0;bottom:0;left:0;z-index:1;display:grid;justify-content:center;align-items:center;font-weight:600;overflow:hidden}.reply-buttons{display:grid;grid-auto-flow:column;grid-auto-columns:min-content;gap:1rem;margin-top:1rem}.reply-buttons sp-button{border-radius:var(--nylas-border-radius);background-color:var(--nylas-color-primary-400);color:var(--nylas-color-primary-900);fill:var(--nylas-color-primary-900)}.reply-buttons sp-button:hover{background-color:var(--nylas-color-primary-500)}.reply-buttons sp-button:disabled{background-color:var(--nylas-color-primary-200);color:var(--nylas-color-primary-600);cursor:not-allowed}.reply-buttons sp-button chevron-icon{display:inline-block}@media only screen and (min-width: 768px){.view-thread .messages .message .sub-header .from span.email{display:inline}}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasViewThread$1 = proxyCustomElement(class NylasViewThread extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.threadSelected = createEvent(this, "threadSelected", 7);
        this.showContactDataClicked = createEvent(this, "showContactDataClicked", 7);
        this.messageClicked = createEvent(this, "messageClicked", 7);
        this.nylasViewEmailElement = null;
        this.nylasComposerElement = null;
        this.onShowContactDataClick = (originalEvent) => {
            originalEvent.stopPropagation();
            const target = originalEvent.target;
            const messageId = target.value;
            const message = this.internalMessages.find(message => message.data.id === messageId);
            if (!message) {
                debug(`[nylas-view-thread] Could not find message ${messageId}`);
                return;
            }
            const event = this.showContactDataClicked.emit(message.data);
            if (!event.defaultPrevented) {
                message.showContactData = !message.showContactData;
                this.internalMessages = [...this.internalMessages];
            }
            debug(`[nylas-view-thread] show contact data clicked ${messageId} ${message.showContactData ? 'collapsed' : 'expanded'}`);
        };
        this.onMessageClick = (originalEvent) => {
            const target = originalEvent.target;
            const messageId = target.dataset.id;
            const message = this.internalMessages.find(message => message.data.id === messageId);
            if (!message) {
                debug(`[nylas-view-thread] Could not find message ${messageId}`);
                return;
            }
            const event = this.messageClicked.emit(message.data);
            if (!event.defaultPrevented) {
                if (message.id !== this.internalMessages[this.internalMessages.length - 1]?.id) {
                    message.collapse = !message.collapse;
                    if (message.collapse) {
                        message.showContactData = false;
                    }
                }
                this.internalMessages = [...this.internalMessages];
            }
            debug(`[nylas-view-thread] message clicked ${messageId} ${message.collapse ? 'collapsed' : 'expanded'}`);
        };
        this.onShowAllEmailsClick = () => {
            this.showAllEmails = !this.showAllEmails;
        };
        this.showComposerClick = () => {
            this.showComposer = !this.showComposer;
        };
        this.draft = undefined;
        this.thread = undefined;
        this.messages = [];
        this.attachments = [];
        this.state = 'loading';
        this.internalMessages = [];
        this.showAllEmails = false;
        this.showComposer = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-view-thread] Component will load`);
        this.updateInternalMessages(this.messages);
        const template = this.host.querySelector('template.nylas-view-email');
        if (!template) {
            debug(`[nylas-view-thread] Could not find template`);
            return;
        }
        const viewEmailTemplateClone = document.importNode(template.content, true);
        this.nylasViewEmailElement = viewEmailTemplateClone.querySelector('nylas-view-email');
        const composerTemplate = this.host.querySelector('template.nylas-composer');
        if (!composerTemplate) {
            debug(`[nylas-view-thread] Could not find composer template`);
            return;
        }
        const composerTemplateClone = document.importNode(composerTemplate.content, true);
        this.nylasComposerElement = composerTemplateClone.querySelector('nylas-composer');
    }
    async componentDidLoad() {
        debug(`[nylas-view-thread] Component did load`);
    }
    async threadChanged(thread) {
        debug(`[nylas-view-thread] Thread changed`, { thread: thread });
        this.internalMessages = [];
        const event = this.threadSelected.emit(thread);
        if (!event.defaultPrevented) {
            debug(`[nylas-view-thread] Default event not prevented, initializing`);
        }
    }
    updateInternalMessages(messages) {
        debug(`[nylas-view-thread] Updating internal messages`, { messages });
        const internalMessages = messages
            .sort((a, b) => {
            return a.date > b.date ? 1 : -1;
        })
            .map((message, index) => ({
            id: message.id,
            data: message,
            collapse: index === messages.length - 1 ? false : true,
            showContactData: false,
        }));
        this.internalMessages = internalMessages;
    }
    render() {
        const fistMessage = this.internalMessages.length > 2 ? this.internalMessages[0] : null;
        const lastTwoMessages = this.internalMessages.slice(this.internalMessages.length - 2, this.internalMessages.length);
        const remainingMessages = this.internalMessages.slice(1, this.internalMessages.length - 2);
        const lastMessage = this.internalMessages[this.internalMessages.length - 1];
        return (h(Host, { key: '08d6981bb00f24f18212060a784da5ec7129197e' }, h("sp-theme", { key: '0f7f54486f61beb490fc96a0f84753868ef384aa', scale: "medium", color: "dark" }, h("div", { key: '9aad086eae2344a6d0d28b1fb4fb39921dcf53f0', class: "view-thread" }, h("div", { key: 'fcef6cd0bfed78b7d6f9df5a2a8719a32b1e294f', class: "header" }, h("div", { key: '0673aebc8626e082deb3f0a9b9eb9c18a1841349', class: 'subject' }, this.thread?.subject), h("div", { key: '10ee64da01595dcb658f99b9a8d90c1fe9237816', class: 'folders' }, this.thread?.folders?.map(folder => h("sp-tag", { size: "s" }, toTitleCase(folder.replace('CATEGORY_', '').replace('_', ' ')))))), h("div", { key: '469007a98202e151206e4ac329956882f069b618', class: "messages" }, fistMessage && (h(ViewThreadMessage, { message: fistMessage, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement })), remainingMessages.length > 0 && this.messages.length > 1 && !this.showAllEmails && lastTwoMessages.length > 0 && (h(Fragment, null, h("div", { class: 'show-more' }, h("button", { type: "button", onClick: this.onShowAllEmailsClick }, h("span", { class: 'avatar' }, remainingMessages.length), " ", h("span", { class: 'sr-only' }, "Show ", remainingMessages.length, " more emails"))), h("hr", null))), remainingMessages.length > 0 &&
            this.showAllEmails &&
            this.messages.length > 2 &&
            remainingMessages.map(email => (h(ViewThreadMessage, { message: email, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage?.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement }))), lastTwoMessages.length > 0 &&
            lastTwoMessages.map(email => (h(ViewThreadMessage, { message: email, attachments: this.attachments.filter(attachment => attachment.messageId === fistMessage?.id), onMessageClick: this.onMessageClick, onShowContactDataClick: this.onShowContactDataClick, parent: this.host, viewEmailElement: this.nylasViewEmailElement, composerElement: this.nylasComposerElement })))), !(this.showComposer && lastMessage) && (h("div", { class: "reply-buttons" }, h("sp-button", { variant: "cta", type: "button", onClick: this.showComposerClick }, h("span", { slot: "icon" }, h("reply-icon", null)), h("span", null, "Reply")), h("sp-button", { variant: "cta", type: "button" }, h("span", { slot: "icon" }, h("reply-all-icon", null)), h("span", null, "Reply All")), h("sp-button", { variant: "cta", type: "button" }, h("span", { slot: "icon" }, h("forward-icon", null)), h("span", null, "Forward")))), this.showComposer && lastMessage && (h("div", { class: "composer" }, h("nylas-composer", { message: lastMessage.data, onClose: this.showComposerClick, onSend: e => {
                debug(`[nylas-view-thread] Send event`, { message: e.detail.message, replyBody: e.detail.replyBody });
            } })))))));
    }
    get host() { return this; }
    static get watchers() { return {
        "thread": ["threadChanged"],
        "messages": ["updateInternalMessages"]
    }; }
    static get style() { return nylasViewThreadCss; }
}, [1, "nylas-view-thread", {
        "draft": [16],
        "thread": [16],
        "messages": [16],
        "attachments": [16],
        "state": [32],
        "internalMessages": [32],
        "showAllEmails": [32],
        "showComposer": [32]
    }, undefined, {
        "thread": ["threadChanged"],
        "messages": ["updateInternalMessages"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-view-thread',
        stateToProps: new Map([
            ['mailbox.selectedThread', 'thread'],
            ['mailbox.messages', 'messages'],
            ['mailbox.state', 'state'],
        ]),
        eventToProps: {
            threadSelected: async (event, nylasConnector) => {
                debug(`[nylas-view-thread] Nylas init event. Fetching thread messages.`, { event });
                const thread = event.detail;
                if (thread && thread.id) {
                    await nylasConnector.messages.getThreadMessages(thread.id);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasViewThread$1.prototype, "render", null);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-view-thread", "bold-icon", "chevron-icon", "forward-icon", "italic-icon", "loading-icon", "nylas-composer", "nylas-summarize-message-button", "nylas-view-email", "play-icon", "reply-all-icon", "reply-icon", "stop-icon", "underline-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-view-thread":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasViewThread$1);
            }
            break;
        case "bold-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "forward-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "italic-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "loading-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "nylas-composer":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "nylas-summarize-message-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "nylas-view-email":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "play-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "reply-all-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "reply-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "stop-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "underline-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const NylasViewThread = NylasViewThread$1;
const defineCustomElement = defineCustomElement$1;

export { NylasViewThread, defineCustomElement };

//# sourceMappingURL=nylas-view-thread.js.map