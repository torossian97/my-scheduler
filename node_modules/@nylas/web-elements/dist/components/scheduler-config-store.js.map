{"file":"scheduler-config-store.js","mappings":";;SA8CgB,+BAA+B,CAAC,eAAwD,EAAE;IACxG,MAAM,2BAA2B,GAAmC;QAClE,qBAAqB,EAAE,EAAE;QACzB,cAAc,EAAE,EAAE;QAClB,SAAS,EAAE,EAAE;QACb,WAAW,EAAE,IAAI;QACjB,MAAM,EAAE,IAAI;QACZ,GAAG,YAAY;KAChB,CAAC;IACF,MAAM,KAAK,GAAG,WAAW,CAAiC,2BAA2B,CAAC,CAAC;IAMvF,SAAS,0BAA0B;QACjC,KAAK,CAAC,GAAG,CAAC,uBAAuB,EAAE,EAAE,GAAG,YAAY,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;KAClF;IAED,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAM,MAAM;QACnC,IAAI,CAAC,MAAM,EAAE;YACX,0BAA0B,EAAE,CAAC;SAC9B;KACF,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,KAAK;QACR,0BAA0B;KAC3B,CAAC;AACJ;;;;","names":[],"sources":["src/stores/scheduler-config-store.ts"],"sourcesContent":["import { Calendar, Configuration } from '@nylas/core';\nimport { ObservableMap, createStore } from '@stencil/store';\nimport { User } from '@/common/nylas-api-request';\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object | undefined ? RecursivePartial<T[P]> : T[P];\n};\n\nexport interface NylasSchedulerConfigStoreState {\n  /**\n   * The selected configuration.\n   * This is the configuration that is currently selected, use it to populate default values for new configurations.\n   */\n  selectedConfiguration: RecursivePartial<Configuration>;\n  /**\n   * The list of configurations.\n   * This is the list of configurations that the user has created.\n   */\n  configurations: Configuration[];\n  /**\n   * The list of calendars.\n   * This is the list of calendars that the user has access to.\n   */\n  calendars: Calendar[];\n  /**\n   * The current user.\n   * This is the user that is currently logged in.\n   */\n  currentUser: User | null;\n  /**\n   * The current action.\n   * This is the current action that the user is performing.\n   */\n  action: 'create' | 'edit' | null;\n}\n\nexport type NylasSchedulerConfigStoreType = ReturnType<typeof CreateNylasSchedulerConfigStore>;\n\nexport type CreateNylasSchedulerConfigStoreReturnType = ObservableMap<NylasSchedulerConfigStoreState> & {\n  /**\n   * Reset the selected configuration to the default state.\n   * This is used to reset the selected configuration to the default state instead of setting it to an empty object.\n   */\n  resetSelectedConfiguration: () => void;\n};\n\nexport function CreateNylasSchedulerConfigStore(defaultState: Partial<NylasSchedulerConfigStoreState> = {}): CreateNylasSchedulerConfigStoreReturnType {\n  const defaultSchedulerConfigState: NylasSchedulerConfigStoreState = {\n    selectedConfiguration: {},\n    configurations: [],\n    calendars: [],\n    currentUser: null,\n    action: null,\n    ...defaultState,\n  };\n  const store = createStore<NylasSchedulerConfigStoreState>(defaultSchedulerConfigState);\n\n  /**\n   * Reset the selected configuration to the default state.\n   * This is used to reset the selected configuration to the default state instead of setting it to an empty object.\n   */\n  function resetSelectedConfiguration() {\n    store.set('selectedConfiguration', { ...defaultState['selectedConfiguration'] });\n  }\n\n  store.onChange('action', async action => {\n    if (!action) {\n      resetSelectedConfiguration();\n    }\n  });\n\n  return {\n    ...store,\n    resetSelectedConfiguration,\n  };\n}\n"],"version":3}