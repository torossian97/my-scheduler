{"version":3,"names":["nylasListThreadsCss","NylasListThreadsStyle0","NylasListThreads","this","handleThreadSelected","async","thread","debug","event","threadSelected","emit","defaultPrevented","handleCheckboxClick","stopPropagation","connectedCallback","disconnectedCallback","componentWillLoad","componentDidLoad","isAuthenticated","render","h","Host","key","class","part","state","Array","fill","map","_","i","style","animationDelay","threads","id","unread","showCheckbox","subject","onClick","size","value","formatParticipants","participants","tokenInfo","email","message_ids","length","snippet","trim","latest_message_received_date","Intl","DateTimeFormat","undefined","dateStyle","format","Date","formatDateTime","__decorate","RegisterComponent","name","stateToProps","Map","eventToProps","nylasConnector","selectThread","detail","fireRegisterEvent"],"sources":["src/components/mailbox/nylas-list-threads/nylas-list-threads.scss?tag=nylas-list-threads&encapsulation=shadow","src/components/mailbox/nylas-list-threads/nylas-list-threads.tsx"],"sourcesContent":[":host {\n  display: block;\n  font-size: var(--nylas-font-size, inherit);\n  font-family: var(--nylas-font-family, inherit);\n}\n\n.list-thread {\n  display: grid;\n  grid-auto-flow: row;\n  color: var(--nylas-color-primary-800);\n  width: 100%;\n}\n\n.thread {\n  position: relative;\n  width: 100%;\n  display: grid;\n  padding: 0.5rem 1rem;\n  column-gap: 0.25rem;\n  grid-template-areas:\n    '........ from    count   ....... date actions'\n    'checkbox subject subject subject subject actions'\n    '........ snippet snippet snippet snippet actions';\n  grid-template-columns: auto auto auto auto auto auto;\n  margin-bottom: 0.75rem;\n  border-radius: var(--nylas-border-radius-2x);\n  color: var(--nylas-color-primary-00);\n  background-color: var(--nylas-color-primary-50);\n  border: 0;\n  box-sizing: border-box;\n  text-align: left;\n  cursor: pointer;\n  box-shadow: 1px 1px 3px 0px rgb(0 0 0 / 30%);\n\n  font-size: inherit;\n  font-family: inherit;\n\n  &.loading {\n    animation: pulsate 1.5s infinite ease-in-out;\n    width: 100%;\n    height: 90px;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &.selected {\n    box-shadow: 0 2px 0 0 var(--nylas-color-primary-200);\n    background-color: var(--nylas-color-primary-100);\n  }\n\n  &:hover {\n    box-shadow: 0 2px 0 0 var(--nylas-color-primary-200);\n    background-color: var(--nylas-color-primary-100);\n  }\n\n  > div {\n    align-self: center;\n    pointer-events: all !important;\n  }\n\n  .actions {\n    grid-area: actions;\n  }\n\n  .actions sp-action-menu {\n    pointer-events: initial !important;\n  }\n\n  .actions sp-action-button {\n    pointer-events: initial !important;\n  }\n\n  .actions sp-menu-item {\n    pointer-events: initial !important;\n  }\n\n  .checkbox {\n    grid-area: checkbox;\n    margin-right: 0.5rem;\n    pointer-events: initial !important;\n    sp-checkbox {\n      pointer-events: initial !important;\n    }\n  }\n\n  .star {\n    grid-area: star;\n    justify-self: end;\n  }\n\n  .from {\n    grid-area: from;\n    color: var(--nylas-color-primary-600);\n  }\n\n  .count {\n    grid-area: count;\n    color: var(--nylas-color-primary-600);\n  }\n\n  .subject {\n    grid-area: subject;\n    color: var(--nylas-color-primary-600);\n  }\n\n  .snippet {\n    grid-area: snippet;\n    color: var(--nylas-color-primary-500);\n  }\n\n  .date {\n    grid-area: date;\n    align-self: center;\n    color: var(--nylas-color-primary-500);\n  }\n\n  &.unread {\n    .from,\n    .count,\n    .subject,\n    .date {\n      font-weight: 600;\n      color: var(--nylas-color-primary-800);\n    }\n\n    .snippet {\n      color: var(--nylas-color-primary-700);\n    }\n  }\n\n  .from {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .snippet {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .subject {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {\n}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {\n}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {\n  .thread {\n    column-gap: 1rem;\n    grid-template-areas: 'checkbox from count subject snippet date actions';\n    grid-template-columns: auto minmax(auto, 200px) auto auto 1fr auto auto;\n    margin-bottom: 0.5rem;\n    border: 1px solid var(--nylas-color-primary-100);\n\n    &.no-checkbox {\n      grid-template-areas: 'from count subject snippet date actions';\n      grid-template-columns: minmax(auto, 200px) auto auto 1fr auto auto;\n    }\n\n    .checkbox {\n      margin-right: 0;\n    }\n  }\n}\n\n@keyframes pulsate {\n  0% {\n    background-color: var(--nylas-color-primary-50);\n  }\n  50% {\n    background-color: var(--nylas-color-primary-100);\n  }\n  100% {\n    background-color: var(--nylas-color-primary-50);\n  }\n}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {\n}\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 1200px) {\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { DataState } from '@/common/types';\nimport { debug, formatDateTime, formatParticipants } from '@/utils/utils';\nimport { Thread } from '@nylas/core';\nimport { TokenInfo } from '@nylas/core/dist/auth';\nimport { Component, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../..';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\n\n@Component({\n  tag: 'nylas-list-threads',\n  styleUrl: 'nylas-list-threads.scss',\n  shadow: true,\n})\nexport class NylasListThreads {\n  @Prop() readonly threads: Thread[] = [];\n  @Prop() readonly isAuthenticated: boolean = false;\n  @Prop() readonly tokenInfo?: TokenInfo;\n  @Prop() readonly state: DataState = 'ready';\n  @Prop() readonly showCheckbox: boolean = false;\n  @Event({ cancelable: true }) readonly threadSelected!: EventEmitter<Thread>;\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-list-threads] Component will load`);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-list-threads] Component did load`, { isAuthenticated: this.isAuthenticated });\n  }\n\n  /**\n   * Handle thread selected\n   * @param thread The thread that was selected\n   * @returns void\n   * @emits threadSelected\n   */\n  private handleThreadSelected = async (thread: Thread) => {\n    debug(`[nylas-list-threads] Thread selected`, { thread });\n    const event = this.threadSelected.emit(thread);\n    if (!event.defaultPrevented) {\n      debug(`[nylas-list-threads] Default event not prevented, selecting thread`);\n    }\n  };\n\n  /**\n   * Handle checkbox click\n   * @param event The click event\n   * @returns void\n   */\n  private handleCheckboxClick = async (event: Event) => {\n    debug(`[nylas-list-threads] Checkbox clicked`, { event });\n    event.stopPropagation();\n  };\n\n  @RegisterComponent<NylasListThreads, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-list-threads',\n    stateToProps: new Map([\n      ['auth.isAuthenticated', 'isAuthenticated'],\n      ['auth.tokenInfo', 'tokenInfo'],\n      ['mailbox.threads', 'threads'],\n      ['mailbox.state', 'state'],\n    ]),\n    eventToProps: {\n      threadSelected: async (event: CustomEvent<Thread>, nylasConnector: NylasMailboxConnector) => {\n        debug(`[nylas-list-threads] Thread selected`, { event });\n        await nylasConnector.threads.selectThread(event.detail);\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class={'list-thread'} part=\"list-thread\">\n          {this.state === 'loading' && new Array(10).fill(0).map((_, i) => <div class=\"thread loading\" style={{ animationDelay: `${i * 20}ms` }} />)}\n          {this.state === 'ready' &&\n            this.threads.map(thread => (\n              <button\n                key={thread?.id}\n                class={{\n                  'thread': true,\n                  'unread': thread?.unread === true,\n                  'no-checkbox': this.showCheckbox === false,\n                }}\n                part=\"thread\"\n                aria-label={`Thread with subject ${thread?.subject}`}\n                onClick={() => this.handleThreadSelected(thread)}\n              >\n                {this.showCheckbox && (\n                  <div class=\"checkbox\" part=\"checkbox\">\n                    <sp-checkbox size=\"s\" value={thread?.id} onClick={this.handleCheckboxClick} />\n                  </div>\n                )}\n                <div class=\"from\" part=\"from\">\n                  {formatParticipants(thread.participants ?? [], this.tokenInfo?.email, thread?.message_ids?.length || 1, 1)}\n                </div>\n                <div class=\"subject\" part=\"subject\">\n                  {thread?.subject}\n                </div>\n                <div class=\"count\" part=\"count\">\n                  {thread?.message_ids?.length || 1}\n                </div>\n                <div class=\"snippet\" part=\"snippet\">\n                  {thread?.snippet?.trim()}\n                </div>\n                {thread.latest_message_received_date && (\n                  <div\n                    class=\"date\"\n                    aria-label={`${Intl.DateTimeFormat(undefined, { dateStyle: 'full' }).format(new Date(thread.latest_message_received_date * 1000))}`}\n                    part=\"date\"\n                  >\n                    {formatDateTime(thread.latest_message_received_date)}\n                  </div>\n                )}\n              </button>\n            ))}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"uKAAA,MAAMA,EAAsB,kgGAC5B,MAAAC,EAAeD,E,ugBCaFE,EAAgB,M,wEA0BnBC,KAAAC,qBAAuBC,MAAOC,IACpCC,EAAM,uCAAwC,CAAED,WAChD,MAAME,EAAQL,KAAKM,eAAeC,KAAKJ,GACvC,IAAKE,EAAMG,iBAAkB,CAC3BJ,EAAM,qE,GASFJ,KAAAS,oBAAsBP,MAAOG,IACnCD,EAAM,wCAAyC,CAAEC,UACjDA,EAAMK,iBAAiB,E,aAxCY,G,qBACO,M,oCAER,Q,kBACK,K,CAGzC,iBAAAC,GAAiB,CAEjB,oBAAAC,GAAoB,CAEpB,uBAAMC,GACJT,EAAM,2C,CAGR,sBAAMU,GACJV,EAAM,0CAA2C,CAAEW,gBAAiBf,KAAKe,iB,CA2C3E,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CAAKC,MAAO,cAAeC,KAAK,eAC7BrB,KAAKsB,QAAU,WAAa,IAAIC,MAAM,IAAIC,KAAK,GAAGC,KAAI,CAACC,EAAGC,IAAMV,EAAA,OAAKG,MAAM,iBAAiBQ,MAAO,CAAEC,eAAgB,GAAGF,EAAI,YAC5H3B,KAAKsB,QAAU,SACdtB,KAAK8B,QAAQL,KAAItB,GACfc,EAAA,UACEE,IAAKhB,GAAQ4B,GACbX,MAAO,CACLjB,OAAU,KACV6B,OAAU7B,GAAQ6B,SAAW,KAC7B,cAAehC,KAAKiC,eAAiB,OAEvCZ,KAAK,SAAQ,aACD,uBAAuBlB,GAAQ+B,UAC3CC,QAAS,IAAMnC,KAAKC,qBAAqBE,IAExCH,KAAKiC,cACJhB,EAAA,OAAKG,MAAM,WAAWC,KAAK,YACzBJ,EAAA,eAAamB,KAAK,IAAIC,MAAOlC,GAAQ4B,GAAII,QAASnC,KAAKS,uBAG3DQ,EAAA,OAAKG,MAAM,OAAOC,KAAK,QACpBiB,EAAmBnC,EAAOoC,cAAgB,GAAIvC,KAAKwC,WAAWC,MAAOtC,GAAQuC,aAAaC,QAAU,EAAG,IAE1G1B,EAAA,OAAKG,MAAM,UAAUC,KAAK,WACvBlB,GAAQ+B,SAEXjB,EAAA,OAAKG,MAAM,QAAQC,KAAK,SACrBlB,GAAQuC,aAAaC,QAAU,GAElC1B,EAAA,OAAKG,MAAM,UAAUC,KAAK,WACvBlB,GAAQyC,SAASC,QAEnB1C,EAAO2C,8BACN7B,EAAA,OACEG,MAAM,OAAM,aACA,GAAG2B,KAAKC,eAAeC,UAAW,CAAEC,UAAW,SAAUC,OAAO,IAAIC,KAAKjD,EAAO2C,6BAA+B,QAC3HzB,KAAK,QAEJgC,EAAelD,EAAO2C,mC,GAzCzCQ,EAAA,CAhBCC,EAAuG,CACtGC,KAAM,qBACNC,aAAc,IAAIC,IAAI,CACpB,CAAC,uBAAwB,mBACzB,CAAC,iBAAkB,aACnB,CAAC,kBAAmB,WACpB,CAAC,gBAAiB,WAEpBC,aAAc,CACZrD,eAAgBJ,MAAOG,EAA4BuD,KACjDxD,EAAM,uCAAwC,CAAEC,gBAC1CuD,EAAe9B,QAAQ+B,aAAaxD,EAAMyD,OAAO,GAG3DC,kBAAmB,O"}