{"version":3,"names":["NylasSchedulerConnector","constructor","schedulerAPIURL","nylasSchedulerStore","sessionId","configId","Error","url","URL","window","location","href","origin","this","init","debug","schedulerStore","scheduler","_schedulerAPIConnector","NylaSchedulerAPIConnector","resetStores","reset","SchedulerView","props","children","isLoading","showNotification","nylasBranding","h","Fragment","class","MessageBanner","_props","nylasSchedulingCss","NylasSchedulingStyle0","genericError","title","type","NotificationType","category","ErrorCategory","Component","NylasScheduling","Date","toLocaleDateString","undefined","dateStyle","connectedCallback","componentWillLoad","schedulerWillLoadEvent","schedulerWillLoad","emit","host","defaultPrevented","checkIfSessionIdOrConfigIdExists","stores","CreateNylasSchedulerStore","bookingInfo","defaultSchedulerState","baseProvider","NylasBaseProvider","automaticComponentRegistration","eventOverrides","getStore","nylasSchedulerConnector","schedulerApiUrl","configurationId","themeConfig","key","value","Object","entries","style","setProperty","componentDidLoad","settings","getUISettings","nylasSchedulerError","getErrorObject","error","availableDaysInFuture","get","available_days_in_future","selectedTimeslot","start_time","isTimeslotValid","set","selectedDate","availability","result","length","today","startTime","endTime","endTimeForAvailableDaysInFuture","validateAvailableDaysInFuture","getTime","getAvailability","_selectedDate","firstAvailableDate","find","timeslot","componentDisconnected","bookingInfoChanged","newVal","registerComponentHandler","event","registerComponent","detail","unregisterComponentHandler","unregisterComponent","monthChangedHandler","date","bookButtonClickedHandler","rescheduleBookingId","rescheduleBooking","bookTimeslot","dateSelectedHandler","selectedDateLabel","cancelBookedEventErrorHandler","cancelBookedEventValidationErrorHandler","rescheduleBookedEventErrorHandler","getNylasSchedulerStore","getNylasSchedulerConnector","getRef","description","message","id","toString","ttl","startDate","getFullYear","getMonth","endTimeForCurrentMonth","Math","floor","addDaysToCurrentDate","min","render","showDefaultScheduler","mode","eventInfo","showBookingForm","cancelledEventInfo","cancelBookingId","Host","part","exportparts","timeslotPickerCTALabel","querySelector","slot","name","customTemplateSlot"],"sources":["src/connector/nylas-scheduler-connector/index.ts","src/components/scheduler/nylas-scheduler/scheduler-view.tsx","src/components/scheduler/nylas-scheduler/message-banner.tsx","src/components/scheduler/nylas-scheduler/nylas-scheduling.scss?tag=nylas-scheduling&encapsulation=shadow","src/components/scheduler/nylas-scheduler/nylas-scheduling.tsx"],"sourcesContent":["import { NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { debug } from '@/utils/utils';\nimport { NylasSchedulerConnectorInterface } from '../connector-interface';\nimport { NylaSchedulerAPIConnector } from '../shared/api/scheduler';\n\ntype NylasSchedulerConnectorOptions = {\n  schedulerAPIURL: string;\n  nylasSchedulerStore: NylasSchedulerStoreType;\n  sessionId?: string;\n  configId?: string;\n};\n/**\n * Base class for the Nylas connector.\n */\nexport class NylasSchedulerConnector implements NylasSchedulerConnectorInterface {\n  public schedulerAPIURL: string;\n  public nylasSchedulerStore: NylasSchedulerStoreType;\n  public sessionId: string | undefined;\n  public configId: string | undefined;\n\n  private _schedulerAPIConnector: NylaSchedulerAPIConnector | undefined;\n\n  constructor({ schedulerAPIURL, nylasSchedulerStore, sessionId, configId }: NylasSchedulerConnectorOptions) {\n    if (!schedulerAPIURL) {\n      throw new Error('schedulerAPIURL is required');\n    }\n\n    if (!nylasSchedulerStore) {\n      throw new Error('nylasSchedulerStore is required');\n    }\n\n    if (!sessionId && !configId) {\n      throw new Error('sessionId is required for private configs, if not config id is required for public configs');\n    }\n\n    // If the url is only /, then we need to add the base url.\n    // We assume that the base url is the same as the current url.\n    if (schedulerAPIURL === '/') {\n      const url = new URL(window.location.href);\n      schedulerAPIURL = url.origin;\n    }\n\n    this.configId = configId;\n    this.sessionId = sessionId;\n    this.schedulerAPIURL = schedulerAPIURL;\n    this.nylasSchedulerStore = nylasSchedulerStore;\n  }\n\n  public init() {\n    debug('NylasConnector init');\n  }\n\n  public get schedulerStore() {\n    return this.nylasSchedulerStore;\n  }\n\n  public get scheduler() {\n    if (this._schedulerAPIConnector) {\n      return this._schedulerAPIConnector;\n    }\n    this._schedulerAPIConnector = new NylaSchedulerAPIConnector({\n      schedulerAPIURL: this.schedulerAPIURL,\n      schedulerStore: this.schedulerStore,\n      sessionId: this.sessionId,\n      configId: this.configId,\n    });\n    return this._schedulerAPIConnector;\n  }\n\n  public resetStores() {\n    this.nylasSchedulerStore.reset();\n  }\n}\nexport type PublicMethods<T> = {\n  [K in keyof T]: T[K] extends Function ? (string extends K ? never : K) : never;\n}[keyof T];\n\nexport type NylasSchedulerConnectorPublicMethods = PublicMethods<NylasSchedulerConnector>;\n","import { Fragment, FunctionalComponent, h } from '@stencil/core';\n\nexport type SchedulerViewProps = {\n  isLoading?: boolean;\n  showNotification?: boolean;\n  nylasBranding?: boolean;\n};\n\n/**\n * The Scheduler view component.\n */\nexport const SchedulerView: FunctionalComponent<SchedulerViewProps> = (props: SchedulerViewProps, children) => {\n  const isLoading = props.isLoading;\n  const showNotification = props.showNotification;\n  const nylasBranding = props.nylasBranding;\n\n  return (\n    <Fragment>\n      {showNotification && <nylas-notification></nylas-notification>}\n\n      {isLoading && (\n        <div class={'loading'}>\n          <div class={'left'}>\n            <div class={'skeleton'} />\n          </div>\n          <div class={'right'}>\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n          </div>\n        </div>\n      )}\n      {!isLoading && children}\n      <div class={'footer'}>\n        {nylasBranding && (\n          <Fragment>\n            Powered by&nbsp;\n            <nylas-logo />\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { FunctionalComponent, h } from '@stencil/core';\n\nexport type HeaderBannerProps = {};\n\nexport const MessageBanner: FunctionalComponent<HeaderBannerProps> = (_props: HeaderBannerProps, children) => <div class=\"message-banner\">{children}</div>;\n","@import '../../../common/styles/variables.scss';\n\n:host {\n  display: flex;\n  flex-direction: column;\n  overflow: visible;\n  border-radius: var(--nylas-border-radius-2x);\n  width: fit-content;\n  @media #{$mobile} {\n    width: auto;\n    min-width: 325px;\n  }\n  background: var(--nylas-base-0);\n  position: relative;\n  box-shadow:\n    0px 4px 6px -2px rgba(0, 0, 0, 0.05),\n    0px 10px 15px -3px rgba(0, 0, 0, 0.1);\n  @include default-css-variables;\n  font-family: var(--nylas-font-family);\n  font-optical-sizing: auto;\n  font-style: normal;\n  font-variation-settings: 'slnt' 0;\n}\n\n:root {\n  font-family: inherit;\n}\n\n.error {\n  padding: 8rem 12rem;\n  color: var(--nylas-base-0);\n  background-color: var(--nylas-error);\n  margin: 1.5rem;\n  border-radius: var(--nylas-border-radius-2x);\n}\n\n.message-banner {\n  text-align: right;\n  color: var(--nylas-base-800);\n  padding: 1rem;\n  border-bottom: 1px solid var(--nylas-color-primary-200);\n  margin-top: 1rem;\n}\n\n.loading {\n  margin: 1.5rem;\n  display: flex;\n  gap: 1rem;\n\n  .skeleton {\n    border-radius: var(--nylas-border-radius-2x);\n    animation: pulsate 1.5s infinite;\n    &:nth-child(2) {\n      animation-delay: -100ms;\n    }\n    &:nth-child(3) {\n      animation-delay: -200ms;\n    }\n    &:nth-child(4) {\n      animation-delay: -300ms;\n    }\n    &:nth-child(5) {\n      animation-delay: -400ms;\n    }\n  }\n\n  .left .skeleton {\n    height: 100%;\n    width: 400px;\n  }\n  .right .skeleton {\n    height: 5rem;\n    width: 300px;\n    margin-bottom: 1rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n@keyframes pulsate {\n  0% {\n    background-color: var(--nylas-base-50);\n  }\n  50% {\n    background-color: var(--nylas-base-100);\n  }\n  100% {\n    background-color: var(--nylas-base-50);\n  }\n}\n\n.select-date-page,\n.additional-data-page,\n.booked-event-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  border-top-left-radius: var(--nylas-border-radius-2x);\n  border-top-right-radius: var(--nylas-border-radius-2x);\n}\n\n.select-date-page,\n.additional-data-page {\n  display: flex;\n\n  @media #{$mobile} {\n    flex-direction: column;\n  }\n}\n\n.booked-event-page {\n  background-color: var(--nylas-base-50);\n}\n\n.cancelled-event-page,\n.cancel-flow-page {\n  padding: 1rem;\n  height: 496px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.booked-event-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  min-width: 784px;\n  @media #{$mobile} {\n    min-width: 90%;\n  }\n  background: var(--nylas-base-50);\n}\n\n.left-panel {\n  padding: 1rem 20px 0;\n  gap: 1rem;\n  height: 512px;\n  min-width: 384px;\n  border-top-left-radius: inherit;\n  background: var(--nylas-base-0);\n  @media #{$mobile} {\n    border-top-right-radius: inherit;\n    min-width: unset;\n    height: auto;\n  }\n}\n\n.select-date-page .left-panel {\n  @media #{$mobile} {\n    padding: 0.5rem 4px 0;\n  }\n}\n\n.border {\n  margin-left: -20px; // Offset left padding\n  margin-right: -20px; // Offset right padding\n  border-top-width: 1px;\n  height: 1px;\n  background-color: var(--nylas-base-200);\n  @media #{$mobile} {\n    display: none;\n  }\n}\n\n.right-panel {\n  min-width: 360px;\n  width: 360px;\n  background-color: var(--nylas-base-50);\n  height: 512px;\n  padding-top: 16px;\n  border-left: 1px solid var(--nylas-base-200);\n  border-top-right-radius: inherit;\n  @media #{$mobile} {\n    border-top-right-radius: 0px;\n    width: inherit;\n    min-width: unset;\n    height: auto;\n  }\n  h2 {\n    display: flex;\n    margin: 0;\n    height: 48px;\n    gap: 0.5rem;\n    justify-content: center;\n    align-items: center;\n    width: auto;\n    font-size: 1.125rem;\n    line-height: 1.5rem;\n    font-weight: 500;\n    text-align: center;\n    color: var(--nylas-base-800);\n  }\n}\n\n.additional-data-page {\n  .left-panel {\n    background-color: var(--nylas-base-50);\n  }\n  .right-panel {\n    background-color: var(--nylas-base-0);\n  }\n}\n\nnylas-selected-event-card {\n  height: 496px;\n\n  @media #{$mobile} {\n    height: 250px;\n  }\n}\n\n.footer {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px;\n  font-size: 14px;\n  font-weight: 300;\n  color: var(--nylas-base-500);\n  border-top: 1px solid var(--nylas-base-200);\n  min-height: 24px;\n  svg {\n    fill: var(--nylas-base-500);\n  }\n}\n\n.footer svg {\n  margin-top: 1px;\n}\n\nnylas-selected-event-card::part(nsec__timezone) {\n  position: absolute;\n  bottom: 0;\n}\n","import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport type { SchedulerEventOverride } from '@/common/component-types';\nimport { NylasSchedulerConnector } from '@/connector/nylas-scheduler-connector';\nimport { CreateNylasSchedulerStore, NylasSchedulerStoreState, NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { NylasSchedulerBookingData, ThemeConfig, Notification, NotificationType, NylasSchedulerErrorResponse, Timeslot } from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { addDaysToCurrentDate, debug } from '@/utils/utils';\nimport { SchedulerView } from './scheduler-view';\nimport { ErrorCategory } from '@/connector/nylas-scheduler-connector/errors';\nimport { MessageBanner } from './message-banner';\n\nconst genericError = { title: 'Something went wrong...', type: NotificationType.Error, category: ErrorCategory.Component };\n\n/**\n * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.\n *\n * @slot custom-booking-form - This slot is used to pass a custom booking form to the Nylas Scheduling component.\n * @slot timeslot-picker-cta-label - This slot is used to pass a custom label to the timeslot picker CTA. The default label is \"Next\".\n *\n * @part ndp - [nylas-date-picker] The date picker host.\n * @part ndp__month-header - [nylas-date-picker] The month header.\n * @part ndp__month-button - [nylas-date-picker] The month button.\n * @part ndp__day - [nylas-date-picker] The day.\n * @part ndp__date - [nylas-date-picker] The date.\n * @part ndp__date--selected - [nylas-date-picker] The selected date.\n * @part ndp__date--current-day - [nylas-date-picker] The current day.\n * @part ndp__date--current-month - [nylas-date-picker] The dates in the current month.\n * @part ntp - [nylas-timeslot-picker] The timeslot picker component.\n * @part ntp__timeslot - [nylas-timeslot-picker] The timeslot button.\n * @part ntp__timeslot--selected - [nylas-timeslot-picker] The selected timeslot button.\n * @part ntp__button-primary - [nylas-timeslot-picker] The timeslot picker CTA.\n * @part nsec - [nylas-selected-event-card] The selected event card component.\n * @part nsec__card - [nylas-selected-event-card] The card component.\n * @part nsec__icon - [nylas-selected-event-card] The calendar icon.\n * @part nsec__date - [nylas-selected-event-card] The date selected.\n * @part nsec__time - [nylas-selected-event-card] The timeslot selected.\n * @part nbf - [nylas-booking-form] The booking form host.\n * @part nbf__input-label - [nylas-booking-form] The input label.\n * @part nbf__input-textfield - [nylas-booking-form] The input textfield.\n * @part nbf__button-ghost - [nylas-booking-form] The ghost button for adding guests.\n * @part nbf__button-primary - [nylas-booking-form] The primary button for booking.\n * @part nbf__button-outline - [nylas-booking-form] The outline button for canceling.\n * @part ncec - [nylas-cancelled-event-card] The cancelled event card host.\n * @part ncec__icon - [nylas-cancelled-event-card] The calendar icon.\n * @part ncec__title - [nylas-cancelled-event-card] The title of the cancelled event card.\n * @part ncec__description - [nylas-cancelled-event-card] The description of the cancelled event card.\n * @part ncec__button-outline - [nylas-cancelled-event-card] The close button CTA.\n * @part ncec__card - [nylas-cancelled-event-card] The cancelled event card.\n * @part nbec - [nylas-booked-event-card] The booked event card host.\n * @part nbec__card - [nylas-booked-event-card] The booked event card.\n * @part nbec__title - [nylas-booked-event-card] The title of the booked event card.\n * @part nbec__description - [nylas-booked-event-card] The description of the booked event card.\n * @part nbec__button-outline - [nylas-booked-event-card] The cancel & reschedule button CTA.\n * @part nbec__cancel-cta - [nylas-booked-event-card] The cancel button CTA.\n * @part nbec__reschedule-cta - [nylas-booked-event-card] The reschedule button CTA.\n */\n@Component({\n  tag: 'nylas-scheduling',\n  styleUrl: 'nylas-scheduling.scss',\n  shadow: true,\n})\nexport class NylasScheduling {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: { scheduler: NylasSchedulerStoreType };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Scheduler Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasSchedulerConnector?: NylasSchedulerConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasSchedulingElement;\n\n  /**\n   * This is used to set the mode for the Nylas Scheduler.\n   * The mode can be either `app` or `composable`. The default mode is `app`.\n   * - `app`: This mode is used to show the default Nylas Scheduler UI.\n   * - `composable`: This mode is used to show the composable Nylas Scheduler UI\n   *    by passing the individual scheduler components as children.\n   */\n  @Prop() readonly mode: 'app' | 'composable' = 'app';\n\n  /**\n   * The default scheduler store state.\n   * Used to set the initial state of the scheduler store.\n   */\n  @Prop({ attribute: 'default-scheduler-store-state' }) readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;\n\n  /**\n   * The session ID for the Nylas Scheduler.\n   * This is used to authenticate the user.\n   */\n  @Prop() readonly sessionId?: string;\n\n  /**\n   * The URL for the Nylas Scheduler API. (staging or production URL)\n   */\n  @Prop() readonly schedulerApiUrl: string = 'https://api.us.nylas.com';\n\n  /**\n   * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation.\n   * When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately\n   * invokes the handler after booking.\n   */\n  @Prop() readonly bookingInfo?: NylasSchedulerBookingData;\n\n  /**\n   * Booking Id required for rescheduling flow.\n   */\n  @Prop() readonly rescheduleBookingId?: string;\n\n  /**\n   * Booking Id required for cancelling flow.\n   */\n  @Prop() readonly cancelBookingId?: string;\n\n  /**\n   * The config ID for the Nylas Scheduler. This should be passed in when using a public config,\n   * in which case the sessionId is not required.\n   */\n  @Prop() readonly configurationId?: string;\n\n  /**\n   * This prop lets you hide the Nylas branding.\n   * Default is true.\n   */\n  @Prop() readonly nylasBranding?: boolean = true;\n\n  /**\n   * This provides an easy way to override the default function of the event emitter.\n   * An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will\n   * show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like:\n   * ```html\n   * <nylas-scheduling eventOverride={{\"timeslotConfirmed\": (event, nylasConnector) => { console.log(\"Timeslot confirmed event fired!\"); } }} />\n   * ```\n   */\n  @Prop({ attribute: 'event-overrides' }) readonly eventOverrides: SchedulerEventOverride = {};\n\n  /**\n   * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.\n   */\n  @Prop() readonly isLoading?: boolean;\n\n  /**\n   * Theme config, used to automatically generate a theme with color palette and\n   * CSS variables to customize the look and feel of the Nylas Scheduler.\n   */\n  @Prop() readonly themeConfig?: ThemeConfig;\n\n  /*\n   * Displays notifications for errors by default. When enabled (`true`), errors\n   * automatically appear as notifications. Disabling this feature (`false`) allows\n   * the parent application to capture and manage errors by listening to the\n   * `nylasSchedulerError` event, providing flexibility in error handling.\n   */\n  @Prop() readonly showNotification?: boolean = true;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @State() automaticComponentRegistration: boolean = true;\n\n  /**\n   * The selected date label for the Nylas Scheduler.\n   * This is used to set the initial date label for the Nylas Scheduler.\n   */\n  @State() selectedDateLabel: string = new Date().toLocaleDateString(undefined, { dateStyle: 'full' }) || 'No date selected';\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) init!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentWillLoad lifecycle.\n   */\n  @Event() schedulerWillLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentDidLoad lifecycle.\n   */\n  @Event() schedulerDidLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  @Event({\n    eventName: 'nylasSchedulerError',\n  })\n  nylasSchedulerError!: EventEmitter<Notification>;\n\n  /**\n   * This function is called when the component is connected to the DOM.\n   * At this point in the component lifecycle, the base provider has not yet\n   * been initialized. So avoid using the base provider in this method or stores\n   * in this method.\n   */\n  connectedCallback() {\n    debug(`[nylas-scheduler] connectedCallback`);\n  }\n\n  async componentWillLoad() {\n    debug(`[nylas-scheduler] Component will load`);\n\n    // Emit the schedulerWillLoad event to allow the parent application to set the initial\n    // state of the provider or to prevent the provider from firing some default behavior.\n    const schedulerWillLoadEvent = this.schedulerWillLoad.emit(this.host);\n    if (schedulerWillLoadEvent.defaultPrevented) {\n      return;\n    }\n\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    this.stores = {\n      scheduler: CreateNylasSchedulerStore({\n        bookingInfo: this.bookingInfo,\n        nylasBranding: this.nylasBranding,\n        ...this.defaultSchedulerState,\n      }),\n    };\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    this.nylasSchedulerConnector = new NylasSchedulerConnector({\n      schedulerAPIURL: this.schedulerApiUrl,\n      sessionId: this.sessionId,\n      configId: this.configurationId,\n      nylasSchedulerStore,\n    });\n    this.init.emit(this.host);\n\n    this.baseProvider?.componentWillLoad(this.nylasSchedulerConnector);\n    // Override theme\n    if (this.themeConfig) {\n      for (const [key, value] of Object.entries(this.themeConfig)) {\n        this.host.style.setProperty(`${key}`, value);\n      }\n    }\n  }\n\n  async componentDidLoad() {\n    this.baseProvider?.componentDidLoad();\n\n    // If sessionId is not provided, do not fetch availability\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    const settings = await this.nylasSchedulerConnector?.scheduler.getUISettings();\n    if (!settings || 'error' in settings) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(settings?.error) });\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const availableDaysInFuture = nylasSchedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');\n\n    if (selectedTimeslot && selectedTimeslot?.start_time) {\n      if (!this.isTimeslotValid(selectedTimeslot)) {\n        return;\n      }\n\n      // If the selected timeslot is already set, do not fetch availability\n      if (nylasSchedulerStore?.get('showBookingForm')) {\n        nylasSchedulerStore?.set('selectedDate', selectedTimeslot.start_time);\n        return;\n      }\n    }\n\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const availability = nylasSchedulerStore?.get('availability');\n    let result;\n\n    if (availability && availability.length > 0) {\n      return;\n    }\n\n    if (!selectedDate) {\n      const today = new Date();\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(today, availableDaysInFuture || 30);\n      if (today.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    } else {\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(selectedDate, availableDaysInFuture || 30);\n      if (selectedDate.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    }\n\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n    }\n\n    if (!selectedDate) {\n      let _selectedDate = new Date();\n      const firstAvailableDate = nylasSchedulerStore?.get('availability').find((timeslot: any) => new Date(timeslot.start_time) > new Date());\n      if (firstAvailableDate) {\n        _selectedDate = firstAvailableDate.start_time;\n      }\n      nylasSchedulerStore?.set('selectedDate', _selectedDate);\n    }\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  @Watch('bookingInfo')\n  bookingInfoChanged(newVal?: NylasSchedulerBookingData) {\n    this.stores?.scheduler.set('bookingInfo', newVal);\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to refetch the availability when the month is changed.\n   */\n  @Listen('monthChanged')\n  async monthChangedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    const availableDaysInFuture = this.nylasSchedulerConnector?.schedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(date, availableDaysInFuture || 30);\n\n    if (startTime < endTimeForAvailableDaysInFuture && date.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n      const result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n      }\n    }\n  }\n\n  /**\n   * This is a custom event handler to book an event.\n   */\n  @Listen('detailsConfirmed')\n  async bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingData>) {\n    if (this.rescheduleBookingId) {\n      const result = await this.nylasSchedulerConnector?.scheduler.rescheduleBooking(this.rescheduleBookingId, event.detail);\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n      }\n      return;\n    }\n    const result = await this.nylasSchedulerConnector?.scheduler.bookTimeslot(event.detail);\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ ...this.getErrorObject(result?.error) });\n    }\n  }\n\n  /**\n   * This is a custom event handler to update the selected date label.\n   */\n  @Listen('dateSelected')\n  dateSelectedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    this.selectedDateLabel = date ? date.toLocaleDateString(undefined, { dateStyle: 'full' }) : 'No date selected';\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * cancel booking button is clicked on the cancel booking form.\n   */\n  @Listen('cancelBookedEventError')\n  cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  @Listen('cancelBookedEventValidationError')\n  cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * reschedule button is clicked on the booked event card.\n   */\n  @Listen('rescheduleBookedEventError')\n  rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ ...this.getErrorObject(event.detail.error) });\n  }\n\n  /**\n   * This method is used to retrieve the NylasScheduler instance\n   * @returns The NylasScheduler instance\n   */\n  @Method()\n  async getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined> {\n    return this.baseProvider?.getStore('scheduler');\n  }\n\n  /**\n   * This method is used to retrieve the NylasConnector instance\n   * @returns The NylasConnector instance\n   */\n  @Method()\n  async getNylasSchedulerConnector() {\n    return this.nylasSchedulerConnector;\n  }\n\n  @Method()\n  async getRef() {\n    return this.host;\n  }\n\n  private getErrorObject(error: NylasSchedulerErrorResponse['error']): Notification {\n    return {\n      title: error?.title || genericError.title,\n      category: error?.category || genericError.category,\n      type: NotificationType.Error,\n      description: error?.message || '',\n      id: new Date().getTime().toString(),\n      ttl: 'none',\n    };\n  }\n\n  private checkIfSessionIdOrConfigIdExists(): boolean {\n    if (!this.sessionId && !this.configurationId) {\n      this.nylasSchedulerError.emit({\n        title: 'No sessionId!',\n        category: ErrorCategory.Component,\n        type: NotificationType.Error,\n        description: 'Session ID is required',\n        id: new Date().getTime().toString(),\n        ttl: 'none',\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private isTimeslotValid(timeslot: Timeslot): boolean {\n    const selectedDate = new Date(timeslot.start_time);\n    if (selectedDate < new Date()) {\n      this.nylasSchedulerError.emit({\n        title: 'Invalid tiemslot!',\n        category: ErrorCategory.Component,\n        type: NotificationType.Error,\n        description: 'The selected timeslot is invalid.',\n        id: new Date().getTime().toString(),\n        ttl: 'none',\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private validateAvailableDaysInFuture(\n    startDate: Date,\n    availableDaysInFuture: number,\n  ): {\n    startTime: number;\n    endTime: number;\n    endTimeForAvailableDaysInFuture: number;\n  } {\n    const today = new Date();\n    const startTime = new Date(startDate.getFullYear(), startDate.getMonth(), 1).getTime() / 1000;\n    const endTimeForCurrentMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 1).getTime() / 1000;\n    const endTimeForAvailableDaysInFuture = Math.floor(addDaysToCurrentDate(today, availableDaysInFuture).getTime() / 1000);\n    const endTime = Math.min(endTimeForAvailableDaysInFuture, endTimeForCurrentMonth);\n    return { startTime, endTime, endTimeForAvailableDaysInFuture };\n  }\n\n  render() {\n    const showDefaultScheduler = this.mode === 'app';\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const eventInfo = nylasSchedulerStore?.get('eventInfo');\n    const showBookingForm = nylasSchedulerStore?.get('showBookingForm');\n    const cancelledEventInfo = nylasSchedulerStore?.get('cancelledEventInfo');\n    const cancelBookingId = nylasSchedulerStore?.get('cancelBookingId') || this.cancelBookingId;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot') as Timeslot;\n    const rescheduleBookingId = nylasSchedulerStore?.get('rescheduleBookingId') || this.rescheduleBookingId;\n    const nylasBranding = nylasSchedulerStore?.get('nylasBranding') || this.nylasBranding;\n\n    if (showDefaultScheduler && cancelBookingId && !cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancel-flow-page\" part=\"cancel-flow-page\">\n              <nylas-cancel-booking-form cancelBookingId={cancelBookingId} exportparts=\"ncbf, ncbf__input-textfield, ncbf__button-cta, ncbf__button-outline, ncbf__input-label\" />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Cancelled event card is shown when the event is cancelled\n    if (showDefaultScheduler && cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"cancelled-event-page\">\n              <nylas-cancelled-event-card\n                cancelledEventInfo={cancelledEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Booked event card is shown when the event is booked\n    if (showDefaultScheduler && eventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"booked-event-page\" part=\"booked-event-page\">\n              <nylas-booked-event-card\n                selectedTimeslot={selectedTimeslot}\n                eventInfo={eventInfo}\n                exportparts=\"nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Date and time picker is shown when the event is not booked and no additional data is shown\n    if (showDefaultScheduler && (!eventInfo || !!rescheduleBookingId) && !showBookingForm) {\n      const timeslotPickerCTALabel = this.host.querySelector('[slot=\"timeslot-picker-cta-label\"]');\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>Choose another time slot to reschedule your meeting</MessageBanner>}\n            <div class=\"select-date-page\" part=\"select-date-page\">\n              <div class=\"left-panel\">\n                <nylas-date-picker exportparts=\"ndp, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--selected, ndp__date--current-day, ndp__date--current-month\"></nylas-date-picker>\n                <div class=\"border\"></div>\n                <nylas-locale-switch></nylas-locale-switch>\n              </div>\n              <div class=\"right-panel\">\n                <h2>\n                  <calendar-icon></calendar-icon>\n                  <span id=\"selectedDate\">{this.selectedDateLabel}</span>\n                </h2>\n                <nylas-timeslot-picker exportparts=\"ntp, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary\">\n                  {timeslotPickerCTALabel && (\n                    <span slot=\"timeslot-picker-cta-label\">\n                      <slot name=\"timeslot-picker-cta-label\"></slot>\n                    </span>\n                  )}\n                </nylas-timeslot-picker>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Additional data is shown when the time is selected, event is not booked and additional data is shown\n    if (showDefaultScheduler && !eventInfo && showBookingForm) {\n      // Check if a \"custom-booking-form\" slot is provided\n      const customTemplateSlot = this.host.querySelector('[slot=\"custom-booking-form\"]');\n\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>Choose another time slot to reschedule your meeting</MessageBanner>}\n            <div class=\"additional-data-page\" part=\"additional-data-page\">\n              <div class=\"left-panel\">\n                <div class=\"wrapper\">\n                  <nylas-selected-event-card exportparts=\"nsec, nsec__card, nsec__icon, nsec__date, nsec__time\"></nylas-selected-event-card>\n                </div>\n              </div>\n              <div class=\"right-panel\">\n                <nylas-booking-form exportparts=\"nbf, nbf__input-label, nbf__input-textfield, nbf__button-ghost, nbf__button-primary, nbf__button-outline\">\n                  {customTemplateSlot && (\n                    <div slot=\"custom-booking-form\">\n                      <slot name=\"custom-booking-form\"></slot>\n                    </div>\n                  )}\n                </nylas-booking-form>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}