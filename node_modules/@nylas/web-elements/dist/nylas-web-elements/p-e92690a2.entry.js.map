{"version":3,"names":["nylasIfStateCss","NylasIfStateStyle0","NylasIfState","constructor","hostRef","this","initTransition","bind","connectedCallback","disconnectedCallback","componentWillLoad","debug","watchStore","componentDidLoad","shouldRender","storeName","stateName","state","split","getStore","store","isStateSet","length","isBoolean","onGetStoreChange","immediate","onChange","show","transition","classes","setTimeout","render","h","Host","key","class","__decorate","RegisterComponent","name","getStoresToProp","fireRegisterEvent"],"sources":["src/components/nylas-if-state/nylas-if-state.css?tag=nylas-if-state&encapsulation=shadow","src/components/nylas-if-state/nylas-if-state.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\ndiv {\n  height: inherit;\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n.fade-in {\n  animation: fadeIn 1.5s;\n}\n\n.fade-out {\n  animation: fadeOut 1.5s;\n}\n\n@keyframes slideIn {\n  0% {\n    transform: translateY(100%);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideOut {\n  0% {\n    transform: translateY(0);\n  }\n  100% {\n    transform: translateY(100%);\n  }\n}\n\n.slide-in {\n  animation: slideIn 1.5s;\n}\n\n.slide-out {\n  animation: slideOut 1.5s;\n}\n\n@keyframes swipeIn {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n\n@keyframes swipeOut {\n  0% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n.swipe-in {\n  animation: swipeIn 1.5s;\n}\n\n.swipe-out {\n  animation: swipeOut 1.5s;\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { debug } from '@/utils/utils';\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { ObservableMap } from '@stencil/store';\n\nexport type Stores = Record<string, ObservableMap<any>>;\n\nexport type Transitions = 'none' | 'fade' | 'slide' | 'swipe';\n\n@Component({\n  tag: 'nylas-if-state',\n  styleUrl: 'nylas-if-state.css',\n  shadow: true,\n})\nexport class NylasIfState {\n  /**\n   * The name of the state to watch.\n   */\n  @Prop() readonly state?: string;\n  /**\n   * If true, then the component will render if the state is set (empty or not set).\n   * This prop is used with the `state` prop.\n   */\n  @Prop() readonly isStateSet?: boolean;\n  /**\n   * If true, then the component will render if the state is true.\n   * This prop is used with the `state` prop.\n   */\n  @Prop() readonly isBoolean?: boolean;\n  @Prop() readonly getStore?: <K extends keyof Stores>(name: K) => Stores[K];\n  @Prop() readonly transition: Transitions = 'none';\n\n  @State() show: boolean = false;\n  @State() classes: Record<string, boolean> = {};\n\n  constructor() {\n    this.initTransition = this.initTransition.bind(this);\n  }\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-if-state] Component will load`);\n    this.watchStore(true);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-if-state] Component did load`);\n  }\n\n  private shouldRender() {\n    // If a period exists in the state name, then we need to split the state name into the store name and the state name.\n    // For example, if the state name is `nylas.scheduler.selectableDates`, then the store name is `nylas` and the state name is `scheduler.selectableDates`.\n    const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];\n    const getStore = this.getStore;\n    if (typeof getStore === 'undefined') {\n      debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });\n      return false;\n    }\n\n    const store = getStore(storeName as keyof Stores);\n    if (typeof store === 'undefined') {\n      debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });\n      return false;\n    }\n\n    const state = store.state[stateName as string];\n\n    if (typeof this.isStateSet === 'boolean') {\n      return (\n        (this.isStateSet === false && (typeof state === 'undefined' || state === null || state.length === 0)) ||\n        (this.isStateSet === true && typeof state !== 'undefined' && state !== null)\n      );\n    }\n\n    if (typeof this.isBoolean === 'boolean') {\n      return (this.isBoolean === true && typeof state !== 'undefined' && state === true) || (this.isBoolean === false && typeof state !== 'undefined' && state === false);\n    }\n\n    return false;\n  }\n\n  @Watch('getStore')\n  onGetStoreChange() {\n    this.watchStore(true);\n  }\n\n  private watchStore(immediate: boolean = false) {\n    // If a period exists in the state name, then we need to split the state name into the store name and the state name.\n    // For example, if the state name is `nylas.scheduler.selectableDates`, then the store name is `nylas` and the state name is `scheduler.selectableDates`.\n    const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];\n    const getStore = this.getStore;\n    if (typeof getStore === 'undefined') {\n      debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });\n      return null;\n    }\n\n    const store = getStore(storeName as keyof Stores);\n    if (typeof store === 'undefined') {\n      debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });\n      return null;\n    }\n\n    if (immediate === true) {\n      this.initTransition();\n    }\n\n    store.onChange(stateName as string, this.initTransition);\n  }\n\n  private initTransition() {\n    const show = this.shouldRender();\n    switch (this.transition) {\n      case 'fade':\n      case 'slide':\n      case 'swipe':\n        this.classes = {\n          [`${this.transition}-in`]: show,\n          [`${this.transition}-out`]: !show,\n        };\n        setTimeout(() => {\n          this.show = show;\n        }, 150);\n        break;\n      default:\n        this.show = this.shouldRender();\n        break;\n    }\n  }\n\n  @RegisterComponent({\n    name: 'nylas-if-state',\n    getStoresToProp: 'getStore',\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class={this.classes}>{this.show && <slot></slot>}</div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"kJAAA,MAAMA,EAAkB,+oBACxB,MAAAC,EAAeD,E,ugBCaFE,EAAY,MAqBvB,WAAAC,CAAAC,G,0HAL2C,O,UAElB,M,aACmB,GAG1CC,KAAKC,eAAiBD,KAAKC,eAAeC,KAAKF,K,CAGjD,iBAAAG,GAAiB,CAEjB,oBAAAC,GAAoB,CAEpB,uBAAMC,GACJC,EAAM,wCACNN,KAAKO,WAAW,K,CAGlB,sBAAMC,GACJF,EAAM,sC,CAGA,YAAAG,GAGN,MAAOC,EAAWC,GAAaX,KAAKY,MAAQZ,KAAKY,MAAMC,MAAM,KAAO,CAAC,GAAI,IACzE,MAAMC,EAAWd,KAAKc,SACtB,UAAWA,IAAa,YAAa,CACnCR,EAAM,gCAAgCI,mBAA2BC,IAAa,CAAEG,aAChF,OAAO,K,CAGT,MAAMC,EAAQD,EAASJ,GACvB,UAAWK,IAAU,YAAa,CAChCT,EAAM,gCAAgCI,mBAA2BC,IAAa,CAAEI,UAChF,OAAO,K,CAGT,MAAMH,EAAQG,EAAMH,MAAMD,GAE1B,UAAWX,KAAKgB,aAAe,UAAW,CACxC,OACGhB,KAAKgB,aAAe,eAAiBJ,IAAU,aAAeA,IAAU,MAAQA,EAAMK,SAAW,IACjGjB,KAAKgB,aAAe,aAAeJ,IAAU,aAAeA,IAAU,I,CAI3E,UAAWZ,KAAKkB,YAAc,UAAW,CACvC,OAAQlB,KAAKkB,YAAc,aAAeN,IAAU,aAAeA,IAAU,MAAUZ,KAAKkB,YAAc,cAAgBN,IAAU,aAAeA,IAAU,K,CAG/J,OAAO,K,CAIT,gBAAAO,GACEnB,KAAKO,WAAW,K,CAGV,UAAAA,CAAWa,EAAqB,OAGtC,MAAOV,EAAWC,GAAaX,KAAKY,MAAQZ,KAAKY,MAAMC,MAAM,KAAO,CAAC,GAAI,IACzE,MAAMC,EAAWd,KAAKc,SACtB,UAAWA,IAAa,YAAa,CACnCR,EAAM,gCAAgCI,mBAA2BC,IAAa,CAAEG,aAChF,OAAO,I,CAGT,MAAMC,EAAQD,EAASJ,GACvB,UAAWK,IAAU,YAAa,CAChCT,EAAM,gCAAgCI,mBAA2BC,IAAa,CAAEI,UAChF,OAAO,I,CAGT,GAAIK,IAAc,KAAM,CACtBpB,KAAKC,gB,CAGPc,EAAMM,SAASV,EAAqBX,KAAKC,e,CAGnC,cAAAA,GACN,MAAMqB,EAAOtB,KAAKS,eAClB,OAAQT,KAAKuB,YACX,IAAK,OACL,IAAK,QACL,IAAK,QACHvB,KAAKwB,QAAU,CACb,CAAC,GAAGxB,KAAKuB,iBAAkBD,EAC3B,CAAC,GAAGtB,KAAKuB,mBAAoBD,GAE/BG,YAAW,KACTzB,KAAKsB,KAAOA,CAAI,GACf,KACH,MACF,QACEtB,KAAKsB,KAAOtB,KAAKS,eACjB,M,CASN,MAAAiB,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CAAKC,MAAO9B,KAAKwB,SAAUxB,KAAKsB,MAAQK,EAAA,c,+DAH9CI,EAAA,CALCC,EAAkB,CACjBC,KAAM,iBACNC,gBAAiB,WACjBC,kBAAmB,O"}