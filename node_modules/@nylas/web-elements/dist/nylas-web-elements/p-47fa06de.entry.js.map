{"version":3,"names":["nylasThreadsRefreshCss","NylasThreadsRefreshStyle0","NylasThreadsRefresh","constructor","hostRef","this","threshold","onTouchStart","e","debug","touches","pageY","containerElement","scrollTop","offsetHeight","contentElement","start","onTouchMove","distance","pulling","onTouchEnd","changedTouches","refresh","emit","updateState","bind","connectedCallback","componentWillLoad","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","state","render","h","Host","key","class","ref","r","refreshing","slot","__decorate","RegisterComponent","name","eventToProps","async","event","nylasConnector","detail","threads","getThreads","undefined","fireRegisterEvent"],"sources":["src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.scss?tag=nylas-threads-refresh&encapsulation=shadow","src/components/mailbox/nylas-threads-refresh/nylas-threads-refresh.tsx"],"sourcesContent":[":host {\n  display: contents;\n}\n\n.container {\n  width: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.pull-to-refresh {\n  display: none;\n  border: 0;\n  background-color: transparent;\n  text-align: center;\n  width: 100%;\n  justify-content: center;\n}\n\n.pulling {\n  position: relative;\n  display: flex;\n  margin: 0 auto;\n  padding: 1rem;\n  svg {\n    width: 24px;\n    height: 24px;\n    color: var(--nylas-color-primary-500);\n    transform: rotate(90deg);\n  }\n}\n\n.refreshing {\n  position: relative;\n  display: flex;\n  margin: 0 auto;\n  padding: 1rem;\n  svg {\n    width: 24px;\n    height: 24px;\n    fill: var(--nylas-color-primary-500);\n    animation: rotate 1s linear infinite;\n  }\n}\n\n@keyframes rotate {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { Component, Event, EventEmitter, Host, Method, State, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../../components';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { debug } from '@/utils/utils';\n\nexport type RefreshEvent = {\n  updateState: (state: 'ready' | 'loading' | 'error') => Promise<void>;\n};\n\n@Component({\n  tag: 'nylas-threads-refresh',\n  styleUrl: 'nylas-threads-refresh.scss',\n  shadow: true,\n})\nexport class NylasThreadsRefresh {\n  private readonly threshold: number = 100;\n\n  @State() start: number = 0;\n\n  @State() state: 'ready' | 'loading' | 'error' = 'ready';\n\n  @State() pulling: boolean = false;\n\n  @Event() refresh!: EventEmitter<RefreshEvent>;\n\n  private containerElement?: HTMLElement;\n  private contentElement?: HTMLElement;\n\n  constructor() {\n    debug(`[nylas-threads-refresh] Constructor`);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  connectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-threads-refresh] Component will load`);\n  }\n\n  componentDidLoad() {\n    debug(`[nylas-threads-refresh] Component did load`);\n    this.containerElement?.addEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.addEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.addEventListener('touchend', this.onTouchEnd);\n  }\n\n  disconnectedCallback() {\n    debug(`[nylas-threads-refresh] Component disconnected`);\n    this.containerElement?.removeEventListener('touchstart', this.onTouchStart);\n    this.containerElement?.removeEventListener('touchmove', this.onTouchMove);\n    this.containerElement?.removeEventListener('touchend', this.onTouchEnd);\n  }\n\n  @Method()\n  public async updateState(state: 'ready' | 'loading' | 'error') {\n    this.state = state;\n  }\n\n  private onTouchStart = (e: TouchEvent) => {\n    debug(`[nylas-threads-refresh] Touch start`, e.touches[0].pageY, this.containerElement?.scrollTop, this.containerElement?.offsetHeight, this.contentElement?.scrollTop);\n    if (this.containerElement?.scrollTop === 0) {\n      this.start = e.touches[0].pageY;\n    } else {\n      this.start = 0;\n    }\n  };\n\n  private onTouchMove = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.touches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = true;\n      } else {\n        this.pulling = false;\n      }\n    }\n  };\n\n  private onTouchEnd = (e: TouchEvent) => {\n    if (this.start) {\n      const distance = e.changedTouches[0].pageY - this.start;\n      if (distance > this.threshold) {\n        this.pulling = false;\n        this.refresh.emit({\n          updateState: this.updateState,\n        });\n      }\n      this.start = 0;\n    }\n  };\n  @RegisterComponent<NylasThreadsRefresh, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-threads-refresh',\n    eventToProps: {\n      refresh: async (event: CustomEvent<RefreshEvent>, nylasConnector: NylasMailboxConnector) => {\n        debug(`[nylas-threads-refresh] Refreshing threads`);\n        const { updateState } = event.detail;\n        await updateState('loading');\n        await nylasConnector.threads.getThreads(undefined, 'overwrite', false);\n        await updateState('ready');\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"container\" ref={r => (this.containerElement = r)}>\n          <button\n            class={{\n              'pull-to-refresh': true,\n              'pulling': this.pulling,\n              'refreshing': this.state === 'loading',\n            }}\n            aria-label=\"Refreshing...\"\n          >\n            {this.state === 'loading' && <refresh-icon slot=\"icon\" />}\n            {this.state !== 'loading' && <arrow-icon slot=\"icon\" />}\n          </button>\n          <div class=\"content\" ref={r => (this.contentElement = r)}>\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oJAAA,MAAMA,EAAyB,2nBAC/B,MAAAC,EAAeD,E,ugBCcFE,EAAmB,MAc9B,WAAAC,CAAAC,G,2CAbiBC,KAAAC,UAAoB,IA2C7BD,KAAAE,aAAgBC,IACtBC,EAAM,sCAAuCD,EAAEE,QAAQ,GAAGC,MAAON,KAAKO,kBAAkBC,UAAWR,KAAKO,kBAAkBE,aAAcT,KAAKU,gBAAgBF,WAC7J,GAAIR,KAAKO,kBAAkBC,YAAc,EAAG,CAC1CR,KAAKW,MAAQR,EAAEE,QAAQ,GAAGC,K,KACrB,CACLN,KAAKW,MAAQ,C,GAITX,KAAAY,YAAeT,IACrB,GAAIH,KAAKW,MAAO,CACd,MAAME,EAAWV,EAAEE,QAAQ,GAAGC,MAAQN,KAAKW,MAC3C,GAAIE,EAAWb,KAAKC,UAAW,CAC7BD,KAAKc,QAAU,I,KACV,CACLd,KAAKc,QAAU,K,IAKbd,KAAAe,WAAcZ,IACpB,GAAIH,KAAKW,MAAO,CACd,MAAME,EAAWV,EAAEa,eAAe,GAAGV,MAAQN,KAAKW,MAClD,GAAIE,EAAWb,KAAKC,UAAW,CAC7BD,KAAKc,QAAU,MACfd,KAAKiB,QAAQC,KAAK,CAChBC,YAAanB,KAAKmB,a,CAGtBnB,KAAKW,MAAQ,C,cAtEQ,E,WAEuB,Q,aAEpB,MAQ1BP,EAAM,uCACNJ,KAAKmB,YAAcnB,KAAKmB,YAAYC,KAAKpB,K,CAG3C,iBAAAqB,GAAiB,CAEjB,uBAAMC,GACJlB,EAAM,8C,CAGR,gBAAAmB,GACEnB,EAAM,8CACNJ,KAAKO,kBAAkBiB,iBAAiB,aAAcxB,KAAKE,cAC3DF,KAAKO,kBAAkBiB,iBAAiB,YAAaxB,KAAKY,aAC1DZ,KAAKO,kBAAkBiB,iBAAiB,WAAYxB,KAAKe,W,CAG3D,oBAAAU,GACErB,EAAM,kDACNJ,KAAKO,kBAAkBmB,oBAAoB,aAAc1B,KAAKE,cAC9DF,KAAKO,kBAAkBmB,oBAAoB,YAAa1B,KAAKY,aAC7DZ,KAAKO,kBAAkBmB,oBAAoB,WAAY1B,KAAKe,W,CAIvD,iBAAMI,CAAYQ,GACvB3B,KAAK2B,MAAQA,C,CAgDf,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CAAKC,MAAM,YAAYC,IAAKC,GAAMlC,KAAKO,iBAAmB2B,GACxDL,EAAA,UAAAE,IAAA,2CACEC,MAAO,CACL,kBAAmB,KACnBlB,QAAWd,KAAKc,QAChBqB,WAAcnC,KAAK2B,QAAU,WAC9B,aACU,iBAEV3B,KAAK2B,QAAU,WAAaE,EAAA,gBAAcO,KAAK,SAC/CpC,KAAK2B,QAAU,WAAaE,EAAA,cAAYO,KAAK,UAEhDP,EAAA,OAAAE,IAAA,2CAAKC,MAAM,UAAUC,IAAKC,GAAMlC,KAAKU,eAAiBwB,GACpDL,EAAA,QAAAE,IAAA,+C,GAhBVM,EAAA,CAbCC,EAA0G,CACzGC,KAAM,wBACNC,aAAc,CACZvB,QAASwB,MAAOC,EAAkCC,KAChDvC,EAAM,8CACN,MAAMe,YAAEA,GAAgBuB,EAAME,aACxBzB,EAAY,iBACZwB,EAAeE,QAAQC,WAAWC,UAAW,YAAa,aAC1D5B,EAAY,QAAQ,GAG9B6B,kBAAmB,O"}