{"version":3,"names":["nylasListFoldersCss","NylasListFoldersStyle0","NylasListFolders","constructor","hostRef","this","folderSelectedHandler","folder","folderSelected","emit","connectedCallback","disconnectedCallback","componentWillLoad","debug","componentDidLoad","watchFolders","newFolders","defaultFolders","filter","folderName","find","name","toLowerCase","map","sort","a","b","indexOf","otherFolders","localeCompare","formatFolderName","toTitleCase","replace","getFolderIcon","h","render","Host","key","class","onClick","selected","selectedFolder","slot","Fragment","__decorate","RegisterComponent","stateToProps","Map","eventToProps","async","_event","nylasConnector","threads","getThreads","page_token","undefined","in","detail","id","fireRegisterEvent"],"sources":["src/components/mailbox/nylas-list-folders/nylas-list-folders.scss?tag=nylas-list-folders&encapsulation=shadow","src/components/mailbox/nylas-list-folders/nylas-list-folders.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.folders {\n  display: flex;\n  flex-direction: column;\n  align-items: self-start;\n\n  .folder {\n    border: 1px solid var(--nylas-color-primary-100);\n    padding: 0.5rem 0.75rem;\n    margin-bottom: 0.5rem;\n    justify-content: left;\n    width: 100%;\n\n    min-width: 200px;\n    border-radius: var(--nylas-border-radius);\n    background-color: var(--nylas-color-primary-50);\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n\n    &.selected {\n      background-color: var(--nylas-color-primary-100);\n    }\n\n    .icon {\n      margin-right: 0.5rem;\n      stroke: var(--nylas-color-primary-900);\n      fill: none;\n    }\n  }\n}\n\nhr {\n  width: 100%;\n  margin: 1rem 0;\n  border: 0;\n  border-top: 1px solid var(--nylas-color-primary-100);\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { debug, formatFolderName, toTitleCase } from '@/utils/utils';\nimport { Component, Event, EventEmitter, Fragment, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../..';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { Folder } from '@nylas/core';\n\n@Component({\n  tag: 'nylas-list-folders',\n  styleUrl: 'nylas-list-folders.scss',\n  shadow: true,\n})\nexport class NylasListFolders {\n  @Prop() readonly folders?: Folder[];\n  @Prop() readonly selectedFolder?: string;\n\n  @Event() readonly folderSelected!: EventEmitter<Folder>;\n\n  @State() defaultFolders?: Folder[];\n  @State() otherFolders?: Folder[];\n\n  constructor() {}\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-list-folders] Component will load`);\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-list-folders] Component did load`);\n  }\n\n  @Watch('folders')\n  watchFolders(newFolders: Folder[]) {\n    debug(`[nylas-list-folders] watchFolders`, { newFolders });\n    // Expected default folders\n    const defaultFolders = ['inbox', 'drafts', 'sent', 'starred', 'spam', 'archive', 'trash'];\n\n    // Only include default folders that are in the list of folders, and sort them by the default order\n    this.defaultFolders = defaultFolders\n      .filter(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .map(folderName => newFolders.find(folder => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .filter(folder => typeof folder !== 'undefined')\n      .sort((a, b) => defaultFolders.indexOf(a?.name ?? '') - defaultFolders.indexOf(b?.name ?? '')) as Folder[];\n\n    // Only include folders that are not default folders, and sort them by name\n    this.otherFolders = newFolders\n      .filter(folder => !defaultFolders.find(folderName => folder.name?.toLowerCase() === folderName.toLowerCase()))\n      .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? '')) as Folder[];\n  }\n\n  private folderSelectedHandler = (folder: Folder) => {\n    this.folderSelected?.emit(folder);\n  };\n\n  private formatFolderName(folder: Folder) {\n    return toTitleCase(folder.name?.replace('CATEGORY_', '') ?? 'Unknown');\n  }\n\n  private getFolderIcon(folder: Folder) {\n    switch (folder.name?.toLowerCase()) {\n      case 'inbox':\n        return <inbox-icon></inbox-icon>;\n      case 'drafts':\n        return <drafts-icon></drafts-icon>;\n      case 'sent':\n        return <sent-icon></sent-icon>;\n      case 'starred':\n        return <star-icon></star-icon>;\n      case 'spam':\n        return <spam-icon></spam-icon>;\n      case 'archive':\n        return <archive-icon></archive-icon>;\n      case 'trash':\n        return <trash-icon></trash-icon>;\n      default:\n        return <folder-icon></folder-icon>;\n    }\n  }\n\n  @RegisterComponent<NylasListFolders, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-pagination',\n    stateToProps: new Map([\n      ['mailbox.folders', 'folders'],\n      ['mailbox.selectedFolder', 'selectedFolder'],\n    ]),\n    eventToProps: {\n      folderSelected: async (_event, nylasConnector) => {\n        debug(`[nylas-list-folders] folderSelected event`, { _event });\n        await nylasConnector.threads.getThreads({\n          page_token: undefined,\n          in: formatFolderName(_event.detail.id ?? 'inbox'),\n        });\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"folders\">\n          {this.defaultFolders?.map(folder => (\n            <sp-button\n              onClick={() => this.folderSelectedHandler(folder)}\n              class={{\n                folder: true,\n                selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),\n              }}\n            >\n              <div slot=\"icon\" class=\"icon\">\n                {this.getFolderIcon(folder)}\n              </div>\n              {this.formatFolderName(folder)}\n            </sp-button>\n          ))}\n        </div>\n        {this.otherFolders && (\n          <Fragment>\n            <hr />\n            <div class=\"folders\">\n              {this.otherFolders?.map(folder => (\n                <sp-button\n                  onClick={() => this.folderSelectedHandler(folder)}\n                  class={{\n                    folder: true,\n                    selected: formatFolderName(folder.name ?? 'inbox').toLowerCase() === this.selectedFolder?.toLowerCase(),\n                  }}\n                >\n                  <div slot=\"icon\" class=\"icon\">\n                    {this.getFolderIcon(folder)}\n                  </div>\n                  {this.formatFolderName(folder)}\n                </sp-button>\n              ))}\n            </div>\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"8KAAA,MAAMA,EAAsB,ynBAC5B,MAAAC,EAAeD,E,ugBCWFE,EAAgB,MAS3B,WAAAC,CAAAC,G,yDAiCQC,KAAAC,sBAAyBC,IAC/BF,KAAKG,gBAAgBC,KAAKF,EAAO,E,+GAhCnC,iBAAAG,GAAiB,CAEjB,oBAAAC,GAAoB,CAEpB,uBAAMC,GACJC,EAAM,2C,CAGR,sBAAMC,GACJD,EAAM,0C,CAIR,YAAAE,CAAaC,GACXH,EAAM,oCAAqC,CAAEG,eAE7C,MAAMC,EAAiB,CAAC,QAAS,SAAU,OAAQ,UAAW,OAAQ,UAAW,SAGjFZ,KAAKY,eAAiBA,EACnBC,QAAOC,GAAcH,EAAWI,MAAKb,GAAUA,EAAOc,MAAMC,gBAAkBH,EAAWG,kBACzFC,KAAIJ,GAAcH,EAAWI,MAAKb,GAAUA,EAAOc,MAAMC,gBAAkBH,EAAWG,kBACtFJ,QAAOX,UAAiBA,IAAW,cACnCiB,MAAK,CAACC,EAAGC,IAAMT,EAAeU,QAAQF,GAAGJ,MAAQ,IAAMJ,EAAeU,QAAQD,GAAGL,MAAQ,MAG5FhB,KAAKuB,aAAeZ,EACjBE,QAAOX,IAAWU,EAAeG,MAAKD,GAAcZ,EAAOc,MAAMC,gBAAkBH,EAAWG,kBAC9FE,MAAK,CAACC,EAAGC,KAAOD,EAAEJ,MAAQ,IAAIQ,cAAcH,EAAEL,MAAQ,K,CAOnD,gBAAAS,CAAiBvB,GACvB,OAAOwB,EAAYxB,EAAOc,MAAMW,QAAQ,YAAa,KAAO,U,CAGtD,aAAAC,CAAc1B,GACpB,OAAQA,EAAOc,MAAMC,eACnB,IAAK,QACH,OAAOY,EAAA,mBACT,IAAK,SACH,OAAOA,EAAA,oBACT,IAAK,OACH,OAAOA,EAAA,kBACT,IAAK,UACH,OAAOA,EAAA,kBACT,IAAK,OACH,OAAOA,EAAA,kBACT,IAAK,UACH,OAAOA,EAAA,qBACT,IAAK,QACH,OAAOA,EAAA,mBACT,QACE,OAAOA,EAAA,oB,CAqBb,MAAAC,GACE,OACED,EAACE,EAAI,CAAAC,IAAA,4CACHH,EAAA,OAAAG,IAAA,2CAAKC,MAAM,WACRjC,KAAKY,gBAAgBM,KAAIhB,GACxB2B,EAAA,aACEK,QAAS,IAAMlC,KAAKC,sBAAsBC,GAC1C+B,MAAO,CACL/B,OAAQ,KACRiC,SAAUV,EAAiBvB,EAAOc,MAAQ,SAASC,gBAAkBjB,KAAKoC,gBAAgBnB,gBAG5FY,EAAA,OAAKQ,KAAK,OAAOJ,MAAM,QACpBjC,KAAK4B,cAAc1B,IAErBF,KAAKyB,iBAAiBvB,OAI5BF,KAAKuB,cACJM,EAACS,EAAQ,KACPT,EAAA,WACAA,EAAA,OAAKI,MAAM,WACRjC,KAAKuB,cAAcL,KAAIhB,GACtB2B,EAAA,aACEK,QAAS,IAAMlC,KAAKC,sBAAsBC,GAC1C+B,MAAO,CACL/B,OAAQ,KACRiC,SAAUV,EAAiBvB,EAAOc,MAAQ,SAASC,gBAAkBjB,KAAKoC,gBAAgBnB,gBAG5FY,EAAA,OAAKQ,KAAK,OAAOJ,MAAM,QACpBjC,KAAK4B,cAAc1B,IAErBF,KAAKyB,iBAAiBvB,Q,0DAlCvCqC,EAAA,CAjBCC,EAAuG,CACtGxB,KAAM,mBACNyB,aAAc,IAAIC,IAAI,CACpB,CAAC,kBAAmB,WACpB,CAAC,yBAA0B,oBAE7BC,aAAc,CACZxC,eAAgByC,MAAOC,EAAQC,KAC7BtC,EAAM,4CAA6C,CAAEqC,iBAC/CC,EAAeC,QAAQC,WAAW,CACtCC,WAAYC,UACZC,GAAI1B,EAAiBoB,EAAOO,OAAOC,IAAM,UACzC,GAGNC,kBAAmB,O"}