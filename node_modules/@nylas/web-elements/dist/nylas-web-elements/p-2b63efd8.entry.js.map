{"version":3,"names":["NylasMailboxConnector","constructor","router","nylasAuth","nylasAuthStore","nylasStore","this","nylasMailboxStore","init","debug","mailboxStore","authStore","auth","_authConnector","NylasAuthConnector","threads","_threadConnector","NylasThreadsConnector","messages","_messageConnector","NylasMessagesConnector","folders","_foldersConnector","NylasFoldersConnector","getAuth","resetStores","reset","logout","nylasMailboxCss","NylasMailboxStyle0","NylasMailbox","handleAuthChange","async","isAuthenticated","loggedIn","emit","host","loggedOutEvent","loggedOut","defaultPrevented","nylasMailboxConnector","connectedCallback","componentWillLoad","stores","CreateNylasAuthStore","defaultAuthStoreState","mailbox","CreateNylasMailboxStore","defaultMailboxStoreState","baseProvider","NylasBaseProvider","automaticComponentRegistration","eventOverrides","HashRouter","NylasAuth","apiUri","elementsApiUri","storageType","clientId","defaultScopes","redirectURI","authConfig","getStore","Error","initEvent","validateSession","addRouteChangeListener","_route","_path","routeParams","threadId","thread","getThread","set","_routeParams","state","unSelectThread","getFolders","queryParams","window","location","hash","split","params","URLSearchParams","searchQuery","get","getThreads","search_query_native","page_token","undefined","componentDidLoad","onChange","componentDisconnected","registerComponentHandler","event","registerComponent","detail","unregisterComponentHandler","unregisterComponent","getMailboxStore","getAuthStore","getNylasAuth","getNylasMailboxConnector","render","h","Host","key"],"sources":["src/connector/nylas-mailbox-connector/index.ts","src/components/mailbox/nylas-mailbox/nylas-mailbox.css?tag=nylas-mailbox&encapsulation=shadow","src/components/mailbox/nylas-mailbox/nylas-mailbox.tsx"],"sourcesContent":["import { RouterInterface } from '@/routers/router-interface';\nimport { NylasAuthStoreType } from '@/stores/auth-store';\nimport { NylasMailboxStoreType } from '@/stores/mailbox-store';\nimport { debug } from '@/utils/utils';\nimport type { NylasAuthType } from '@nylas/core';\nimport { NylasMailboxConnectorInterface } from '../connector-interface';\nimport { NylasAuthConnector } from '../shared/api/auth';\nimport { NylasMessagesConnector } from '../shared/api/messages';\nimport { NylasThreadsConnector } from '../shared/api/threads';\nimport { NylasFoldersConnector } from '../shared/api/folders';\n\n/**\n * Base class for the Nylas connector.\n */\nexport class NylasMailboxConnector implements NylasMailboxConnectorInterface {\n  public nylasAuth: NylasAuthType;\n  public nylasMailboxStore: NylasMailboxStoreType;\n  public nylasAuthStore: NylasAuthStoreType;\n  public router: RouterInterface;\n\n  private _authConnector: NylasAuthConnector | undefined;\n  private _threadConnector: NylasThreadsConnector | undefined;\n  private _messageConnector: NylasMessagesConnector | undefined;\n  private _foldersConnector: NylasFoldersConnector | undefined;\n\n  constructor(router: RouterInterface, nylasAuth: NylasAuthType, nylasAuthStore: NylasAuthStoreType, nylasStore: NylasMailboxStoreType) {\n    this.router = router;\n    this.nylasAuth = nylasAuth;\n    this.nylasAuthStore = nylasAuthStore;\n    this.nylasMailboxStore = nylasStore;\n  }\n\n  public init() {\n    debug('NylasMailboxConnector init');\n  }\n\n  public get mailboxStore() {\n    return this.nylasMailboxStore;\n  }\n\n  public get authStore() {\n    return this.nylasAuthStore;\n  }\n\n  public get auth() {\n    if (this._authConnector) {\n      return this._authConnector;\n    }\n    this._authConnector = new NylasAuthConnector(this.nylasAuth, this.nylasAuthStore);\n    return this._authConnector;\n  }\n\n  public get threads() {\n    if (this._threadConnector) {\n      return this._threadConnector;\n    }\n    this._threadConnector = new NylasThreadsConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore, this.router);\n    return this._threadConnector;\n  }\n\n  public get messages() {\n    if (this._messageConnector) {\n      return this._messageConnector;\n    }\n    this._messageConnector = new NylasMessagesConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);\n    return this._messageConnector;\n  }\n\n  public get folders() {\n    if (this._foldersConnector) {\n      return this._foldersConnector;\n    }\n    this._foldersConnector = new NylasFoldersConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);\n    return this._foldersConnector;\n  }\n\n  public getAuth() {\n    return this.nylasAuth;\n  }\n\n  public resetStores() {\n    this.nylasMailboxStore.reset();\n    this.nylasAuthStore.reset();\n  }\n\n  public async logout() {\n    await this.nylasAuth.logout();\n    this.resetStores();\n  }\n}\n\nexport type PublicMethods<T> = {\n  [K in keyof T]: T[K] extends Function ? (string extends K ? never : K) : never;\n}[keyof T];\n\nexport type NylasMailboxConnectorPublicMethods = PublicMethods<NylasMailboxConnector>;\n",":host {\n  display: contents;\n}\n","import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport type { EventOverride } from '@/common/component-types';\nimport { NylasMailboxConnector } from '@/connector/nylas-mailbox-connector';\nimport { HashRouter } from '@/routers/hash-router';\nimport { RouterInterface } from '@/routers/router-interface';\nimport { CreateNylasAuthStore, NylasAuthStoreState, NylasAuthStoreType } from '@/stores/auth-store';\nimport { CreateNylasMailboxStore, NylasMailboxStoreState, NylasMailboxStoreType } from '@/stores/mailbox-store';\nimport { AuthConfig, NylasAuth, NylasAuthType } from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, h } from '@stencil/core';\nimport { debug } from '@/utils/utils';\n\n/**\n * The Nylas Mailbox component.\n * This component is used as a provider for all other Nylas Mailbox components.\n * It is responsible for managing the NylasAuth and NylasMailboxConnector instances.\n * It also manages the state of the NylasAuth and NylasMailboxStore instances.\n * @example\n * <nylas-mailbox\n *  auth-config={{\n *  clientId: 'YOUR_CLIENT_ID',\n *  }}\n * default-auth-store-state={{\n * threadQueryParams: {\n *  limit: 10,\n * }}\n * >\n *  <nylas-mailbox-thread-list></nylas-mailbox-thread-list>\n * </nylas-mailbox>\n */\n@Component({\n  tag: 'nylas-mailbox',\n  styleUrl: 'nylas-mailbox.css',\n  shadow: true,\n})\nexport class NylasMailbox {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: {\n    auth: NylasAuthStoreType;\n    mailbox: NylasMailboxStoreType;\n  };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Auth instance.\n   * Used to manage all things authentication with Nylas.\n   */\n  private nylasAuth?: NylasAuthType;\n\n  /**\n   * A router instance.\n   */\n  private router?: RouterInterface;\n\n  /**\n   * The Nylas Mailbox Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasMailboxConnector?: NylasMailboxConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasMailboxElement;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   */\n  @Prop() readonly automaticComponentRegistration: boolean = true;\n\n  /**\n   * This provides a way to override the default event handlers.\n   */\n  @Prop() eventOverrides: EventOverride<Exclude<typeof this.nylasMailboxConnector, undefined>> = {};\n\n  /**\n   * The Nylas Auth configuration.\n   * Used to manage all things authentication with Nylas.\n   */\n  @Prop({ attribute: 'auth-config' }) readonly authConfig?: AuthConfig;\n\n  /**\n   * The default auth store state.\n   * Used to set the initial state of the auth store.\n   */\n  @Prop({ attribute: 'default-auth-store-state' }) readonly defaultAuthStoreState?: NylasAuthStoreState;\n\n  /**\n   * The default mailbox store state.\n   * Used to set the initial state of the mailbox store.\n   */\n  @Prop({ attribute: 'default-mailbox-store-state' }) readonly defaultMailboxStoreState?: NylasMailboxStoreState;\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) readonly init!: EventEmitter<HTMLNylasMailboxElement>;\n\n  /**\n   * This event is fired when the the NyalsAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) readonly loggedIn!: EventEmitter<HTMLNylasMailboxElement>;\n\n  /**\n   * This event is fired when the the NyalsAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) readonly loggedOut!: EventEmitter<HTMLNylasMailboxElement>;\n\n  connectedCallback() {\n    debug('[nylas-mailbox] connectedCallback');\n  }\n\n  async componentWillLoad() {\n    this.stores = {\n      auth: CreateNylasAuthStore(this.defaultAuthStoreState),\n      mailbox: CreateNylasMailboxStore(this.defaultMailboxStoreState),\n    };\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    /**\n     * Create the router instance.\n     * This will be used to manage the routing of the provider.\n     */\n    this.router = new HashRouter();\n\n    /**\n     * Create the NylasAuth instance.\n     * This will be used to manage all things authentication with Nylas.\n     */\n    this.nylasAuth = NylasAuth({\n      apiUri: 'https://api.us.nylas.com',\n      elementsApiUri: 'https://elements.us.nylas.com',\n      storageType: 'indexeddb',\n      clientId: 'YOUR_CLIENT_ID',\n      defaultScopes: [],\n      redirectURI: '/',\n      ...this.authConfig,\n    });\n\n    const authStore = this.baseProvider?.getStore('auth');\n    if (!authStore) {\n      throw new Error('Auth store is not defined');\n    }\n\n    const mailboxStore = this.baseProvider?.getStore('mailbox');\n    if (!mailboxStore) {\n      throw new Error('Mailbox store is not defined');\n    }\n\n    this.nylasMailboxConnector = new NylasMailboxConnector(this.router, this.nylasAuth, authStore, mailboxStore);\n\n    const initEvent = this.init.emit(this.host);\n    if (!initEvent.defaultPrevented) {\n      /**\n       * By default, on init, we will validate the session.\n       * This will check if the user is logged in and if the session is still valid.\n       * If the session is not valid, the user will be logged out.\n       */\n      await this.nylasMailboxConnector?.auth.validateSession();\n    }\n\n    // Handle our router\n    this.router?.addRouteChangeListener(`/thread/:threadId`, async (_route, _path, routeParams) => {\n      const threadId = routeParams.threadId;\n      const thread = await this.nylasMailboxConnector?.threads.getThread(threadId);\n      if (thread) {\n        this.nylasMailboxConnector?.mailboxStore.set('selectedThread', thread);\n      }\n    });\n    this.router?.addRouteChangeListener(`/`, async (_route, _path, _routeParams) => {\n      if (!authStore.state.isAuthenticated) {\n        return;\n      }\n      // Reset the selected thread\n      this.nylasMailboxConnector?.threads.unSelectThread();\n      this.nylasMailboxConnector?.folders.getFolders();\n\n      // If we have a query param, search for threads\n      const queryParams = window.location.hash.split('?')[1];\n      if (queryParams) {\n        const params = new URLSearchParams(queryParams);\n        const searchQuery = params.get('query');\n        if (searchQuery) {\n          await this.nylasMailboxConnector?.threads.getThreads({\n            search_query_native: searchQuery,\n            page_token: undefined,\n          });\n        }\n      } else {\n        this.nylasMailboxConnector?.threads.getThreads();\n      }\n    });\n\n    /**\n     * Initialize the router.\n     * This will be used to manage the routing of the provider.\n     */\n    this.router?.init();\n\n    /**\n     * Listen for changes in the NylasAuth isAuthenticated state.\n     * This is used to fire the loggedIn and loggedOut events.\n     */\n    this.handleAuthChange(authStore.state.isAuthenticated);\n    this.baseProvider?.componentWillLoad(this.nylasMailboxConnector);\n  }\n\n  async componentDidLoad() {\n    const authStore = this.baseProvider?.getStore('auth');\n    if (!authStore) {\n      throw new Error('Auth store is not defined');\n    }\n\n    authStore.onChange('isAuthenticated', this.handleAuthChange);\n    this.baseProvider?.componentDidLoad();\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This method is used to retrieve the mailboxStore instance\n   * @returns The mailboxStore instance\n   */\n  @Method()\n  async getMailboxStore(): Promise<NylasMailboxStoreType | undefined> {\n    return this.baseProvider?.getStore('mailbox');\n  }\n\n  /**\n   * This method is used to retrieve the authStore instance\n   * @returns The authStore instance\n   */\n  @Method()\n  async getAuthStore(): Promise<NylasAuthStoreType | undefined> {\n    return this.baseProvider?.getStore('auth');\n  }\n\n  /**\n   * This method is used to retrieve the NylasAuth instance\n   * @returns The NylasAuth instance\n   */\n  @Method()\n  async getNylasAuth(): Promise<NylasAuthType | undefined> {\n    return this.nylasAuth;\n  }\n\n  /**\n   * This method is used to retrieve the NylasMailboxConnector instance\n   * @returns The NylasMailboxConnector instance\n   */\n  @Method()\n  async getNylasMailboxConnector() {\n    return this.nylasMailboxConnector;\n  }\n\n  /**\n   * This method is used to handle changes in the NylasAuth isAuthenticated state\n   * @param isAuthenticated isAuthenticated state\n   * @returns void\n   */\n  private handleAuthChange = async (isAuthenticated: boolean) => {\n    if (isAuthenticated) {\n      this.loggedIn.emit(this.host);\n    } else {\n      const loggedOutEvent = this.loggedOut.emit(this.host);\n      if (!loggedOutEvent.defaultPrevented) {\n        await this.nylasMailboxConnector?.logout();\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}