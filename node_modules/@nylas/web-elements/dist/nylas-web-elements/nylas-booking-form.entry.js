import { r as registerInstance, i as createEvent, h, a as Host, e as getElement } from './index-8362ce5c.js';
import { R as RegisterComponent } from './register-component-0462b27d.js';
import { a as debug } from './utils-157014b4.js';
import './_commonjsHelpers-7c16df4a.js';

const nylasBookingFormCss = ":host{display:block;height:100%;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-booking-form{width:100%;padding:1.5rem;box-sizing:border-box;height:450px;overflow-y:auto;height:100%}form{height:100%;display:flex;flex-direction:column;justify-content:space-between;align-items:center}sp-textfield{--spectrum-corner-radius-100:var(--nylas-border-radius-2x);--spectrum-textfield-border-color:var(--nylas-base-300);position:relative;width:100%;height:48px;margin-bottom:16px;color:var(--nylas-base-500)}.cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;justify-content:space-between;gap:0.5rem;padding:10px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.cta{flex-direction:column-reverse}}sp-button{background-color:transparent;color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);--button-width:50%;font-family:var(--nylas-font-family);font-size:16px;font-weight:600;border:none;height:48px;padding:14px}@media screen and (max-width: 768px){sp-button{--button-width:100%}}sp-button:hover,sp-button:focus{background-color:var(--nylas-base-100);color:var(--nylas-primary);border-radius:var(--nylas-border-radius-2x)}sp-button:active{background-color:var(--nylas-base-200);color:var(--nylas-base-800)}sp-button.back{width:var(--button-width);background-color:transparent;color:var(--nylas-base-700);outline:1px solid var(--nylas-base-300)}sp-button.back:hover,sp-button.back:focus{outline-color:var(--nylas-primary)}sp-button.back:active{outline:2px solid var(--nylas-base-600)}sp-button.book{width:var(--button-width);background-color:var(--nylas-primary);color:var(--nylas-base-0)}sp-button.book:hover,sp-button.book:focus{background-color:var(--nylas-base-600)}sp-button.book:active{background-color:var(--nylas-base-800)}.input-wrapper{width:100%;display:flex;flex-direction:column;align-items:flex-start;gap:4px;margin-bottom:1rem}.input-wrapper input::placeholder{color:var(--nylas-base-300)}.input-wrapper label,.input-wrapper input{font-family:var(--nylas-font-family)}.input-wrapper .help-text{margin:0;color:var(--nylas-error)}.button-wrapper{width:100%;align-items:flex-start;height:max-content;position:relative}sp-infield-button{--spectrum-infield-button-background-color:transparent;--spectrum-infield-button-background-color-hover:transparent;--spectrum-infield-button-background-color-active:transparent;--spectrum-infield-button-border-color:transparent;--spectrum-infield-button-border-width:1px;--spectrum-infield-button-border-radius:0;color:var(--nylas-base-600);background:transparent;border:none;outline:1px solid var(--nylas-base-300);border-radius:0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x) 0;height:52px;width:52px;display:flex;position:absolute;right:0;align-items:center;justify-content:center;cursor:pointer}sp-infield-button sp-icon-cross300{color:var(--nylas-base-600)}sp-infield-button.error{border-width:2px;border-color:var(--nylas-error)}input[type=text],input[type=email]{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%}input[type=text].error,input[type=email].error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}input[type=text].error::placeholder,input[type=email].error::placeholder{font-weight:400}input[type=text].guest-email,input[type=email].guest-email{color:var(--nylas-base-900);padding-right:52px}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
const NylasBookingForm = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.nameChanged = createEvent(this, "nameChanged", 7);
        this.emailChanged = createEvent(this, "emailChanged", 7);
        this.backButtonClicked = createEvent(this, "backButtonClicked", 7);
        this.detailsConfirmed = createEvent(this, "detailsConfirmed", 7);
        this.bookingFormError = createEvent(this, "bookingFormError", 7);
        this.handleGuestChange = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests[guestIndex] = email;
            this.guestEmails = [...guests];
        };
        this.handleGuestBlur = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            if (email === '') {
                this.guestEmailErrors[guestIndex] = 'Email is required';
                return;
            }
            if (!emailRegex.test(email)) {
                this.guestEmailErrors[guestIndex] = 'Enter a valid email address';
                return;
            }
            this.handleGuestChange(guestIndex, email);
        };
        this.addGuestButtonClickedHandler = () => {
            this.guestEmails = [...this.guestEmails, ''];
        };
        this.removeGuestButtonClickHandler = (e, guestIndex) => {
            e.preventDefault();
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests.splice(guestIndex, 1);
            this.guestEmails = [...guests];
        };
        this.handleBackButtonClicked = () => {
            this.backButtonClicked.emit();
        };
        this.bookButtonClickedHandler = async (e) => {
            e.preventDefault();
            debug('nylas-booking-form', 'bookButtonClickedHandler', this.bookingInfo);
            const name = this.name || this.bookingInfo?.primaryParticipant?.name;
            const email = this.email || this.bookingInfo?.primaryParticipant?.email;
            if (!name || name === '') {
                this.isNameValid = false;
                this.validationError.name = 'Name is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Name is required',
                });
                return;
            }
            if (!email || email === '') {
                this.isEmailValid = false;
                this.validationError.email = 'Email is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Email is required',
                });
                return;
            }
            if (!emailRegex.test(email)) {
                this.isEmailValid = false;
                this.validationError.email = 'Enter a valid email address';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Invalid email',
                });
                return;
            }
            let guests = [];
            if (this.guestEmails.length > 0) {
                let hasError = false;
                this.guestEmails.forEach((email, i) => {
                    if (email === '') {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Email is required' };
                    }
                    else if (!emailRegex.test(email)) {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: 'Enter a valid email address' };
                    }
                });
                if (hasError) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: 'Invalid guest email',
                    });
                    return;
                }
                guests = this.guestEmails.map((email) => ({ name: '', email: email.trim() }));
            }
            else if (this.bookingInfo?.guests) {
                guests = this.bookingInfo?.guests;
            }
            this.detailsConfirmed.emit({
                primaryParticipant: {
                    name: name,
                    email: email,
                },
                guests: guests,
                additionalFields: {
                    ...this.bookingInfo?.additionalFields,
                },
            });
        };
        this.isLoading = undefined;
        this.bookingInfo = undefined;
        this.eventInfo = undefined;
        this.name = '';
        this.email = '';
        this.guestEmails = [];
        this.guestEmailErrors = {};
        this.isNameValid = true;
        this.isEmailValid = true;
        this.validationError = { name: '', email: '' };
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() {
        debug('nylas-booking-form', 'componentWillLoad', this.bookingInfo);
        if (this.bookingInfo) {
            this.name = this.bookingInfo.primaryParticipant?.name;
            this.email = this.bookingInfo.primaryParticipant?.email;
        }
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue.primaryParticipant) {
            this.name = newValue.primaryParticipant.name;
            this.email = newValue.primaryParticipant.email;
        }
    }
    changeName(name) {
        this.isNameValid = true;
        this.validationError.name = '';
        this.name = name;
        this.nameChanged.emit(name);
    }
    changeEmail(email) {
        this.isEmailValid = true;
        this.validationError.email = '';
        this.email = email;
        this.emailChanged.emit(email);
    }
    resetGuestEmailError(guestIndex) {
        const errors = { ...this.guestEmailErrors };
        delete errors[guestIndex];
        this.guestEmailErrors = { ...errors };
    }
    render() {
        return (h(Host, { key: '018357db1ce7dbbeb11ebc236b869a3baf246c69' }, h("form", { key: '5f26a98903372d4c587df1d1045bcb240c4ee7cd', onSubmit: e => this.bookButtonClickedHandler(e), noValidate: true }, h("div", { key: '4ad84c89bb19933cb5d8403939104c38705ddfba', class: "nylas-booking-form" }, h("slot", { key: 'c594f51e9d8cbd40e1d42f9aa86baae536a9c7e7', name: "custom-booking-form" }, h("div", { key: 'fe026c1562cb85c773e31cec8a0a3574b3515e0c', class: "input-wrapper" }, h("label", { key: '27ecf20858dd3133ec4914970f7148720bc603ed', htmlFor: "name", class: { 'input-label': true, 'error': !this.isNameValid }, part: "nbf__input-label" }, "Name ", h("span", { key: '4a39ea8d7aa693f860c17aa28b2130ae49f31a1c', class: "required" }, "*")), h("input", { key: '69fb70d74fe3b3cd883ca7fc0a9f174b6f81936a', id: "name", type: "text", placeholder: "Enter your name", value: this.name, class: {
                input: true,
                error: !this.isNameValid,
            }, part: "nbf__input-textfield", onInput: (e) => this.changeName(e.target?.value) }), h("p", { key: 'e4be03fd299cbc94713e5561fb9ed69a78af200c', class: "help-text" }, this.validationError.name)), h("div", { key: '017e724bfd408c5bde7714ae8b2a941d4a1194d9', class: "input-wrapper" }, h("label", { key: 'ed19f30d50d5d2ae95bcbf567b5c888b7906463d', htmlFor: "email", class: { 'input-label': true, 'error': !this.isEmailValid }, part: "nbf__input-label" }, "Email ", h("span", { key: '9b3ab493851edfcc407a38fad0994da171ac9976', class: "required" }, "*")), h("input", { key: '768690b3cc350537be1fa39cc7a295f688c1d91d', id: "email", type: "email", placeholder: "Enter your email", value: this.email, class: {
                input: true,
                error: !this.isEmailValid,
            }, part: "nbf__input-textfield", onInput: (e) => this.changeEmail(e.target?.value) }), h("p", { key: '24a39d859e700d000a363fe8df2f000365542fb0', class: "help-text" }, this.validationError.email)))), h("div", { key: '40b4b99dcf471afb8079d49fb9a0efe6bb7e406c', class: "cta" }, h("sp-button", { key: 'ae6bc3f620953f355184c7aef3ce692c2509c81d', treatment: "outline", variant: "secondary", class: 'back', part: "nbf__button-outline", onClick: this.handleBackButtonClicked }, h("slot", { key: 'e5a10ff0978756f7c3f8751a7aca6e3281f5046b', name: "booking-form-back-label" }, "Back")), h("sp-button", { key: '3aa5fe99000d52ef64db4191950109caeb526878', variant: "primary", class: 'book', part: "nbf__button-primary", type: "submit" }, this.isLoading && h("loading-icon", { slot: "icon" }), h("slot", { key: '83c5332efd5eb82617dc0a0f5275950431d95c26', name: "booking-form-book-label" }, "Book now"))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "bookingInfo": ["bookingInfoChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-booking-form',
        stateToProps: new Map([
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.eventInfo', 'eventInfo'],
        ]),
        eventToProps: {
            backButtonClicked: async (_event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.toggleAdditionalData(false);
            },
            nameChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantName(event.detail);
            },
            emailChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantEmail(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingForm.prototype, "render", null);
NylasBookingForm.style = nylasBookingFormCss;

export { NylasBookingForm as nylas_booking_form };

//# sourceMappingURL=nylas-booking-form.entry.js.map