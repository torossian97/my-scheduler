{"version":3,"names":["NylasConnector","constructor","router","nylasAuth","nylasAuthStore","nylasMailboxStore","nylasSchedulerStore","nylasSchedulerConfigStore","schedulerAPIURL","this","init","debug","authStore","mailboxStore","schedulerStore","schedulerConfigStore","auth","_authConnector","NylasAuthConnector","threads","_threadConnector","NylasThreadsConnector","messages","_messageConnector","NylasMessagesConnector","folders","_foldersConnector","NylasFoldersConnector","scheduler","_schedulerAPIConnector","NylaSchedulerAPIConnector","getAuth","resetStores","reset","logout","nylasProviderCss","NylasProviderStyle0","NylasProvider","handleAuthChange","async","isAuthenticated","loggedIn","emit","host","loggedOut","connectedCallback","componentWillLoad","stores","CreateNylasAuthStore","mailbox","CreateNylasMailboxStore","CreateNylasSchedulerStore","schedulerConfig","CreateNylasSchedulerConfigStore","baseProvider","NylasBaseProvider","automaticComponentRegistration","eventOverrides","HashRouter","NylasAuth","apiUri","elementsApiUri","storageType","clientId","defaultScopes","redirectURI","authConfig","getStore","Error","nylasConnector","initEvent","defaultPrevented","validateSession","state","componentDidLoad","onChange","componentDisconnected","registerComponentHandler","event","registerComponent","detail","unregisterComponentHandler","unregisterComponent","getNylasAuth","getNylasConnector","getMailboxStore","getAuthStore","getNylasSchedulerStore","getNylasSchedulerConfigStore","render","h","Host","key"],"sources":["src/connector/nylas-connector/index.ts","src/components/nylas-provider/nylas-provider.css?tag=nylas-provider&encapsulation=shadow","src/components/nylas-provider/nylas-provider.tsx"],"sourcesContent":["import { RouterInterface } from '@/routers/router-interface';\nimport { NylasAuthStoreType } from '@/stores/auth-store';\nimport { NylasMailboxStoreType } from '@/stores/mailbox-store';\nimport { NylasSchedulerConfigStoreType } from '@/stores/scheduler-config-store';\nimport { NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { debug } from '@/utils/utils';\nimport type { NylasAuthType } from '@nylas/core';\nimport { NylasConnectorInterface } from '../connector-interface';\nimport { NylasAuthConnector } from '../shared/api/auth';\nimport { NylasFoldersConnector } from '../shared/api/folders';\nimport { NylasMessagesConnector } from '../shared/api/messages';\nimport { NylaSchedulerAPIConnector } from '../shared/api/scheduler';\nimport { NylasThreadsConnector } from '../shared/api/threads';\n/**\n * Base class for the Nylas connector.\n */\nexport class NylasConnector implements NylasConnectorInterface {\n  public router: RouterInterface;\n  public nylasAuth: NylasAuthType;\n  public nylasAuthStore: NylasAuthStoreType;\n  public nylasMailboxStore: NylasMailboxStoreType;\n  public nylasSchedulerStore: NylasSchedulerStoreType;\n  public nylasSchedulerConfigStore: NylasSchedulerConfigStoreType;\n  public schedulerAPIURL: string;\n\n  private _authConnector: NylasAuthConnector | undefined;\n  private _threadConnector: NylasThreadsConnector | undefined;\n  private _messageConnector: NylasMessagesConnector | undefined;\n  private _foldersConnector: NylasFoldersConnector | undefined;\n  private _schedulerAPIConnector: NylaSchedulerAPIConnector | undefined;\n\n  constructor(\n    router: RouterInterface,\n    nylasAuth: NylasAuthType,\n    nylasAuthStore: NylasAuthStoreType,\n    nylasMailboxStore: NylasMailboxStoreType,\n    nylasSchedulerStore: NylasSchedulerStoreType,\n    nylasSchedulerConfigStore: NylasSchedulerConfigStoreType,\n    schedulerAPIURL: string = 'https://api.us.nylas.com',\n  ) {\n    this.router = router;\n    this.schedulerAPIURL = schedulerAPIURL;\n    this.nylasAuth = nylasAuth;\n    this.nylasAuthStore = nylasAuthStore;\n    this.nylasMailboxStore = nylasMailboxStore;\n    this.nylasSchedulerStore = nylasSchedulerStore;\n    this.nylasSchedulerConfigStore = nylasSchedulerConfigStore;\n  }\n\n  public init() {\n    debug('NylasConnector init');\n  }\n\n  public get authStore() {\n    return this.nylasAuthStore;\n  }\n\n  public get mailboxStore() {\n    return this.nylasMailboxStore;\n  }\n\n  public get schedulerStore() {\n    return this.nylasSchedulerStore;\n  }\n\n  public get schedulerConfigStore() {\n    return this.nylasSchedulerConfigStore;\n  }\n\n  public get auth() {\n    if (this._authConnector) {\n      return this._authConnector;\n    }\n    this._authConnector = new NylasAuthConnector(this.nylasAuth, this.nylasAuthStore);\n    return this._authConnector;\n  }\n\n  public get threads() {\n    if (this._threadConnector) {\n      return this._threadConnector;\n    }\n    this._threadConnector = new NylasThreadsConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore, this.router);\n    return this._threadConnector;\n  }\n\n  public get messages() {\n    if (this._messageConnector) {\n      return this._messageConnector;\n    }\n    this._messageConnector = new NylasMessagesConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);\n    return this._messageConnector;\n  }\n\n  public get folders() {\n    if (this._foldersConnector) {\n      return this._foldersConnector;\n    }\n    this._foldersConnector = new NylasFoldersConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);\n    return this._foldersConnector;\n  }\n\n  public get scheduler() {\n    if (this._schedulerAPIConnector) {\n      return this._schedulerAPIConnector;\n    }\n    this._schedulerAPIConnector = new NylaSchedulerAPIConnector({\n      schedulerAPIURL: this.schedulerAPIURL,\n      schedulerStore: this.schedulerStore,\n    });\n    return this._schedulerAPIConnector;\n  }\n\n  public getAuth() {\n    return this.nylasAuth;\n  }\n\n  public resetStores() {\n    this.nylasAuthStore.reset();\n    this.nylasMailboxStore.reset();\n  }\n\n  public async logout() {\n    await this.nylasAuth.logout();\n    this.resetStores();\n  }\n}\n\nexport type PublicMethods<T> = {\n  [K in keyof T]: T[K] extends Function ? (string extends K ? never : K) : never;\n}[keyof T];\n\nexport type NylasConnectorPublicMethods = PublicMethods<NylasConnector>;\n",":host {\n  display: contents;\n}\n","import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport { NylasConnector } from '@/connector/nylas-connector';\nimport { HashRouter } from '@/routers/hash-router';\nimport { CreateNylasAuthStore, NylasAuthStoreType } from '@/stores/auth-store';\nimport { CreateNylasMailboxStore, NylasMailboxStoreType } from '@/stores/mailbox-store';\nimport { CreateNylasSchedulerStore, NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport type { AuthConfig, NylasAuthType } from '@nylas/core';\nimport { NylasAuth } from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, h } from '@stencil/core';\nimport type { EventOverride } from '@/common/component-types';\nimport { debug } from '@/utils/utils';\nimport { CreateNylasSchedulerConfigStore, NylasSchedulerConfigStoreType } from '@/stores/scheduler-config-store';\n\n/**\n * The Nylas Provider component.\n * This component is used to manage the Nylas Provider.\n * It is used to manage the Nylas Auth instance, the Nylas Connector instance,\n * and the Nylas Store instance.\n */\n@Component({\n  tag: 'nylas-provider',\n  styleUrl: 'nylas-provider.css',\n  shadow: true,\n})\nexport class NylasProvider {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: {\n    auth: NylasAuthStoreType;\n    mailbox: NylasMailboxStoreType;\n    scheduler: NylasSchedulerStoreType;\n    schedulerConfig: NylasSchedulerConfigStoreType;\n  };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Auth instance.\n   * Used to manage all things authentication with Nylas.\n   */\n  private nylasAuth?: NylasAuthType;\n\n  /**\n   * The Nylas Mailbox Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasConnector?: NylasConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasProviderElement;\n\n  /**\n   * The Nylas Auth configuration.\n   * Used to manage all things authentication with Nylas.\n   */\n  @Prop({ attribute: 'auth-config' }) readonly authConfig?: AuthConfig;\n\n  /**\n   * This provides a way to override the default event handlers.\n   */\n  @Prop() eventOverrides: EventOverride<Exclude<typeof this.nylasConnector, undefined>> = {};\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @Prop() automaticComponentRegistration: boolean = true;\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) init!: EventEmitter<HTMLNylasProviderElement>;\n\n  /**\n   * This event is fired when the the NyalsAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) loggedIn!: EventEmitter<HTMLNylasProviderElement>;\n\n  /**\n   * This event is fired when the the NyalsAuth isAuthenticated state changes\n   * to true.\n   */\n  @Event({ cancelable: true }) loggedOut!: EventEmitter<HTMLNylasProviderElement>;\n\n  connectedCallback() {\n    debug('[nylas-provider] connectedCallback');\n  }\n\n  async componentWillLoad() {\n    debug('[nylas-provider] componentWillLoad');\n\n    this.stores = {\n      auth: CreateNylasAuthStore(),\n      mailbox: CreateNylasMailboxStore(),\n      scheduler: CreateNylasSchedulerStore(),\n      schedulerConfig: CreateNylasSchedulerConfigStore(),\n    };\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    const router = new HashRouter();\n\n    /**\n     * Create the NylasAuth instance.\n     * This is used to manage all things authentication with Nylas.\n     */\n    this.nylasAuth = NylasAuth({\n      apiUri: 'https://api.us.nylas.com',\n      elementsApiUri: 'https://elements.us.nylas.com',\n      storageType: 'indexeddb',\n      clientId: 'YOUR_CLIENT_ID',\n      defaultScopes: [],\n      redirectURI: '/',\n      ...this.authConfig,\n    });\n\n    const nylasMailboxStore = this.baseProvider?.getStore('mailbox');\n    if (!nylasMailboxStore) {\n      throw new Error('The mailbox store is not set');\n    }\n\n    const nylasAuthStore = this.baseProvider?.getStore('auth');\n    if (!nylasAuthStore) {\n      throw new Error('The auth store is not set');\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    if (!nylasSchedulerStore) {\n      throw new Error('The scheduler store is not set');\n    }\n\n    const nylasSchedulerConfigStore = this.baseProvider?.getStore('schedulerConfig');\n    if (!nylasSchedulerConfigStore) {\n      throw new Error('The scheduler config store is not set');\n    }\n\n    this.nylasConnector = new NylasConnector(router, this.nylasAuth, nylasAuthStore, nylasMailboxStore, nylasSchedulerStore, nylasSchedulerConfigStore);\n\n    const initEvent = this.init.emit(this.host);\n    if (!initEvent.defaultPrevented) {\n      /**\n       * By default, on init, we will validate the session.\n       * This will check if the user is logged in and if the session is still valid.\n       * If the session is not valid, the user will be logged out.\n       */\n      await this.nylasConnector?.auth.validateSession();\n    }\n\n    /**\n     * Listen for changes in the NylasAuth isAuthenticated state.\n     * This is used to fire the loggedIn and loggedOut events.\n     */\n    this.handleAuthChange(nylasAuthStore.state.isAuthenticated);\n\n    this.baseProvider?.componentWillLoad(this.nylasConnector);\n  }\n\n  componentDidLoad() {\n    const nylasAuthStore = this.baseProvider?.getStore('auth');\n    nylasAuthStore?.onChange('isAuthenticated', this.handleAuthChange);\n\n    this.baseProvider?.componentDidLoad();\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This method is used to handle changes in the NylasAuth isAuthenticated state\n   * @param isAuthenticated isAuthenticated state\n   * @returns void\n   */\n  private handleAuthChange = async (isAuthenticated: boolean) => {\n    if (isAuthenticated) {\n      this.loggedIn.emit(this.host);\n    } else {\n      this.loggedOut.emit(this.host);\n    }\n  };\n\n  /**\n   * This method is used to retrieve the NylasAuth instance\n   * @returns The NylasAuth instance\n   */\n  @Method()\n  async getNylasAuth(): Promise<NylasAuthType | undefined> {\n    return this.nylasAuth;\n  }\n\n  /**\n   * This method is used to retrieve the NylasConnector instance\n   * @returns The NylasConnector instance\n   */\n  @Method()\n  async getNylasConnector() {\n    return this.nylasConnector;\n  }\n\n  /**\n   * This method is used to retrieve the mailboxStore instance\n   * @returns The mailboxStore instance\n   */\n  @Method()\n  async getMailboxStore(): Promise<NylasMailboxStoreType | undefined> {\n    return this.baseProvider?.getStore('mailbox');\n  }\n\n  /**\n   * This method is used to retrieve the authStore instance\n   * @returns The authStore instance\n   */\n  @Method()\n  async getAuthStore(): Promise<NylasAuthStoreType | undefined> {\n    return this.baseProvider?.getStore('auth');\n  }\n\n  /**\n   * This method is used to retrieve the NylasScheduler instance\n   * @returns The NylasScheduler instance\n   */\n  @Method()\n  async getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined> {\n    return this.baseProvider?.getStore('scheduler');\n  }\n\n  /**\n   * This method is used to retrieve the NylasSchedulerConfig instance\n   * @returns The NylasSchedulerConfig instance\n   */\n  @Method()\n  async getNylasSchedulerConfigStore(): Promise<NylasSchedulerConfigStoreType | undefined> {\n    return this.baseProvider?.getStore('schedulerConfig');\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}