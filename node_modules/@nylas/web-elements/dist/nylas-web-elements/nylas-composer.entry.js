import { r as registerInstance, i as createEvent, h, a as Host, e as getElement } from './index-8362ce5c.js';
import { a as debug } from './utils-157014b4.js';
import './_commonjsHelpers-7c16df4a.js';

const nylasComposerCss = ":host{display:grid;color:var(--nylas-color-primary-900)}.editor{position:relative;display:block;max-height:300px;overflow:auto;padding:1rem;border:1px solid var(--nylas-color-primary-300)}.editor blockquote{visibility:hidden;overflow:hidden;position:relative;transition:height 0.3s ease;margin:0}.editor blockquote::before{content:\"...\";visibility:visible;opacity:1;position:absolute;top:0;left:0;background-color:var(--nylas-color-primary-300);width:20px;text-align:center;color:var(--nylas-color-primary-800);vertical-align:middle;display:flex;justify-content:center;align-items:center;align-self:center;cursor:pointer}.editor .collapsed{height:20px}.editor .expanded{visibility:visible;opacity:1;height:auto;margin:0px 0px 0px 0.8ex;border-left:1px solid var(--nylas-color-primary-300);padding-left:1rem}.editor .expanded::before{display:none;}.buttons{display:flex;margin-top:1rem;justify-content:space-between}.buttons sp-button{border-radius:var(--nylas-border-radius);background-color:var(--nylas-color-primary-400);color:var(--nylas-color-primary-900);fill:var(--nylas-color-primary-900)}.buttons sp-button:hover{background-color:var(--nylas-color-primary-500)}.buttons sp-button:disabled{background-color:var(--nylas-color-primary-200);color:var(--nylas-color-primary-600);cursor:not-allowed}.buttons sp-button chevron-icon{display:inline-block}.buttons .close{justify-self:end}.toolbar{position:absolute;display:none;background-color:var(--nylas-color-primary-200);border-radius:var(--nylas-border-radius);z-index:1}.toolbar sp-button{border:0}";

const NylasComposer = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.close = createEvent(this, "close", 7);
        this.send = createEvent(this, "send", 7);
        this.closeComposer = (event) => {
            this.close.emit(event);
        };
        this.sendComposer = (event) => {
            if (!this.editorEl) {
                debug('no editor element');
                return;
            }
            const messageBody = this.editorEl.querySelector('.message-body');
            if (!messageBody) {
                debug('no message body');
                return;
            }
            if (this.message) {
                this.send.emit({
                    message: this.message,
                    replyBody: messageBody.querySelector('.message-body')?.innerHTML || '',
                });
                this.close.emit(event);
                this.editorEl.innerHTML = '';
            }
        };
        this.message = undefined;
        this.viewEmailElement = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() {
        if (this.editorEl) {
            this.editorEl.innerHTML = '';
        }
    }
    componentWillLoad() { }
    async componentDidLoad() {
        if (this.message) {
            this.watchBody(this.message);
        }
        if (!this.editorEl) {
            debug('[connectedCallback] no editor element');
            return;
        }
        if (!this.toolbarEl) {
            debug('[connectedCallback] no toolbar element');
            return;
        }
        const editorEl = this.editorEl;
        const toolbarEl = this.toolbarEl;
        editorEl.addEventListener('mouseup', _ => {
            const selection = this.host.shadowRoot?.getSelection();
            if (!selection) {
                debug('no selection');
                return;
            }
            const range = selection.getRangeAt(0);
            const text = selection.toString();
            if (!text) {
                toolbarEl.style.display = 'none';
                return;
            }
            const messageBody = editorEl.querySelector('.message-body');
            if (!messageBody) {
                debug('no message body');
                return;
            }
            const foundNode = range.commonAncestorContainer;
            const foundElement = foundNode.parentElement;
            if (!foundElement) {
                return;
            }
            const messageBodyRect = messageBody.getBoundingClientRect();
            debug('messageBodyRect', { messageBodyRect });
            const foundRect = foundElement.getBoundingClientRect();
            debug('foundRect', { foundRect });
            const textNode = foundElement.childNodes[0];
            const textContent = textNode.textContent || '';
            const textPosition = textContent.indexOf(text);
            const fontSize = window.getComputedStyle(foundElement).fontSize;
            const fontSizeNumber = parseInt(fontSize.replace('px', ''), 10);
            const top = foundRect.top - messageBodyRect.top - toolbarEl.clientHeight;
            const left = textPosition * (1 / fontSizeNumber) * 100;
            toolbarEl.style.top = `${top}px`;
            toolbarEl.style.left = `${left}px`;
            toolbarEl.style.display = 'block';
        });
    }
    watchBody(newMessage) {
        if (!this.editorEl) {
            debug('no editor element');
            return;
        }
        this.editorEl.querySelectorAll('.message-body').forEach(el => el.remove());
        const messageBody = document.createElement('div');
        messageBody.classList.add('message-body');
        const emptyParagraph = document.createElement('p');
        emptyParagraph.innerHTML = '&nbsp;';
        messageBody.appendChild(emptyParagraph);
        const br = document.createElement('br');
        messageBody.appendChild(br);
        const replyText = document.createElement('div');
        replyText.classList.add('reply-text');
        replyText.innerText = `On ${new Date(newMessage.date * 1000).toLocaleDateString(undefined, { dateStyle: 'full' })} <${newMessage.from
            ?.map(from => from.name || from.email)
            .join(', ')}> wrote:`;
        messageBody.appendChild(replyText);
        if (newMessage.body) {
            const replyElement = document.createElement('html');
            replyElement.innerHTML = newMessage.body;
            const replyContainer = document.createElement('blockquote');
            replyContainer.classList.add('collapsed');
            replyContainer.classList.add('gmail_quote');
            replyContainer.innerHTML = replyElement.innerHTML;
            messageBody.appendChild(replyContainer);
            debug('replyContainer', { replyContainer });
        }
        this.editorEl.appendChild(messageBody);
        this.editorEl.querySelectorAll('blockquote.collapsed').forEach(blockquote => {
            blockquote.addEventListener('click', function (event) {
                event.preventDefault();
                const el = event.target;
                el.classList.remove('collapsed');
                el.classList.add('expanded');
            }, { once: true });
        });
        this.editorEl.focus();
    }
    render() {
        return (h(Host, { key: '8d7f9c145099757c2a8dc48f1d2a223831f82cda' }, h("sp-theme", { key: 'e92e457e86701838f55d97b3f2c1c0f70f14bf59', scale: "medium", color: "dark" }, h("div", { key: '50eba2b6ee0c84d8eeb392385872604b74b11025', class: "editor", contentEditable: true, ref: r => (this.editorEl = r) }, h("div", { key: '38bdd2ec58e62699e2c604b1b2c586cb5ecf105a', class: "toolbar", ref: r => (this.toolbarEl = r), contentEditable: false }, h("sp-button", { key: '6415e5f9910a2d9798e7c85162329f359e500aeb', quiet: true, onClick: () => document.execCommand('bold') }, h("div", { key: 'e03cfe0f5736836f64aa350165fa519508e212f7', slot: "icon" }, h("bold-icon", { key: '1ad03230cff2f0843d6da22153716c3818ed04f7' })), h("div", { key: 'd90c50aff88b9ac7774d6792b91ea3ced21f4419', slot: "label" }, "Bold")), h("sp-button", { key: '466621fcdf2e8e1e85b613bba82b948ed2177a88', quiet: true, onClick: () => document.execCommand('underline') }, h("div", { key: '6be0737cf685b02f3ee8ef7c34fd18674793af00', slot: "icon" }, h("underline-icon", { key: '278b1b79d3aec25ab2c2181c3e5c631063b04e29' })), h("div", { key: '169d3039815082e208eb476b4490181f7eb54ee6', slot: "label" }, "Underline")), h("sp-button", { key: '92c20b2d03b709f08c63af3a1e88b10e407243d7', quiet: true, onClick: () => document.execCommand('italic') }, h("div", { key: '67eb3d5b5a2118d90bfb81c7b51d52c41b5ab2a2', slot: "icon" }, h("italic-icon", { key: '35ac96f9ff3f3f0c38c7e486092f42dc9451eb63' })), h("div", { key: 'f29fe84363cca6e178a3651a1c8e56929ebb3e32', slot: "label" }, "Italic")))), h("div", { key: '3d89b191642ab291fc338ffd66be16fe999950b1', class: 'buttons' }, h("sp-button", { key: 'f78c122acf4c69c788d411d2dcfd49649c99919e', onClick: this.sendComposer, class: "send" }, "Send"), h("sp-button", { key: 'b46873c911cb796e9af22eb7d19bf6e1cd2cd1be', onClick: this.closeComposer, class: "close" }, "Close")))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "message": ["watchBody"]
    }; }
};
NylasComposer.style = nylasComposerCss;

export { NylasComposer as nylas_composer };

//# sourceMappingURL=nylas-composer.entry.js.map