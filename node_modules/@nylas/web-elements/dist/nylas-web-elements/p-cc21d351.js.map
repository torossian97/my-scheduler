{"version":3,"names":["SizeCache","constructor","config","this","_map","Map","_roundAverageSize","totalSize","roundAverageSize","set","index","value","prev","get","averageSize","size","average","Math","round","getSize","clear","dim1","direction","BaseLayout","_getDefaultConfig","hostSink","_latestCoords","left","top","_direction","_viewportSize","width","height","totalScrollSize","offsetWithinScroller","_pendingReflow","_pendingLayoutUpdate","_pin","_firstVisible","_lastVisible","_physicalMin","_physicalMax","_first","_last","_sizeDim","_secondarySizeDim","_positionDim","_secondaryPositionDim","_scrollPosition","_scrollError","_items","_scrollSize","_overhang","_hostSink","Promise","resolve","then","Object","assign","items","_setItems","_scheduleReflow","dir","_triggerReflow","viewportSize","dims","_viewDim1","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","coords","oldPos","change","abs","reflowIfNeeded","force","_reflow","pin","options","block","max","min","length","_clampScrollPosition","val","unpin","_sendUnpinnedMessage","_updateLayout","_updateScrollSize","_setPositionFromPin","_getActiveItems","_updateVisibleIndices","_sendStateChangedMessage","lastScrollPosition","_calculateScrollIntoViewPosition","itemStartPosition","_getItemPosition","scrollPosition","itemSize","_getItemSize","itemEndPosition","currentScrollPosition","getScrollIntoViewCoordinates","type","_sendVisibilityChangedMessage","firstVisible","lastVisible","childPositions","idx","message","scrollSize","range","first","last","scrollError","_num","emit","flow","FlowLayout","leadingMargin","trailingMargin","offset","collapseMargins","a","b","m","sort","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","update","metrics","marginsToUpdate","Set","keys","forEach","key","k","Number","add","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","getChildSize","getMarginSize","super","arguments","_itemSize","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","measureChildren","updateItemSizes","sizes","_getPhysicalItem","_getSize","item","_getAverageSize","_estimatePosition","c","delta","refItem","pos","_getPosition","_calculateAnchor","lower","upper","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","lastMin","lastMax","candidateIdx","cMax","Infinity","candidate","_clearItems","_getItems","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","margin","extentErr","_calculateError","_resetReflowState","_viewDim2Changed"],"sources":["../../node_modules/.pnpm/@lit-labs+virtualizer@2.0.12/node_modules/@lit-labs/virtualizer/layouts/shared/SizeCache.js","../../node_modules/.pnpm/@lit-labs+virtualizer@2.0.12/node_modules/@lit-labs/virtualizer/layouts/shared/BaseLayout.js","../../node_modules/.pnpm/@lit-labs+virtualizer@2.0.12/node_modules/@lit-labs/virtualizer/layouts/flow.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport class SizeCache {\n    constructor(config) {\n        this._map = new Map();\n        this._roundAverageSize = false;\n        this.totalSize = 0;\n        if (config?.roundAverageSize === true) {\n            this._roundAverageSize = true;\n        }\n    }\n    set(index, value) {\n        const prev = this._map.get(index) || 0;\n        this._map.set(index, value);\n        this.totalSize += value - prev;\n    }\n    get averageSize() {\n        if (this._map.size > 0) {\n            const average = this.totalSize / this._map.size;\n            return this._roundAverageSize ? Math.round(average) : average;\n        }\n        return 0;\n    }\n    getSize(index) {\n        return this._map.get(index);\n    }\n    clear() {\n        this._map.clear();\n        this.totalSize = 0;\n    }\n}\n//# sourceMappingURL=SizeCache.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport function dim1(direction) {\n    return direction === 'horizontal' ? 'width' : 'height';\n}\nexport function dim2(direction) {\n    return direction === 'horizontal' ? 'height' : 'width';\n}\nexport function pos1(direction) {\n    return direction === 'horizontal' ? 'left' : 'top';\n}\nexport function pos2(direction) {\n    return direction === 'horizontal' ? 'top' : 'left';\n}\nexport class BaseLayout {\n    _getDefaultConfig() {\n        return {\n            direction: 'vertical',\n        };\n    }\n    constructor(hostSink, config) {\n        /**\n         * The last set viewport scroll position.\n         */\n        this._latestCoords = { left: 0, top: 0 };\n        /**\n         * Scrolling direction.\n         */\n        this._direction = null;\n        /**\n         * Dimensions of the viewport.\n         */\n        this._viewportSize = { width: 0, height: 0 };\n        this.totalScrollSize = { width: 0, height: 0 };\n        this.offsetWithinScroller = { left: 0, top: 0 };\n        /**\n         * Flag for debouncing asynchronous reflow requests.\n         */\n        this._pendingReflow = false;\n        this._pendingLayoutUpdate = false;\n        this._pin = null;\n        /**\n         * The index of the first item intersecting the viewport.\n         */\n        this._firstVisible = 0;\n        /**\n         * The index of the last item intersecting the viewport.\n         */\n        this._lastVisible = 0;\n        /**\n         * Pixel offset in the scroll direction of the first child.\n         */\n        this._physicalMin = 0;\n        /**\n         * Pixel offset in the scroll direction of the last child.\n         */\n        this._physicalMax = 0;\n        /**\n         * Index of the first child.\n         */\n        this._first = -1;\n        /**\n         * Index of the last child.\n         */\n        this._last = -1;\n        /**\n         * Length in the scrolling direction.\n         */\n        this._sizeDim = 'height';\n        /**\n         * Length in the non-scrolling direction.\n         */\n        this._secondarySizeDim = 'width';\n        /**\n         * Position in the scrolling direction.\n         */\n        this._positionDim = 'top';\n        /**\n         * Position in the non-scrolling direction.\n         */\n        this._secondaryPositionDim = 'left';\n        /**\n         * Current scroll offset in pixels.\n         */\n        this._scrollPosition = 0;\n        /**\n         * Difference between current scroll offset and scroll offset calculated due\n         * to a reflow.\n         */\n        this._scrollError = 0;\n        /**\n         * Total number of items that could possibly be displayed. Used to help\n         * calculate the scroll size.\n         */\n        this._items = [];\n        /**\n         * The total (estimated) length of all items in the scrolling direction.\n         */\n        this._scrollSize = 1;\n        /**\n         * Number of pixels beyond the viewport to still include\n         * in the active range of items.\n         */\n        // TODO (graynorton): Probably want to make this something we calculate based\n        // on viewport size, item size, other factors, possibly still with a dial of some kind\n        this._overhang = 1000;\n        this._hostSink = hostSink;\n        // Delay setting config so that subclasses do setup work first\n        Promise.resolve().then(() => (this.config = config || this._getDefaultConfig()));\n    }\n    set config(config) {\n        Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n    }\n    get config() {\n        return {\n            direction: this.direction,\n        };\n    }\n    /**\n     * Maximum index of children + 1, to help estimate total height of the scroll\n     * space.\n     */\n    get items() {\n        return this._items;\n    }\n    set items(items) {\n        this._setItems(items);\n    }\n    _setItems(items) {\n        if (items !== this._items) {\n            this._items = items;\n            this._scheduleReflow();\n        }\n    }\n    /**\n     * Primary scrolling direction.\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(dir) {\n        // Force it to be either horizontal or vertical.\n        dir = dir === 'horizontal' ? dir : 'vertical';\n        if (dir !== this._direction) {\n            this._direction = dir;\n            this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n            this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n            this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n            this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n            this._triggerReflow();\n        }\n    }\n    /**\n     * Height and width of the viewport.\n     */\n    get viewportSize() {\n        return this._viewportSize;\n    }\n    set viewportSize(dims) {\n        const { _viewDim1, _viewDim2 } = this;\n        Object.assign(this._viewportSize, dims);\n        if (_viewDim2 !== this._viewDim2) {\n            // this._viewDim2Changed();\n            this._scheduleLayoutUpdate();\n        }\n        else if (_viewDim1 !== this._viewDim1) {\n            this._checkThresholds();\n        }\n    }\n    /**\n     * Scroll offset of the viewport.\n     */\n    get viewportScroll() {\n        return this._latestCoords;\n    }\n    set viewportScroll(coords) {\n        Object.assign(this._latestCoords, coords);\n        const oldPos = this._scrollPosition;\n        this._scrollPosition = this._latestCoords[this._positionDim];\n        const change = Math.abs(oldPos - this._scrollPosition);\n        if (change >= 1) {\n            this._checkThresholds();\n        }\n    }\n    /**\n     * Perform a reflow if one has been scheduled.\n     */\n    reflowIfNeeded(force = false) {\n        if (force || this._pendingReflow) {\n            this._pendingReflow = false;\n            this._reflow();\n        }\n    }\n    set pin(options) {\n        this._pin = options;\n        this._triggerReflow();\n    }\n    get pin() {\n        if (this._pin !== null) {\n            const { index, block } = this._pin;\n            return {\n                index: Math.max(0, Math.min(index, this.items.length - 1)),\n                block,\n            };\n        }\n        return null;\n    }\n    _clampScrollPosition(val) {\n        return Math.max(-this.offsetWithinScroller[this._positionDim], Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1));\n    }\n    unpin() {\n        if (this._pin !== null) {\n            this._sendUnpinnedMessage();\n            this._pin = null;\n        }\n    }\n    _updateLayout() {\n        // Override\n    }\n    // protected _viewDim2Changed(): void {\n    //   this._scheduleLayoutUpdate();\n    // }\n    /**\n     * The height or width of the viewport, whichever corresponds to the scrolling direction.\n     */\n    get _viewDim1() {\n        return this._viewportSize[this._sizeDim];\n    }\n    /**\n     * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n     */\n    get _viewDim2() {\n        return this._viewportSize[this._secondarySizeDim];\n    }\n    _scheduleReflow() {\n        this._pendingReflow = true;\n    }\n    _scheduleLayoutUpdate() {\n        this._pendingLayoutUpdate = true;\n        this._scheduleReflow();\n    }\n    // For triggering a reflow based on incoming changes to\n    // the layout config.\n    _triggerReflow() {\n        this._scheduleLayoutUpdate();\n        // TODO graynorton@: reflowIfNeeded() isn't really supposed\n        // to be called internally. Address in larger cleanup\n        // of virtualizer / layout interaction pattern.\n        // this.reflowIfNeeded(true);\n        Promise.resolve().then(() => this.reflowIfNeeded());\n    }\n    _reflow() {\n        if (this._pendingLayoutUpdate) {\n            this._updateLayout();\n            this._pendingLayoutUpdate = false;\n        }\n        this._updateScrollSize();\n        this._setPositionFromPin();\n        this._getActiveItems();\n        this._updateVisibleIndices();\n        this._sendStateChangedMessage();\n    }\n    /**\n     * If we are supposed to be pinned to a particular\n     * item or set of coordinates, we set `_scrollPosition`\n     * accordingly and adjust `_scrollError` as needed\n     * so that the virtualizer can keep the scroll\n     * position in the DOM in sync\n     */\n    _setPositionFromPin() {\n        if (this.pin !== null) {\n            const lastScrollPosition = this._scrollPosition;\n            const { index, block } = this.pin;\n            this._scrollPosition =\n                this._calculateScrollIntoViewPosition({\n                    index,\n                    block: block || 'start',\n                }) - this.offsetWithinScroller[this._positionDim];\n            this._scrollError = lastScrollPosition - this._scrollPosition;\n        }\n    }\n    /**\n     * Calculate the coordinates to scroll to, given\n     * a request to scroll to the element at a specific\n     * index.\n     *\n     * Supports the same positioning options (`start`,\n     * `center`, `end`, `nearest`) as the standard\n     * `Element.scrollIntoView()` method, but currently\n     * only considers the provided value in the `block`\n     * dimension, since we don't yet have any layouts\n     * that support virtualization in two dimensions.\n     */\n    _calculateScrollIntoViewPosition(options) {\n        const { block } = options;\n        const index = Math.min(this.items.length, Math.max(0, options.index));\n        const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n        let scrollPosition = itemStartPosition;\n        if (block !== 'start') {\n            const itemSize = this._getItemSize(index)[this._sizeDim];\n            if (block === 'center') {\n                scrollPosition =\n                    itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n            }\n            else {\n                const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n                if (block === 'end') {\n                    scrollPosition = itemEndPosition;\n                }\n                else {\n                    // block === 'nearest'\n                    const currentScrollPosition = this._scrollPosition;\n                    scrollPosition =\n                        Math.abs(currentScrollPosition - itemStartPosition) <\n                            Math.abs(currentScrollPosition - itemEndPosition)\n                            ? itemStartPosition\n                            : itemEndPosition;\n                }\n            }\n        }\n        scrollPosition += this.offsetWithinScroller[this._positionDim];\n        return this._clampScrollPosition(scrollPosition);\n    }\n    getScrollIntoViewCoordinates(options) {\n        return {\n            [this._positionDim]: this._calculateScrollIntoViewPosition(options),\n        };\n    }\n    _sendUnpinnedMessage() {\n        this._hostSink({\n            type: 'unpinned',\n        });\n    }\n    _sendVisibilityChangedMessage() {\n        this._hostSink({\n            type: 'visibilityChanged',\n            firstVisible: this._firstVisible,\n            lastVisible: this._lastVisible,\n        });\n    }\n    _sendStateChangedMessage() {\n        const childPositions = new Map();\n        if (this._first !== -1 && this._last !== -1) {\n            for (let idx = this._first; idx <= this._last; idx++) {\n                childPositions.set(idx, this._getItemPosition(idx));\n            }\n        }\n        const message = {\n            type: 'stateChanged',\n            scrollSize: {\n                [this._sizeDim]: this._scrollSize,\n                [this._secondarySizeDim]: null,\n            },\n            range: {\n                first: this._first,\n                last: this._last,\n                firstVisible: this._firstVisible,\n                lastVisible: this._lastVisible,\n            },\n            childPositions,\n        };\n        if (this._scrollError) {\n            message.scrollError = {\n                [this._positionDim]: this._scrollError,\n                [this._secondaryPositionDim]: 0,\n            };\n            this._scrollError = 0;\n        }\n        this._hostSink(message);\n    }\n    /**\n     * Number of items to display.\n     */\n    get _num() {\n        if (this._first === -1 || this._last === -1) {\n            return 0;\n        }\n        return this._last - this._first + 1;\n    }\n    _checkThresholds() {\n        if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n            this._scheduleReflow();\n        }\n        else {\n            const min = Math.max(0, this._scrollPosition - this._overhang);\n            const max = Math.min(this._scrollSize, this._scrollPosition + this._viewDim1 + this._overhang);\n            if (this._physicalMin > min || this._physicalMax < max) {\n                this._scheduleReflow();\n            }\n            else {\n                this._updateVisibleIndices({ emit: true });\n            }\n        }\n    }\n    /**\n     * Find the indices of the first and last items to intersect the viewport.\n     * Emit a visibleindiceschange event when either index changes.\n     */\n    _updateVisibleIndices(options) {\n        if (this._first === -1 || this._last === -1)\n            return;\n        let firstVisible = this._first;\n        while (firstVisible < this._last &&\n            Math.round(this._getItemPosition(firstVisible)[this._positionDim] +\n                this._getItemSize(firstVisible)[this._sizeDim]) <= Math.round(this._scrollPosition)) {\n            firstVisible++;\n        }\n        let lastVisible = this._last;\n        while (lastVisible > this._first &&\n            Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n                Math.round(this._scrollPosition + this._viewDim1)) {\n            lastVisible--;\n        }\n        if (firstVisible !== this._firstVisible ||\n            lastVisible !== this._lastVisible) {\n            this._firstVisible = firstVisible;\n            this._lastVisible = lastVisible;\n            if (options && options.emit) {\n                this._sendVisibilityChangedMessage();\n            }\n        }\n    }\n}\n//# sourceMappingURL=BaseLayout.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { SizeCache } from './shared/SizeCache.js';\nimport { BaseLayout, dim1 } from './shared/BaseLayout.js';\nexport const flow = (config) => Object.assign({\n    type: FlowLayout,\n}, config);\nfunction leadingMargin(direction) {\n    return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\nfunction trailingMargin(direction) {\n    return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\nfunction offset(direction) {\n    return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\nfunction collapseMargins(a, b) {\n    const m = [a, b].sort();\n    return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\nclass MetricsCache {\n    constructor() {\n        this._childSizeCache = new SizeCache();\n        this._marginSizeCache = new SizeCache();\n        this._metricsCache = new Map();\n    }\n    update(metrics, direction) {\n        const marginsToUpdate = new Set();\n        Object.keys(metrics).forEach((key) => {\n            const k = Number(key);\n            this._metricsCache.set(k, metrics[k]);\n            this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n            marginsToUpdate.add(k);\n            marginsToUpdate.add(k + 1);\n        });\n        for (const k of marginsToUpdate) {\n            const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n            const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n            this._marginSizeCache.set(k, collapseMargins(a, b));\n        }\n    }\n    get averageChildSize() {\n        return this._childSizeCache.averageSize;\n    }\n    get totalChildSize() {\n        return this._childSizeCache.totalSize;\n    }\n    get averageMarginSize() {\n        return this._marginSizeCache.averageSize;\n    }\n    get totalMarginSize() {\n        return this._marginSizeCache.totalSize;\n    }\n    getLeadingMarginValue(index, direction) {\n        return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n    }\n    getChildSize(index) {\n        return this._childSizeCache.getSize(index);\n    }\n    getMarginSize(index) {\n        return this._marginSizeCache.getSize(index);\n    }\n    clear() {\n        this._childSizeCache.clear();\n        this._marginSizeCache.clear();\n        this._metricsCache.clear();\n    }\n}\nexport class FlowLayout extends BaseLayout {\n    constructor() {\n        super(...arguments);\n        /**\n         * Initial estimate of item size\n         */\n        this._itemSize = { width: 100, height: 100 };\n        /**\n         * Indices of children mapped to their (position and length) in the scrolling\n         * direction. Used to keep track of children that are in range.\n         */\n        this._physicalItems = new Map();\n        /**\n         * Used in tandem with _physicalItems to track children in range across\n         * reflows.\n         */\n        this._newPhysicalItems = new Map();\n        /**\n         * Width and height of children by their index.\n         */\n        this._metricsCache = new MetricsCache();\n        /**\n         * anchorIdx is the anchor around which we reflow. It is designed to allow\n         * jumping to any point of the scroll size. We choose it once and stick with\n         * it until stable. _first and _last are deduced around it.\n         */\n        this._anchorIdx = null;\n        /**\n         * Position in the scrolling direction of the anchor child.\n         */\n        this._anchorPos = null;\n        /**\n         * Whether all children in range were in range during the previous reflow.\n         */\n        this._stable = true;\n        this._measureChildren = true;\n        this._estimate = true;\n    }\n    // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n    // })\n    // constructor(config: Layout1dConfig) {\n    //   super(config);\n    // }\n    get measureChildren() {\n        return this._measureChildren;\n    }\n    /**\n     * Determine the average size of all children represented in the sizes\n     * argument.\n     */\n    updateItemSizes(sizes) {\n        this._metricsCache.update(sizes, this.direction);\n        // if (this._nMeasured) {\n        // this._updateItemSize();\n        this._scheduleReflow();\n        // }\n    }\n    /**\n     * Set the average item size based on the total length and number of children\n     * in range.\n     */\n    // _updateItemSize() {\n    //   // Keep integer values.\n    //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n    // }\n    _getPhysicalItem(idx) {\n        return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n    }\n    _getSize(idx) {\n        const item = this._getPhysicalItem(idx);\n        return item && this._metricsCache.getChildSize(idx);\n    }\n    _getAverageSize() {\n        return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n    }\n    _estimatePosition(idx) {\n        const c = this._metricsCache;\n        if (this._first === -1 || this._last === -1) {\n            return (c.averageMarginSize +\n                idx * (c.averageMarginSize + this._getAverageSize()));\n        }\n        else {\n            if (idx < this._first) {\n                const delta = this._first - idx;\n                const refItem = this._getPhysicalItem(this._first);\n                return (refItem.pos -\n                    (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n                    (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize));\n            }\n            else {\n                const delta = idx - this._last;\n                const refItem = this._getPhysicalItem(this._last);\n                return (refItem.pos +\n                    (c.getChildSize(this._last) || c.averageChildSize) +\n                    (c.getMarginSize(this._last) || c.averageMarginSize) +\n                    delta * (c.averageChildSize + c.averageMarginSize));\n            }\n        }\n    }\n    /**\n     * Returns the position in the scrolling direction of the item at idx.\n     * Estimates it if the item at idx is not in the DOM.\n     */\n    _getPosition(idx) {\n        const item = this._getPhysicalItem(idx);\n        const { averageMarginSize } = this._metricsCache;\n        return idx === 0\n            ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n            : item\n                ? item.pos\n                : this._estimatePosition(idx);\n    }\n    _calculateAnchor(lower, upper) {\n        if (lower <= 0) {\n            return 0;\n        }\n        if (upper > this._scrollSize - this._viewDim1) {\n            return this.items.length - 1;\n        }\n        return Math.max(0, Math.min(this.items.length - 1, Math.floor((lower + upper) / 2 / this._delta)));\n    }\n    _getAnchor(lower, upper) {\n        if (this._physicalItems.size === 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._first < 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._last < 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        const firstItem = this._getPhysicalItem(this._first), lastItem = this._getPhysicalItem(this._last), firstMin = firstItem.pos, lastMin = lastItem.pos, lastMax = lastMin + this._metricsCache.getChildSize(this._last);\n        if (lastMax < lower) {\n            // Window is entirely past physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        if (firstMin > upper) {\n            // Window is entirely before physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        // Window contains a physical item\n        // Find one, starting with the one that was previously first visible\n        let candidateIdx = this._firstVisible - 1;\n        let cMax = -Infinity;\n        while (cMax < lower) {\n            const candidate = this._getPhysicalItem(++candidateIdx);\n            cMax = candidate.pos + this._metricsCache.getChildSize(candidateIdx);\n        }\n        return candidateIdx;\n    }\n    /**\n     * Updates _first and _last based on items that should be in the current\n     * viewed range.\n     */\n    _getActiveItems() {\n        if (this._viewDim1 === 0 || this.items.length === 0) {\n            this._clearItems();\n        }\n        else {\n            this._getItems();\n        }\n    }\n    /**\n     * Sets the range to empty.\n     */\n    _clearItems() {\n        this._first = -1;\n        this._last = -1;\n        this._physicalMin = 0;\n        this._physicalMax = 0;\n        const items = this._newPhysicalItems;\n        this._newPhysicalItems = this._physicalItems;\n        this._newPhysicalItems.clear();\n        this._physicalItems = items;\n        this._stable = true;\n    }\n    /*\n     * Updates _first and _last based on items that should be in the given range.\n     */\n    _getItems() {\n        const items = this._newPhysicalItems;\n        this._stable = true;\n        let lower, upper;\n        // The anchorIdx is the anchor around which we reflow. It is designed to\n        // allow jumping to any point of the scroll size. We choose it once and\n        // stick with it until stable. first and last are deduced around it.\n        // If we have a pinned item, we anchor on it\n        if (this.pin !== null) {\n            const { index } = this.pin;\n            this._anchorIdx = index;\n            this._anchorPos = this._getPosition(index);\n        }\n        // Determine the lower and upper bounds of the region to be\n        // rendered, relative to the viewport\n        lower = this._scrollPosition - this._overhang; //leadingOverhang;\n        upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n        if (upper < 0 || lower > this._scrollSize) {\n            this._clearItems();\n            return;\n        }\n        // If we are scrolling to a specific index or if we are doing another\n        // pass to stabilize a previously started reflow, we will already\n        // have an anchor. If not, establish an anchor now.\n        if (this._anchorIdx === null || this._anchorPos === null) {\n            this._anchorIdx = this._getAnchor(lower, upper);\n            this._anchorPos = this._getPosition(this._anchorIdx);\n        }\n        let anchorSize = this._getSize(this._anchorIdx);\n        if (anchorSize === undefined) {\n            this._stable = false;\n            anchorSize = this._getAverageSize();\n        }\n        const anchorLeadingMargin = this._metricsCache.getMarginSize(this._anchorIdx) ??\n            this._metricsCache.averageMarginSize;\n        const anchorTrailingMargin = this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n            this._metricsCache.averageMarginSize;\n        if (this._anchorIdx === 0) {\n            this._anchorPos = anchorLeadingMargin;\n        }\n        if (this._anchorIdx === this.items.length - 1) {\n            this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n        }\n        // Anchor might be outside bounds, so prefer correcting the error and keep\n        // that anchorIdx.\n        let anchorErr = 0;\n        if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n            anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n        }\n        if (this._anchorPos - anchorLeadingMargin > upper) {\n            anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n        }\n        if (anchorErr) {\n            this._scrollPosition -= anchorErr;\n            lower -= anchorErr;\n            upper -= anchorErr;\n            this._scrollError += anchorErr;\n        }\n        items.set(this._anchorIdx, { pos: this._anchorPos, size: anchorSize });\n        this._first = this._last = this._anchorIdx;\n        this._physicalMin = this._anchorPos - anchorLeadingMargin;\n        this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n        while (this._physicalMin > lower && this._first > 0) {\n            let size = this._getSize(--this._first);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._first);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            this._physicalMin -= size;\n            const pos = this._physicalMin;\n            items.set(this._first, { pos, size });\n            this._physicalMin -= margin;\n            if (this._stable === false && this._estimate === false) {\n                break;\n            }\n        }\n        while (this._physicalMax < upper && this._last < this.items.length - 1) {\n            let size = this._getSize(++this._last);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._last);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            const pos = this._physicalMax;\n            items.set(this._last, { pos, size });\n            this._physicalMax += size + margin;\n            if (!this._stable && !this._estimate) {\n                break;\n            }\n        }\n        // This handles the cases where we were relying on estimated sizes.\n        const extentErr = this._calculateError();\n        if (extentErr) {\n            this._physicalMin -= extentErr;\n            this._physicalMax -= extentErr;\n            this._anchorPos -= extentErr;\n            this._scrollPosition -= extentErr;\n            items.forEach((item) => (item.pos -= extentErr));\n            this._scrollError += extentErr;\n        }\n        if (this._stable) {\n            this._newPhysicalItems = this._physicalItems;\n            this._newPhysicalItems.clear();\n            this._physicalItems = items;\n        }\n    }\n    _calculateError() {\n        if (this._first === 0) {\n            return this._physicalMin;\n        }\n        else if (this._physicalMin <= 0) {\n            return this._physicalMin - this._first * this._delta;\n        }\n        else if (this._last === this.items.length - 1) {\n            return this._physicalMax - this._scrollSize;\n        }\n        else if (this._physicalMax >= this._scrollSize) {\n            return (this._physicalMax -\n                this._scrollSize +\n                (this.items.length - 1 - this._last) * this._delta);\n        }\n        return 0;\n    }\n    _reflow() {\n        const { _first, _last } = this;\n        super._reflow();\n        if ((this._first === -1 && this._last == -1) ||\n            (this._first === _first && this._last === _last)) {\n            this._resetReflowState();\n        }\n    }\n    _resetReflowState() {\n        this._anchorIdx = null;\n        this._anchorPos = null;\n        this._stable = true;\n    }\n    _updateScrollSize() {\n        const { averageMarginSize } = this._metricsCache;\n        this._scrollSize = Math.max(1, this.items.length * (averageMarginSize + this._getAverageSize()) +\n            averageMarginSize);\n    }\n    /**\n     * Returns the average size (precise or estimated) of an item in the scrolling direction,\n     * including any surrounding space.\n     */\n    get _delta() {\n        const { averageMarginSize } = this._metricsCache;\n        return this._getAverageSize() + averageMarginSize;\n    }\n    /**\n     * Returns the top and left positioning of the item at idx.\n     */\n    _getItemPosition(idx) {\n        return {\n            [this._positionDim]: this._getPosition(idx),\n            [this._secondaryPositionDim]: 0,\n            [offset(this.direction)]: -(this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n                this._metricsCache.averageMarginSize),\n        };\n    }\n    /**\n     * Returns the height and width of the item at idx.\n     */\n    _getItemSize(idx) {\n        return {\n            [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n            [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n        };\n    }\n    _viewDim2Changed() {\n        this._metricsCache.clear();\n        this._scheduleReflow();\n    }\n}\n//# sourceMappingURL=flow.js.map"],"mappings":"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"}