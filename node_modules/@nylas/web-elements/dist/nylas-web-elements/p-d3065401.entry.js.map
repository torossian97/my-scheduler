{"version":3,"names":["renderViewEmail","message","attachments","container","viewEmailElement","parent","children","length","debug","viewEmailElementClone","cloneNode","data","appendChild","ViewThreadMessage","onMessageClick","onShowContactDataClick","h","Fragment","key","id","class","onClick","from","name","toUpperCase","email","Date","date","toLocaleTimeString","undefined","timeStyle","formatTimeAgo","collapse","snippet","to","formatParticipants","type","value","expand","showContactData","formatRecipient","map","cc","ref","el","nylasViewThreadCss","NylasViewThreadStyle0","NylasViewThread","this","nylasViewEmailElement","nylasComposerElement","originalEvent","stopPropagation","target","messageId","internalMessages","find","event","showContactDataClicked","emit","defaultPrevented","dataset","messageClicked","onShowAllEmailsClick","showAllEmails","showComposerClick","showComposer","connectedCallback","disconnectedCallback","componentWillLoad","updateInternalMessages","messages","template","host","querySelector","viewEmailTemplateClone","document","importNode","content","composerTemplate","composerTemplateClone","componentDidLoad","threadChanged","thread","threadSelected","sort","a","b","index","render","fistMessage","lastTwoMessages","slice","remainingMessages","lastMessage","Host","scale","color","subject","folders","folder","size","toTitleCase","replace","filter","attachment","composerElement","variant","slot","onClose","onSend","e","detail","replyBody","__decorate","RegisterComponent","stateToProps","Map","eventToProps","async","nylasConnector","getThreadMessages","fireRegisterEvent"],"sources":["src/components/mailbox/nylas-view-thread/view-thread-message.tsx","src/components/mailbox/nylas-view-thread/nylas-view-thread.scss?tag=nylas-view-thread&encapsulation=shadow","src/components/mailbox/nylas-view-thread/nylas-view-thread.tsx"],"sourcesContent":["import { InternalAttachment, InternalMessage } from '@/common/types';\nimport { debug, formatParticipants, formatRecipient, formatTimeAgo } from '@/utils/utils';\nimport { Fragment, FunctionalComponent, h } from '@stencil/core';\n\nexport type ViewThreadMessageProps = {\n  message: InternalMessage;\n  attachments: InternalAttachment[];\n  viewEmailElement?: HTMLNylasViewEmailElement | null;\n  composerElement?: HTMLNylasComposerElement | null;\n  onShowContactDataClick: (event: MouseEvent) => void;\n  onMessageClick: (event: MouseEvent) => void;\n  parent?: HTMLElement;\n};\n\n/**\n * Render view email element\n * @param container Container element to render view email element\n * @param message Message to render\n * @param viewEmailElement View email element to render\n * @param parent Parent element used for mobile view resizing\n */\nfunction renderViewEmail(message: InternalMessage, attachments: InternalAttachment[], container?: HTMLElement, viewEmailElement?: HTMLNylasViewEmailElement, parent?: HTMLElement) {\n  // Skip if message is not defined\n  if (!viewEmailElement) {\n    return;\n  }\n\n  // Skip if container is not defined\n  if (!container) {\n    return;\n  }\n\n  // Skip if container already has a child\n  if (container.children.length > 0) {\n    return;\n  }\n\n  debug(`[nylas-view-thread] Rendering email`, { message, attachments, viewEmailElement });\n\n  // Clone viewEmailElement so that we are not reusing the same element from another\n  // message in the thread\n  const viewEmailElementClone = viewEmailElement.cloneNode(true) as HTMLNylasViewEmailElement;\n  viewEmailElementClone.message = message.data;\n  viewEmailElementClone.parent = parent;\n\n  // Append viewEmailElement to container\n  container.appendChild(viewEmailElementClone);\n}\n\nexport const ViewThreadMessage: FunctionalComponent<ViewThreadMessageProps> = ({ viewEmailElement, message, attachments, onMessageClick, onShowContactDataClick, parent }) => (\n  <Fragment>\n    <div key={message.id} class={'message'}>\n      <div class={'sub-header'} data-id={message.data.id} onClick={onMessageClick}>\n        <div class={'avatar'}>{message.data.from && message.data.from[0]?.name && message.data.from[0]?.name[0]?.toUpperCase()}</div>\n        <div class={'from'}>\n          <span class={'name'}>{message.data.from && message.data.from[0]?.name}</span> <span class=\"email\">{message.data.from && message.data.from[0]?.email}</span>\n        </div>\n        <div class={'date'}>\n          {new Date(message.data.date * 1000).toLocaleTimeString(undefined, {\n            timeStyle: 'short',\n          })}{' '}\n          ({formatTimeAgo(new Date(message.data.date * 1000))})\n        </div>\n        <sp-button-group class=\"buttons\">\n          <nylas-summarize-message-button message={message.data} />\n        </sp-button-group>\n        {message.collapse && <div class={'snippet'}>{message.data.snippet}</div>}\n\n        {!message.collapse && message.data.to && (\n          <div class={'to'}>\n            <span>to</span> {formatParticipants(message.data.to)}{' '}\n            <button\n              type=\"button\"\n              value={message.data.id}\n              onClick={onShowContactDataClick}\n              class={{\n                'expand': true,\n                'expand--showContactData': message.showContactData,\n              }}\n            >\n              <chevron-icon />\n            </button>\n          </div>\n        )}\n      </div>\n      {message.showContactData && (\n        <div class={'address-info'}>\n          <div class={'label'}>From</div>\n          <div class={'value'}>{formatRecipient(message.data?.from ? message?.data?.from[0] : { name: '', email: '' })}</div>\n\n          {message.data.to && (\n            <Fragment>\n              <div class={'label'}>To</div>\n              <div class={'value'}>\n                {message.data.to.map(to => (\n                  <div>{formatRecipient(to)}</div>\n                ))}\n              </div>\n            </Fragment>\n          )}\n\n          {typeof message.data.cc !== 'undefined' && message.data.cc.length > 0 && (\n            <Fragment>\n              <div class={'label'}>CC</div>\n              <div class={'value'}>\n                {message.data.cc.map(cc => (\n                  <div>{formatRecipient(cc)}</div>\n                ))}\n              </div>\n            </Fragment>\n          )}\n        </div>\n      )}\n      {!message.collapse && viewEmailElement && <div key={message.id} ref={el => renderViewEmail(message, attachments, el, viewEmailElement, parent)} />}\n      {/* If no view element was provided, default to our own instance */}\n      {!message.collapse && !viewEmailElement && <nylas-view-email key={message.id} message={message.data} parent={parent} />}\n    </div>\n    <hr />\n  </Fragment>\n);\n",":host {\n  display: block;\n  font-size: inherit;\n}\n\n.avatar {\n  z-index: 1;\n  border-radius: 100%;\n  background-color: var(--nylas-color-primary-200);\n  height: 40px;\n  width: 40px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  border: 1px solid var(--nylas-color-primary-200);\n}\n\n.view-thread {\n  display: grid;\n  grid-auto-flow: row;\n  width: 100%;\n\n  .header {\n    display: grid;\n    grid-gap: 1rem;\n    /* grid-auto-flow: row;\n    grid-auto-columns: fit-content(50%); */\n    align-items: center;\n    margin-bottom: 1rem;\n\n    .subject {\n      font-size: 1.25rem;\n      font-weight: 600;\n      line-height: 1.5rem;\n    }\n\n    .folders {\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: min-content;\n      overflow-x: auto;\n      gap: 1rem;\n\n      .folder {\n        padding: 0 0.5rem;\n        font-size: 0.9rem;\n        color: var(--nylas-color-primary-900);\n        background-color: var(--nylas-color-primary-300);\n      }\n    }\n  }\n\n  .messages {\n    display: grid;\n    gap: 1rem;\n\n    hr {\n      margin: 0;\n      width: 100%;\n      border: 1px solid var(--nylas-color-primary-200);\n\n      &:last-of-type {\n        display: none;\n      }\n    }\n\n    .message {\n      display: grid;\n      grid-auto-flow: row;\n      gap: 1rem;\n\n      &:last-of-type .sub-header {\n        cursor: default;\n      }\n\n      .sub-header {\n        display: grid;\n        grid-template:\n          'avatar from date buttons'\n          'avatar to to buttons';\n        grid-column-gap: 1rem;\n        grid-template-columns: auto 1fr auto auto;\n        cursor: pointer;\n\n        > * {\n          pointer-events: none;\n        }\n\n        .avatar {\n          grid-area: avatar;\n        }\n\n        .from {\n          grid-area: from;\n          span.email {\n            display: none;\n            color: var(--nylas-color-primary-400);\n            font-weight: 600;\n          }\n        }\n\n        .buttons {\n          grid-area: buttons;\n          align-self: center;\n\n          * {\n            pointer-events: all;\n          }\n        }\n\n        .date {\n          grid-area: date;\n          align-self: center;\n          color: var(--nylas-color-primary-400);\n        }\n\n        .snippet {\n          width: 90%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          color: var(--nylas-color-primary-600);\n        }\n\n        .to {\n          grid-area: to;\n          color: var(--nylas-color-primary-400);\n\n          > span {\n            color: var(--nylas-color-primary-400);\n          }\n\n          button {\n            border: 0;\n            background-color: transparent;\n            cursor: pointer;\n            pointer-events: all;\n            padding: 0;\n            margin: 0;\n\n            > * {\n              pointer-events: none;\n            }\n\n            chevron-icon {\n              display: inline-table;\n              fill: var(--nylas-color-primary-400);\n              width: 15px;\n              height: 15px;\n              vertical-align: middle;\n              svg {\n                width: 15px;\n                height: 15px;\n                transform: rotate(90deg);\n              }\n            }\n\n            &.expand--showContactData chevron-icon {\n              svg {\n                transform: rotate(270deg);\n              }\n            }\n          }\n        }\n      }\n\n      .address-info {\n        display: grid;\n        column-gap: 1rem;\n        row-gap: 0.5rem;\n        grid-template-columns: auto 1fr;\n        grid-template-rows: 1fr;\n        padding: 1rem 2rem;\n        border-radius: var(--nylas-border-radius-2x);\n        border: 1px solid var(--nylas-color-primary-200);\n        align-items: flex-start;\n        color: var(--nylas-color-primary-600);\n\n        .label {\n          color: var(--nylas-color-primary-400);\n          font-weight: 600;\n        }\n      }\n    }\n  }\n}\n\n.show-more {\n  position: relative;\n  display: flex;\n  width: 100%;\n\n  .sr-only {\n    display: none;\n  }\n\n  button {\n    position: relative;\n    display: inline-flex;\n    width: 100%;\n    padding: 0;\n    border: 0;\n    background-color: transparent;\n    cursor: pointer;\n    text-align: left;\n    overflow: hidden;\n\n    span {\n      border: 1px solid var(--nylas-color-primary-400);\n    }\n\n    &:hover span {\n      background-color: var(--nylas-color-primary-700);\n    }\n\n    &::after {\n      border-top: 1px solid rgba(100, 121, 143, 0.122);\n      border-bottom: 1px solid rgba(100, 121, 143, 0.122);\n      content: '';\n      height: 4px;\n      width: 100%;\n      position: absolute;\n      top: 50%;\n    }\n  }\n}\n\n.loading {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-color: var(--loading__background-color);\n  top: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  font-weight: 600;\n  overflow: hidden;\n}\n\n.reply-buttons {\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: min-content;\n  gap: 1rem;\n  margin-top: 1rem;\n\n  sp-button {\n    border-radius: var(--nylas-border-radius);\n    background-color: var(--nylas-color-primary-400);\n    color: var(--nylas-color-primary-900);\n    fill: var(--nylas-color-primary-900);\n\n    &:hover {\n      background-color: var(--nylas-color-primary-500);\n    }\n\n    &:disabled {\n      background-color: var(--nylas-color-primary-200);\n      color: var(--nylas-color-primary-600);\n      cursor: not-allowed;\n    }\n\n    & chevron-icon {\n      display: inline-block;\n    }\n  }\n}\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {\n}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {\n}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {\n  .view-thread {\n    .messages {\n      .message {\n        .sub-header {\n          .from {\n            span.email {\n              display: inline;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { DataState, InternalAttachment, InternalMessage } from '@/common/types';\nimport { debug, toTitleCase } from '@/utils/utils';\nimport { Message, Thread } from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Fragment, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasMailboxConnector } from '../../../components';\nimport { NylasMailbox } from '../nylas-mailbox/nylas-mailbox';\nimport { ViewThreadMessage } from './view-thread-message';\n\n@Component({\n  tag: 'nylas-view-thread',\n  styleUrl: 'nylas-view-thread.scss',\n  shadow: true,\n})\nexport class NylasViewThread {\n  /**\n   * The host element\n   */\n  @Element() readonly host!: HTMLDivElement;\n\n  /**\n   * The draft message to display\n   */\n  @Prop() readonly draft?: Message;\n\n  /**\n   * Thread to display\n   */\n  @Prop() readonly thread?: Thread;\n\n  /**\n   * Messages within the thread to display\n   */\n  @Prop() readonly messages: Message[] = [];\n\n  /**\n   * Attachments for each message within the thread\n   */\n  @Prop() readonly attachments: InternalAttachment[] = [];\n\n  /**\n   * Event emitted when a thread is selected\n   */\n  @Event({ cancelable: true }) readonly threadSelected!: EventEmitter<Thread>;\n\n  /**\n   * Event emitted when a message contact data is clicked\n   */\n  @Event() showContactDataClicked!: EventEmitter<Message>;\n\n  /**\n   * Event emitted when a message is clicked\n   */\n  @Event() messageClicked!: EventEmitter<Message>;\n\n  /**\n   * THe data state of the mailbox (loading, ready, error)\n   */\n  @State() readonly state: DataState = 'loading';\n\n  /**\n   * Internal messages contains additional data for each message\n   * required for rendering\n   */\n  @State() internalMessages: InternalMessage[] = [];\n\n  /**\n   * A toggle state to all emails\n   */\n  @State() showAllEmails: boolean = false;\n\n  /**\n   * A toggle state to show the composer\n   */\n  @State() showComposer: boolean = false;\n\n  /**\n   * The view email element to render.\n   * This is the HTML element that is passed to this component\n   * and which is used to render the email body for each message.\n   */\n  private nylasViewEmailElement: HTMLNylasViewEmailElement | null = null;\n\n  /**\n   * The composer element to render.\n   * This is the HTML element that is passed to this component\n   * and which is used to render the composer for each message.\n   */\n  private nylasComposerElement: HTMLNylasComposerElement | null = null;\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n\n  async componentWillLoad() {\n    debug(`[nylas-view-thread] Component will load`);\n    this.updateInternalMessages(this.messages);\n\n    // Get the template with the class \"nylas-view-email\" and clone it\n    const template = this.host.querySelector<HTMLTemplateElement>('template.nylas-view-email');\n    if (!template) {\n      debug(`[nylas-view-thread] Could not find template`);\n      return;\n    }\n\n    const viewEmailTemplateClone = document.importNode(template.content, true);\n    this.nylasViewEmailElement = viewEmailTemplateClone.querySelector<HTMLNylasViewEmailElement>('nylas-view-email');\n\n    // Get the template with the class \"nylas-composer\" and clone it\n    const composerTemplate = this.host.querySelector<HTMLTemplateElement>('template.nylas-composer');\n    if (!composerTemplate) {\n      debug(`[nylas-view-thread] Could not find composer template`);\n      return;\n    }\n\n    const composerTemplateClone = document.importNode(composerTemplate.content, true);\n    this.nylasComposerElement = composerTemplateClone.querySelector<HTMLNylasComposerElement>('nylas-composer');\n  }\n\n  async componentDidLoad() {\n    debug(`[nylas-view-thread] Component did load`);\n  }\n\n  @Watch('thread')\n  async threadChanged(thread: Thread | undefined) {\n    debug(`[nylas-view-thread] Thread changed`, { thread: thread });\n\n    // Reset internal messages\n    this.internalMessages = [];\n\n    const event = this.threadSelected.emit(thread);\n    if (!event.defaultPrevented) {\n      debug(`[nylas-view-thread] Default event not prevented, initializing`);\n    }\n  }\n\n  @Watch('messages')\n  public updateInternalMessages(messages: Message[]) {\n    debug(`[nylas-view-thread] Updating internal messages`, { messages });\n\n    const internalMessages = messages\n      .sort((a, b) => {\n        return a.date > b.date ? 1 : -1;\n      })\n      .map((message, index) => ({\n        id: message.id,\n        data: message,\n        collapse: index === messages.length - 1 ? false : true,\n        showContactData: false,\n      }));\n\n    this.internalMessages = internalMessages;\n  }\n\n  private onShowContactDataClick = (originalEvent: MouseEvent) => {\n    originalEvent.stopPropagation();\n    const target = originalEvent.target as HTMLButtonElement;\n    const messageId = target.value;\n\n    const message = this.internalMessages.find(message => message.data.id === messageId);\n    if (!message) {\n      debug(`[nylas-view-thread] Could not find message ${messageId}`);\n      return;\n    }\n    const event = this.showContactDataClicked.emit(message.data);\n    if (!event.defaultPrevented) {\n      message.showContactData = !message.showContactData;\n      this.internalMessages = [...this.internalMessages];\n    }\n\n    debug(`[nylas-view-thread] show contact data clicked ${messageId} ${message.showContactData ? 'collapsed' : 'expanded'}`);\n  };\n\n  private onMessageClick = (originalEvent: MouseEvent) => {\n    const target = originalEvent.target as HTMLDivElement;\n    const messageId = target.dataset.id;\n    const message = this.internalMessages.find(message => message.data.id === messageId);\n    if (!message) {\n      debug(`[nylas-view-thread] Could not find message ${messageId}`);\n      return;\n    }\n    const event = this.messageClicked.emit(message.data);\n    if (!event.defaultPrevented) {\n      if (message.id !== this.internalMessages[this.internalMessages.length - 1]?.id) {\n        message.collapse = !message.collapse;\n        if (message.collapse) {\n          message.showContactData = false;\n        }\n      }\n\n      this.internalMessages = [...this.internalMessages];\n    }\n    debug(`[nylas-view-thread] message clicked ${messageId} ${message.collapse ? 'collapsed' : 'expanded'}`);\n  };\n\n  private onShowAllEmailsClick = () => {\n    this.showAllEmails = !this.showAllEmails;\n  };\n\n  private showComposerClick = () => {\n    this.showComposer = !this.showComposer;\n  };\n\n  @RegisterComponent<NylasViewThread, NylasMailboxConnector, Exclude<NylasMailbox['stores'], undefined>>({\n    name: 'nylas-view-thread',\n    stateToProps: new Map([\n      ['mailbox.selectedThread', 'thread'],\n      ['mailbox.messages', 'messages'],\n      ['mailbox.state', 'state'],\n    ]),\n    eventToProps: {\n      threadSelected: async (event: CustomEvent<Thread>, nylasConnector: NylasMailboxConnector) => {\n        debug(`[nylas-view-thread] Nylas init event. Fetching thread messages.`, { event });\n        const thread = event.detail;\n        if (thread && thread.id) {\n          await nylasConnector.messages.getThreadMessages(thread.id);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    const fistMessage = this.internalMessages.length > 2 ? this.internalMessages[0] : null;\n    const lastTwoMessages = this.internalMessages.slice(this.internalMessages.length - 2, this.internalMessages.length);\n    const remainingMessages = this.internalMessages.slice(1, this.internalMessages.length - 2);\n    const lastMessage = this.internalMessages[this.internalMessages.length - 1];\n    return (\n      <Host>\n        <sp-theme scale=\"medium\" color=\"dark\">\n          <div class=\"view-thread\">\n            <div class=\"header\">\n              <div class={'subject'}>{this.thread?.subject}</div>\n              <div class={'folders'}>{this.thread?.folders?.map(folder => <sp-tag size=\"s\">{toTitleCase(folder.replace('CATEGORY_', '').replace('_', ' '))}</sp-tag>)}</div>\n            </div>\n            <div class=\"messages\">\n              {fistMessage && (\n                <ViewThreadMessage\n                  message={fistMessage}\n                  attachments={this.attachments.filter(attachment => attachment.messageId === fistMessage.id)}\n                  onMessageClick={this.onMessageClick}\n                  onShowContactDataClick={this.onShowContactDataClick}\n                  parent={this.host}\n                  viewEmailElement={this.nylasViewEmailElement}\n                  composerElement={this.nylasComposerElement}\n                />\n              )}\n              {remainingMessages.length > 0 && this.messages.length > 1 && !this.showAllEmails && lastTwoMessages.length > 0 && (\n                <Fragment>\n                  <div class={'show-more'}>\n                    <button type=\"button\" onClick={this.onShowAllEmailsClick}>\n                      <span class={'avatar'}>{remainingMessages.length}</span> <span class={'sr-only'}>Show {remainingMessages.length} more emails</span>\n                    </button>\n                  </div>\n                  <hr />\n                </Fragment>\n              )}\n              {remainingMessages.length > 0 &&\n                this.showAllEmails &&\n                this.messages.length > 2 &&\n                remainingMessages.map(email => (\n                  <ViewThreadMessage\n                    message={email}\n                    attachments={this.attachments.filter(attachment => attachment.messageId === fistMessage?.id)}\n                    onMessageClick={this.onMessageClick}\n                    onShowContactDataClick={this.onShowContactDataClick}\n                    parent={this.host}\n                    viewEmailElement={this.nylasViewEmailElement}\n                    composerElement={this.nylasComposerElement}\n                  />\n                ))}\n              {lastTwoMessages.length > 0 &&\n                lastTwoMessages.map(email => (\n                  <ViewThreadMessage\n                    message={email}\n                    attachments={this.attachments.filter(attachment => attachment.messageId === fistMessage?.id)}\n                    onMessageClick={this.onMessageClick}\n                    onShowContactDataClick={this.onShowContactDataClick}\n                    parent={this.host}\n                    viewEmailElement={this.nylasViewEmailElement}\n                    composerElement={this.nylasComposerElement}\n                  />\n                ))}\n            </div>\n            {!(this.showComposer && lastMessage) && (\n              <div class=\"reply-buttons\">\n                <sp-button variant=\"cta\" type=\"button\" onClick={this.showComposerClick}>\n                  <span slot=\"icon\">\n                    <reply-icon></reply-icon>\n                  </span>\n                  <span>Reply</span>\n                </sp-button>\n                <sp-button variant=\"cta\" type=\"button\">\n                  <span slot=\"icon\">\n                    <reply-all-icon></reply-all-icon>\n                  </span>\n                  <span>Reply All</span>\n                </sp-button>\n                <sp-button variant=\"cta\" type=\"button\">\n                  <span slot=\"icon\">\n                    <forward-icon></forward-icon>\n                  </span>\n                  <span>Forward</span>\n                </sp-button>\n              </div>\n            )}\n            {this.showComposer && lastMessage && (\n              <div class=\"composer\">\n                <nylas-composer\n                  message={lastMessage.data}\n                  onClose={this.showComposerClick}\n                  onSend={e => {\n                    debug(`[nylas-view-thread] Send event`, { message: e.detail.message, replyBody: e.detail.replyBody });\n                  }}\n                ></nylas-composer>\n              </div>\n            )}\n          </div>\n        </sp-theme>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}