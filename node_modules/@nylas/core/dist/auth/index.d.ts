import type { TokenExchangeResponse } from '../types/nylas-api';
import type { AuthConfig } from '../types/nylas-auth';
export default function NylasAuth(config: AuthConfig): {
    config: AuthConfig;
    /**
     * This method will make a request to the Nylas API to exchange an authorization code for an access token.
     * @param scopes The scopes that were used to generate the authorization code
     * @param email The email that was used to generate the authorization code
     * @param provider The provider that was used to generate the authorization code
     * @returns A promise that resolves to a URL string that can be used to redirect the user to the Nylas API to complete the authorization flow
     */
    getHostedAuthRedirectURL(scopes?: string[], email?: string, provider?: string): Promise<string>;
    /**
     * This method will make a request to the Nylas API to exchange an authorization code for an access token.
     * @param path A path to the Nylas API, e.g. `/v3/grants/methreads`
     * @param method GET, POST, PUT, DELETE, etc.
     * @param body A JSON object to send as the body of the request
     * @param domain The domain to use for the request, e.g. `api.us.nylas.com`
     * @param parseJSON Whether to parse the response as JSON or return the raw response (default: true)
     * @returns
     */
    nylasAPIRequest: {
        <T>(path: string, method?: string, body?: any, parseJSON?: boolean, domain?: string, request?: RequestInit): Promise<T>;
        <T_1>(path: string, method: string, body: any, parseJSON: false, domain?: string, request?: RequestInit): Promise<ReadableStream<Uint8Array> | null>;
        <T_2>(path: string, method: string, body: any, parseJSON: true, domain?: string, request?: RequestInit): Promise<T_2>;
        <T_3>(path: string, method: string, body: any, parseJSON: boolean, domain?: string, request?: RequestInit): Promise<T_3 | ReadableStream<Uint8Array> | null>;
    };
    /**
     * This method will make a request to the Nylas API to exchange an authorization code for an access token.
     * @param code  The authorization code that was returned from the Nylas API
     * @returns A promise that resolves to a TokenExchangeResponse object
     */
    exchangeAuthCodeForTokenInfo(code: string): Promise<TokenExchangeResponse | null>;
    /**
     * This method will make a `application/octet-stream` request to the Nylas API to download a file.
     */
    nylasDownloadFileRequest(path: string, method?: string, body?: any): Promise<Blob>;
    /**
     * This methid will clear the access token from the storage object
     */
    logout(): Promise<void>;
    /**
     * This method will make a request to the Nylas API to exchange an authorization code for an access token.
     * @returns A promise that resolves to a boolean indicating whether the user is authenticated
     */
    isAuthenticated(): Promise<boolean>;
    /**
     * This method will return information about the current access token.
     * @returns A promise with the token info
     */
    getTokenInfo(): Promise<TokenInfo | null>;
    /**
     * This method will make a request to the Nylas API to validate if the current access token is valid.
     * @returns A promise that resolves to a boolean indicating whether the current access token is valid
     */
    isAccessTokenValid(): Promise<boolean>;
    /**
     * This method will make a request to the Nylas API to refresh the current access token.
     * @returns A promise that resolves to a TokenExchangeResponse object
     */
    refreshAccessToken(): Promise<TokenExchangeResponse | null>;
    /**
     * This method will return true if the current access token has the given scope
     * based on the type of scope (e.g. 'read-only', 'modify', 'compose', 'insert', 'labels', 'metadata', 'settings.basic', or 'settings.sharing')
     * @param type Either 'read-only', 'modify', 'compose', 'insert', 'labels', 'metadata', 'settings.basic', or 'settings.sharing'
     */
    hasScopeByType(service: "email" | undefined, types: string | string[]): Promise<boolean>;
    /**
     * A helper method to check if the current access token has a given scope.
     * @param scope The scope(s) to check for in the current access token  (e.g. https://www.googleapis.com/auth/gmail.modify)
     * @returns boolean indicating whether the current access token has the given scope
     */
    hasScope(scope: string | string[]): Promise<boolean>;
};
export type TokenInfo = Omit<TokenExchangeResponse, 'access_token'>;
export type NylasAuthType = ReturnType<typeof NylasAuth>;
