/**
 * Interface representing a Nylas API error.
 */
export * from './auth';
export * from './messages';
export * from './threads';
export * from './folders';
export * from './scheduler';
export * from './calendars';
export * from './config';
export interface NylasSuccessResponse<T> {
    request_id?: string;
    next_cursor?: string;
    data: T;
}
export interface NylasErrorResponse {
    /** @description ID of the request */
    request_id?: string;
    /** @description Response error object. */
    error?: {
        /** @description Error Type */
        type?: string;
        /** @desctription Code */
        code?: number | string;
        /** @description Title */
        title?: string;
        /** @description Error Message */
        message?: string;
        /** @description Provider Error */
        provider_error?: Record<string, never>;
    };
}
export interface NylasSchedulerErrorResponse {
    /** @description Response error object. */
    error?: {
        /** @description Title */
        title?: string;
        /** @description Error Message */
        message?: string;
        /** @description Error Category: validation | api | internal | auth */
        category?: string;
        /** @description Error Type */
        errorCode?: number;
    };
}
export type NylasResponse<T> = NylasSuccessResponse<T> | NylasErrorResponse;
export type NylasSchedulerResponse<T> = NylasSuccessResponse<T> | NylasSchedulerErrorResponse;
export declare const isNylasSuccessResponse: <T>(response: NylasResponse<T>) => response is NylasSuccessResponse<T>;
export declare const isNylasErrorResponse: <T>(response: NylasResponse<T>) => response is NylasErrorResponse;
export declare class NylasAPIError extends Error {
    apiError: NylasErrorResponse['error'];
    constructor(error: NylasErrorResponse['error']);
}
