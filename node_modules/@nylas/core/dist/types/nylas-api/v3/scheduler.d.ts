export type NylasSchedulerBookingParticipant = {
    name: string;
    email: string;
};
export type NylasSchedulerBookingData = {
    primaryParticipant: NylasSchedulerBookingParticipant;
    startTime?: Date;
    endTime?: Date;
    timezone?: string;
    guests?: NylasSchedulerBookingParticipant[];
    additionalFields?: {
        [key: string]: any;
    };
};
export type OpenHour = {
    days: number[];
    start: string;
    end: string;
    timezone: string;
};
export type Timeslot = {
    start_time: Date;
    end_time: Date;
};
export type ThemeConfig = Partial<{
    '--nylas-primary': string;
    '--nylas-info': string;
    '--nylas-success': string;
    '--nylas-warning': string;
    '--nylas-error': string;
    '--nylas-error-pressed': string;
    '--nylas-base-0': string;
    '--nylas-base-25': string;
    '--nylas-base-50': string;
    '--nylas-base-100': string;
    '--nylas-base-200': string;
    '--nylas-base-300': string;
    '--nylas-base-400': string;
    '--nylas-base-500': string;
    '--nylas-base-600': string;
    '--nylas-base-700': string;
    '--nylas-base-800': string;
    '--nylas-base-900': string;
    '--nylas-base-950': string;
    '--nylas-font-family': string;
    '--nylas-font-size': string;
    '--nylas-border-radius': string;
    '--nylas-border-radius-2x': string;
    '--nylas-border-radius-3x': string;
}>;
export declare enum NotificationType {
    Error = "error",
    Warning = "warning",
    Info = "info",
    Success = "success"
}
export type Notification = {
    id: string;
    type: NotificationType;
    title: string;
    code?: number;
    category: string;
    description?: string;
    ttl?: number | 'none';
};
export type BookingType = 'booking' | 'pre-booking';
export type AvailabilityMethod = 'max-fairness' | 'max-availability' | 'collective';
export type ConferenceProvider = 'GoogleMeetConferenceProvider' | 'MicrosoftTeamsConferenceProvider' | 'ZoomConferenceProvider' | 'OnlineMeetingProviderMicrosoftTeams';
export type ReminderMethod = 'email' | 'popup';
export interface OpenHours {
    days: number[];
    ex_dates: string[];
    timezone: string;
    start: string;
    end: string;
}
export interface MeetingBuffer {
    before: number;
    after: number;
}
export interface Rules {
    availability_method: AvailabilityMethod;
    buffer: MeetingBuffer;
    default_open_hours: OpenHours[];
    round_robin_group_id: string;
}
export interface ConferenceDetail {
    meeting_code?: string;
    password?: string;
    url?: string;
    pin?: string;
    phone?: string[];
}
export interface Conference {
    provider?: ConferenceProvider;
    details?: ConferenceDetail;
    autocreate?: {
        [key: string]: any;
    };
}
export interface ParticipantAvailability {
    calendar_ids: string[];
    open_hours?: OpenHours[];
}
export interface ParticipantBooking {
    calendar_id: string;
}
export interface Participant {
    email: string;
    name?: string;
    is_organizer?: boolean;
    availability?: ParticipantAvailability;
    booking?: ParticipantBooking;
}
export interface EventReminder {
    reminder_method?: ReminderMethod;
    reminder_minutes: number;
}
export interface Reminders {
    use_default?: boolean;
    overrides: EventReminder[];
}
export interface Availability {
    duration_minutes: number;
    interval_minutes?: number;
    round_to?: number;
    availability_rules?: Rules;
}
export interface EventBooking {
    title: string;
    description?: string;
    location?: string;
    timezone?: string;
    booking_type: BookingType;
    additional_fields?: {
        [key: string]: any;
    };
    conference?: Conference;
    hide_participants?: boolean;
    disable_emails?: boolean;
    reminders?: Reminders;
}
export interface Scheduler {
    available_days_in_future: number;
    min_cancellation_notice: number;
    rescheduling_url?: string;
    cancellation_url?: string;
}
export interface Configuration {
    id: string;
    version: string;
    requires_session_auth?: boolean;
    participants: Participant[];
    availability: Availability;
    event_booking: EventBooking;
    scheduler: Scheduler;
}
export interface Creator {
    name: string;
    email: string;
}
