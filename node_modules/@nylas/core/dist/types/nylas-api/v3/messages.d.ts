/**
 * Interface representing an email address and optional name.
 */
export interface EmailName {
    /**
     * Email address.
     */
    email?: string;
    /**
     * Full name.
     */
    name?: string;
}
/**
 * Interface representing a message header.
 */
export interface MessageHeaders {
    /**
     * The header name.
     */
    name: string;
    /**
     * The header value.
     */
    value: string;
}
interface BaseFile {
    filename: string;
    contentType: string;
    size?: number;
    isInline?: boolean;
    contentId?: string;
    contentDisposition?: string;
}
export interface CreateFileRequest extends BaseFile {
    content: string;
}
export interface File extends BaseFile {
    id: string;
    grantId: string;
}
/**
 * @internal Internal interface for creating a message.
 */
export interface BaseCreateMessage {
    /**
     * An array of message recipients.
     */
    to: EmailName[];
    /**
     * An array of bcc recipients.
     */
    bcc?: EmailName[];
    /**
     * An array of cc recipients.
     */
    cc?: EmailName[];
    /**
     * An array of name and email pairs that override the sent reply-to headers.
     */
    replyTo?: EmailName[];
    /**
     * An array of files to attach to the message.
     */
    attachments?: CreateFileRequest[];
    /**
     * A short snippet of the message body.
     * This is the first 100 characters of the message body, with any HTML tags removed.
     */
    snippet?: string;
    /**
     * The message subject.
     */
    subject?: string;
    /**
     * A reference to the parent thread object.
     * If this is a new draft, the thread will be empty.
     */
    threadId?: string;
    /**
     * The full HTML message body.
     * Messages with only plain-text representations are up-converted to HTML.
     */
    body?: string;
    /**
     * Whether or not the message has been starred by the user.
     */
    starred?: boolean;
    /**
     * Whether or not the message has been read by the user.
     */
    unread?: boolean;
}
/**
 * @internal Internal interface for a message.
 */
export interface BaseMessage extends Omit<BaseCreateMessage, 'attachments'> {
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * Grant ID of the Nylas account.
     */
    grantId: string;
    /**
     * Unix timestamp of when the message was received by the mail server.
     * This may be different from the unverified Date header in raw message object.
     */
    date: number;
    /**
     * Unix timestamp of when the message was created.
     */
    createdAt: number;
    /**
     * The ID of the folder(s) the message appears in.
     */
    folders: string[];
    /**
     * An array of message senders.
     */
    from?: EmailName[];
    /**
     * An array of files attached to the message.
     */
    attachments?: File[];
}
/**
 * Interface representing a Nylas Message object.
 */
export interface Message extends BaseMessage {
    /**
     * The type of object.
     */
    object: 'message';
    /**
     * The message headers.
     * Only present if the 'fields' query parameter is set to includeHeaders.
     */
    headers?: MessageHeaders[];
    /**
     * A list of key-value pairs storing additional data.
     */
    metadata?: Record<string, unknown>;
}
/**
 * Interface representing a Nylas Message object.
 */
export interface MessageQueryParameters {
    limit?: number;
    page_token?: string;
    /** @description Return items with a matching literal subject. */
    subject?: string;
    /** @description Return emails that have been sent or received from this comma-separated list of email addresses. For example: mail1@mail.com,mail2@mail.com. A maximum of 25 emails may be specified. */
    any_email?: string;
    /** @description Return items containing messages sent to this email address. */
    to?: string;
    /** @description Return items containing messages sent from this email address. */
    from?: string;
    /** @description Return items containing messages that were CC'd to this email address. */
    cc?: string;
    /** @description Return items containing messages that were BCC'd to this email address, likely sent from the parent account. (Most SMTP gateways remove BCC information.) */
    bcc?: string;
    /** @description Return messages that are in a specific folder. Specify which folder by including the folder ID. In API v3, use the Folders API for both folders and Gmail's "lablels". */
    in?: string;
    /** @description Return items with one or more unread messages. */
    unread?: boolean;
    /** @description Return items with one or more starred messages. */
    starred?: boolean;
    /** @description Return items with a matching thread_id. */
    thread_id?: string;
    /** @description Return messages received before this Unix timestamp. */
    received_before?: number;
    /** @description Return messages received after this Unix timestamp. */
    received_after?: number;
    /** @description Return messages with attachments. */
    has_attachment?: boolean;
    /** @description Return messages with headers by specifying "include_headers". */
    fields?: 'standard' | 'include_headers';
    /**
     * @description The provider-specific query string used to search messages. Available for [Google](https://support.google.com/mail/answer/7190?hl=en) and [Microsoft Graph](https://learn.microsoft.com/en-us/graph/search-query-parameter?tabs=http#using-search-on-message-collections) only. If you include a `search_query_native` parameter, you can only use a few specific query parameters with it. For Microsoft this is `limit` and `page_token`, and for Google you can use `limit`, `page_token` and `thread_id`. A `search_query_native` value example for Google would be `subject:foo OR subject:bar`.
     * @example subject%3Afoo%20OR%20subject%3Abar
     */
    search_query_native?: string;
}
export {};
